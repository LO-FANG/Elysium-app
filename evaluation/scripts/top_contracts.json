[{"Rank": 1, "Address": "0x00000000219ab540356cbb839cbe05303d7705fa", "NameTag": "Eth2 Deposit Contract", "Balance": 8220210.000069, "Percentage": 6.9798052, "TxCount": 163511, "SourceCode": "// \u250f\u2501\u2501\u2501\u2513\u2501\u250f\u2513\u2501\u250f\u2513\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\r\n// \u2503\u250f\u2501\u2501\u251b\u250f\u251b\u2517\u2513\u2503\u2503\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u2517\u2513\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\r\n// \u2503\u2517\u2501\u2501\u2513\u2517\u2513\u250f\u251b\u2503\u2517\u2501\u2513\u2517\u251b\u250f\u251b\u2503\u2501\u2501\u2503\u2503\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2513\u2517\u2513\u250f\u251b\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u2517\u251b\u250f\u2501\u2501\u2513\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2513\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2517\u2513\u250f\u251b\r\n// \u2503\u250f\u2501\u2501\u251b\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u250f\u2501\u251b\u250f\u251b\u2501\u2501\u2503\u2503\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2503\u2503\u2501\u2501\u252b\u2523\u252b\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u250f\u2513\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u251b\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2501\u251b\u2501\u2503\u2503\u2501\r\n// \u2503\u2517\u2501\u2501\u2513\u2501\u2503\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u250f\u2513\u2503\u2517\u2501\u251b\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u251b\u2503\u2503\u2503\u2501\u252b\u2503\u2517\u251b\u2503\u2503\u2517\u251b\u2503\u2523\u2501\u2501\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u251b\u2503\u2503\u2517\u251b\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u2503\u2517\u251b\u2517\u2513\u2503\u2517\u2501\u2513\u2501\u2503\u2517\u2513\r\n// \u2517\u2501\u2501\u2501\u251b\u2501\u2517\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2503\u250f\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2501\u2501\u2501\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u251b\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u2501\u251b\r\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\r\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2517\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\r\n\r\n// SPDX-License-Identifier: CC0-1.0\r\n\r\npragma solidity 0.6.11;\r\n\r\n// This interface is designed to be compatible with the Vyper version.\r\n/// @notice This is the Ethereum 2.0 deposit contract interface.\r\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\r\ninterface IDepositContract {\r\n    /// @notice A processed deposit event.\r\n    event DepositEvent(\r\n        bytes pubkey,\r\n        bytes withdrawal_credentials,\r\n        bytes amount,\r\n        bytes signature,\r\n        bytes index\r\n    );\r\n\r\n    /// @notice Submit a Phase 0 DepositData object.\r\n    /// @param pubkey A BLS12-381 public key.\r\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\r\n    /// @param signature A BLS12-381 signature.\r\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\r\n    /// Used as a protection against malformed input.\r\n    function deposit(\r\n        bytes calldata pubkey,\r\n        bytes calldata withdrawal_credentials,\r\n        bytes calldata signature,\r\n        bytes32 deposit_data_root\r\n    ) external payable;\r\n\r\n    /// @notice Query the current deposit root hash.\r\n    /// @return The deposit root hash.\r\n    function get_deposit_root() external view returns (bytes32);\r\n\r\n    /// @notice Query the current deposit count.\r\n    /// @return The deposit count encoded as a little endian 64-bit number.\r\n    function get_deposit_count() external view returns (bytes memory);\r\n}\r\n\r\n// Based on official specification in https://eips.ethereum.org/EIPS/eip-165\r\ninterface ERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceId The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceId` and\r\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\r\n}\r\n\r\n// This is a rewrite of the Vyper Eth2.0 deposit contract in Solidity.\r\n// It tries to stay as close as possible to the original source code.\r\n/// @notice This is the Ethereum 2.0 deposit contract interface.\r\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\r\ncontract DepositContract is IDepositContract, ERC165 {\r\n    uint constant DEPOSIT_CONTRACT_TREE_DEPTH = 32;\r\n    // NOTE: this also ensures `deposit_count` will fit into 64-bits\r\n    uint constant MAX_DEPOSIT_COUNT = 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1;\r\n\r\n    bytes32[DEPOSIT_CONTRACT_TREE_DEPTH] branch;\r\n    uint256 deposit_count;\r\n\r\n    bytes32[DEPOSIT_CONTRACT_TREE_DEPTH] zero_hashes;\r\n\r\n    constructor() public {\r\n        // Compute hashes in empty sparse Merkle tree\r\n        for (uint height = 0; height < DEPOSIT_CONTRACT_TREE_DEPTH - 1; height++)\r\n            zero_hashes[height + 1] = sha256(abi.encodePacked(zero_hashes[height], zero_hashes[height]));\r\n    }\r\n\r\n    function get_deposit_root() override external view returns (bytes32) {\r\n        bytes32 node;\r\n        uint size = deposit_count;\r\n        for (uint height = 0; height < DEPOSIT_CONTRACT_TREE_DEPTH; height++) {\r\n            if ((size & 1) == 1)\r\n                node = sha256(abi.encodePacked(branch[height], node));\r\n            else\r\n                node = sha256(abi.encodePacked(node, zero_hashes[height]));\r\n            size /= 2;\r\n        }\r\n        return sha256(abi.encodePacked(\r\n            node,\r\n            to_little_endian_64(uint64(deposit_count)),\r\n            bytes24(0)\r\n        ));\r\n    }\r\n\r\n    function get_deposit_count() override external view returns (bytes memory) {\r\n        return to_little_endian_64(uint64(deposit_count));\r\n    }\r\n\r\n    function deposit(\r\n        bytes calldata pubkey,\r\n        bytes calldata withdrawal_credentials,\r\n        bytes calldata signature,\r\n        bytes32 deposit_data_root\r\n    ) override external payable {\r\n        // Extended ABI length checks since dynamic types are used.\r\n        require(pubkey.length == 48, \"DepositContract: invalid pubkey length\");\r\n        require(withdrawal_credentials.length == 32, \"DepositContract: invalid withdrawal_credentials length\");\r\n        require(signature.length == 96, \"DepositContract: invalid signature length\");\r\n\r\n        // Check deposit amount\r\n        require(msg.value >= 1 ether, \"DepositContract: deposit value too low\");\r\n        require(msg.value % 1 gwei == 0, \"DepositContract: deposit value not multiple of gwei\");\r\n        uint deposit_amount = msg.value / 1 gwei;\r\n        require(deposit_amount <= type(uint64).max, \"DepositContract: deposit value too high\");\r\n\r\n        // Emit `DepositEvent` log\r\n        bytes memory amount = to_little_endian_64(uint64(deposit_amount));\r\n        emit DepositEvent(\r\n            pubkey,\r\n            withdrawal_credentials,\r\n            amount,\r\n            signature,\r\n            to_little_endian_64(uint64(deposit_count))\r\n        );\r\n\r\n        // Compute deposit data root (`DepositData` hash tree root)\r\n        bytes32 pubkey_root = sha256(abi.encodePacked(pubkey, bytes16(0)));\r\n        bytes32 signature_root = sha256(abi.encodePacked(\r\n            sha256(abi.encodePacked(signature[:64])),\r\n            sha256(abi.encodePacked(signature[64:], bytes32(0)))\r\n        ));\r\n        bytes32 node = sha256(abi.encodePacked(\r\n            sha256(abi.encodePacked(pubkey_root, withdrawal_credentials)),\r\n            sha256(abi.encodePacked(amount, bytes24(0), signature_root))\r\n        ));\r\n\r\n        // Verify computed and expected deposit data roots match\r\n        require(node == deposit_data_root, \"DepositContract: reconstructed DepositData does not match supplied deposit_data_root\");\r\n\r\n        // Avoid overflowing the Merkle tree (and prevent edge case in computing `branch`)\r\n        require(deposit_count < MAX_DEPOSIT_COUNT, \"DepositContract: merkle tree full\");\r\n\r\n        // Add deposit data root to Merkle tree (update a single `branch` node)\r\n        deposit_count += 1;\r\n        uint size = deposit_count;\r\n        for (uint height = 0; height < DEPOSIT_CONTRACT_TREE_DEPTH; height++) {\r\n            if ((size & 1) == 1) {\r\n                branch[height] = node;\r\n                return;\r\n            }\r\n            node = sha256(abi.encodePacked(branch[height], node));\r\n            size /= 2;\r\n        }\r\n        // As the loop should always end prematurely with the `return` statement,\r\n        // this code should be unreachable. We assert `false` just to be safe.\r\n        assert(false);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) override external pure returns (bool) {\r\n        return interfaceId == type(ERC165).interfaceId || interfaceId == type(IDepositContract).interfaceId;\r\n    }\r\n\r\n    function to_little_endian_64(uint64 value) internal pure returns (bytes memory ret) {\r\n        ret = new bytes(8);\r\n        bytes8 bytesValue = bytes8(value);\r\n        // Byteswapping during copying to bytes.\r\n        ret[0] = bytesValue[7];\r\n        ret[1] = bytesValue[6];\r\n        ret[2] = bytesValue[5];\r\n        ret[3] = bytesValue[4];\r\n        ret[4] = bytesValue[3];\r\n        ret[5] = bytesValue[2];\r\n        ret[6] = bytesValue[1];\r\n        ret[7] = bytesValue[0];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"amount\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"index\",\"type\":\"bytes\"}],\"name\":\"DepositEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_deposit_count\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_deposit_root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "DepositContract", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "1", "Runs": "5000000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dceca8706b29e917dacf25fceef95acac8d90d765ac926663ce4096195952b61"}, {"Rank": 8, "Address": "0xc61b9bb3a7a0767e3179713f3a5c7a9aedce193c", "NameTag": "Bitfinex: MultiSig 3", "Balance": 1000020.76046368, "Percentage": 0.84912066, "TxCount": 52, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 18, "Address": "0xa929022c9107643515f5c777ce9a910f0d1e490c", "NameTag": "HECO Chain: Bridge", "Balance": 411787.117, "Percentage": 0.34964969, "TxCount": 15107, "SourceCode": "// Sources flattened with hardhat v2.0.7 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.3.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/GSN/Context.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Pausable.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Container.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract Container {\r\n\r\n    struct Item{\r\n        uint256 itemType;\r\n        uint256 status;\r\n        address[] addresses;\r\n    }\r\n\r\n    uint256 MaxItemAdressNum = 255;\r\n    mapping (bytes32 => Item) private container;\r\n    // bool private _nativePaused = false;\r\n\r\n\r\n    function itemAddressExists(bytes32 _id, address _oneAddress) internal view returns(bool){\r\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\r\n            if(container[_id].addresses[i] == _oneAddress)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function getItemAddresses(bytes32 _id) internal view returns(address[] memory){\r\n        return container[_id].addresses;\r\n    }\r\n\r\n    function getItemInfo(bytes32 _id) internal view returns(uint256, uint256, uint256){\r\n        return (container[_id].itemType, container[_id].status, container[_id].addresses.length);\r\n    }\r\n\r\n    function getItemAddressCount(bytes32 _id) internal view returns(uint256){\r\n        return container[_id].addresses.length;\r\n    }\r\n\r\n    function setItemInfo(bytes32 _id, uint256 _itemType, uint256 _status) internal{\r\n        container[_id].itemType = _itemType;\r\n        container[_id].status = _status;\r\n    }\r\n\r\n    function addItemAddress(bytes32 _id, address _oneAddress) internal{\r\n        require(!itemAddressExists(_id, _oneAddress), \"dup address added\");\r\n        require(container[_id].addresses.length < MaxItemAdressNum, \"too many addresses\");\r\n        container[_id].addresses.push(_oneAddress);\r\n    }\r\n    function removeItemAddresses(bytes32 _id) internal {\r\n        delete container[_id].addresses;\r\n    }\r\n\r\n    function removeOneItemAddress(bytes32 _id, address _oneAddress) internal {\r\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\r\n            if(container[_id].addresses[i] == _oneAddress){\r\n                container[_id].addresses[i] = container[_id].addresses[container[_id].addresses.length - 1];\r\n                container[_id].addresses.pop();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeItem(bytes32 _id) internal{\r\n        delete container[_id];\r\n    }\r\n\r\n    function replaceItemAddress(bytes32 _id, address _oneAddress, address _anotherAddress) internal {\r\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\r\n            if(container[_id].addresses[i] == _oneAddress){\r\n                container[_id].addresses[i] = _anotherAddress;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/BridgeStorage.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract BridgeStorage is Container {\r\n    string public constant name = \"BridgeStorage\";\r\n\r\n    address private caller;\r\n\r\n    constructor(address aCaller) {\r\n        caller = aCaller;\r\n    }\r\n\r\n    modifier onlyCaller() {\r\n        require(msg.sender == caller, \"only use main contract to call\");\r\n        _;\r\n    }\r\n\r\n    function supporterExists(bytes32 taskHash, address user) public view returns(bool) {\r\n        return itemAddressExists(taskHash, user);\r\n    }\r\n\r\n    function setTaskInfo(bytes32 taskHash, uint256 taskType, uint256 status) external onlyCaller {\r\n        setItemInfo(taskHash, taskType, status);\r\n    }\r\n\r\n    function getTaskInfo(bytes32 taskHash) public view returns(uint256, uint256, uint256){\r\n        return getItemInfo(taskHash);\r\n    }\r\n\r\n    function addSupporter(bytes32 taskHash, address oneAddress) external onlyCaller{\r\n        addItemAddress(taskHash, oneAddress);\r\n    }\r\n\r\n    function removeAllSupporter(bytes32 taskHash) external onlyCaller {\r\n        removeItemAddresses(taskHash);\r\n    }\r\n    function removeTask(bytes32 taskHash)external onlyCaller{\r\n        removeItem(taskHash);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/BridgeAdmin.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract BridgeAdmin is Container {\r\n    bytes32 internal constant OWNERHASH = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0;\r\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\r\n    bytes32 internal constant PAUSERHASH = 0x0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f;\r\n    bytes32 internal constant STOREHASH = 0xe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd1680;\r\n    bytes32 internal constant LOGICHASH = 0x397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f182;\r\n    uint256 internal constant MAXUSERNUM = 255;\r\n    bytes32[] private classHashArray;\r\n\r\n    uint256 internal ownerRequireNum;\r\n    uint256 internal operatorRequireNum;\r\n\r\n    event AdminChanged(string TaskType, string class, address oldAddress, address newAddress);\r\n    event AdminRequiredNumChanged(string TaskType, string class, uint256 previousNum, uint256 requiredNum);\r\n    event AdminTaskDropped(bytes32 taskHash);\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        require(ownerCount <= MaxItemAdressNum\r\n        && _required <= ownerCount\r\n        && _required > 0\r\n            && ownerCount > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(itemAddressExists(OWNERHASH, msg.sender), \"only use owner to call\");\r\n        _;\r\n    }\r\n\r\n    function initAdmin(address[] memory _owners, uint _ownerRequired) internal validRequirement(_owners.length, _ownerRequired) {\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            addItemAddress(OWNERHASH, _owners[i]);\r\n        }\r\n        addItemAddress(PAUSERHASH,_owners[0]);// we need an init pauser\r\n        addItemAddress(LOGICHASH, address(0x0));\r\n        addItemAddress(STOREHASH, address(0x1));\r\n\r\n        classHashArray.push(OWNERHASH);\r\n        classHashArray.push(OPERATORHASH);\r\n        classHashArray.push(PAUSERHASH);\r\n        classHashArray.push(STOREHASH);\r\n        classHashArray.push(LOGICHASH);\r\n        ownerRequireNum = _ownerRequired;\r\n        operatorRequireNum = 2;\r\n    }\r\n\r\n    function classHashExist(bytes32 aHash) private view returns (bool) {\r\n        for (uint256 i = 0; i < classHashArray.length; i++)\r\n            if (classHashArray[i] == aHash) return true;\r\n        return false;\r\n    }\r\n\r\n    function getAdminAddresses(string memory class) public view returns (address[] memory) {\r\n        bytes32 classHash = getClassHash(class);\r\n        return getItemAddresses(classHash);\r\n    }\r\n\r\n    function getOwnerRequireNum() public view returns (uint256){\r\n        return ownerRequireNum;\r\n    }\r\n\r\n    function getOperatorRequireNum() public view returns (uint256){\r\n        return operatorRequireNum;\r\n    }\r\n\r\n    function resetRequiredNum(string memory class, uint256 requiredNum) public onlyOwner returns (bool){\r\n        bytes32 classHash = getClassHash(class);\r\n        require((classHash == OPERATORHASH) || (classHash == OWNERHASH), \"wrong class\");\r\n\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"resetRequiredNum\", class, requiredNum));\r\n        addItemAddress(taskHash, msg.sender);\r\n\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            removeItem(taskHash);\r\n            uint256 previousNum = 0;\r\n            if (classHash == OWNERHASH) {\r\n                previousNum = ownerRequireNum;\r\n                ownerRequireNum = requiredNum;\r\n            }\r\n            else if (classHash == OPERATORHASH) {\r\n                previousNum = operatorRequireNum;\r\n                operatorRequireNum = requiredNum;\r\n            } else {\r\n                revert(\"wrong class\");\r\n            }\r\n            emit AdminRequiredNumChanged(\"resetRequiredNum\", class, previousNum, requiredNum);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function modifyAddress(string memory class, address oldAddress, address newAddress) internal onlyOwner returns (bool){\r\n        bytes32 classHash = getClassHash(class);\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"modifyAddress\", class, oldAddress, newAddress));\r\n        addItemAddress(taskHash, msg.sender);\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            replaceItemAddress(classHash, oldAddress, newAddress);\r\n            emit AdminChanged(\"modifyAddress\", class, oldAddress, newAddress);\r\n            removeItem(taskHash);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getClassHash(string memory class) private view returns (bytes32){\r\n        bytes32 classHash = keccak256(abi.encodePacked(class));\r\n        require(classHashExist(classHash), \"invalid class\");\r\n        return classHash;\r\n    }\r\n\r\n    function dropAddress(string memory class, address oneAddress) public onlyOwner returns (bool){\r\n        bytes32 classHash = getClassHash(class);\r\n        require(classHash != STOREHASH && classHash != LOGICHASH, \"wrong class\");\r\n        require(itemAddressExists(classHash, oneAddress), \"no such address exist\");\r\n\r\n        if (classHash == OWNERHASH)\r\n            require(getItemAddressCount(classHash) > ownerRequireNum, \"insuffience addresses\");\r\n\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"dropAddress\", class, oneAddress));\r\n        addItemAddress(taskHash, msg.sender);\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            removeOneItemAddress(classHash, oneAddress);\r\n            emit AdminChanged(\"dropAddress\", class, oneAddress, oneAddress);\r\n            removeItem(taskHash);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addAddress(string memory class, address oneAddress) public onlyOwner returns (bool){\r\n        bytes32 classHash = getClassHash(class);\r\n        require(classHash != STOREHASH && classHash != LOGICHASH, \"wrong class\");\r\n\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"addAddress\", class, oneAddress));\r\n        addItemAddress(taskHash, msg.sender);\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            addItemAddress(classHash, oneAddress);\r\n            emit AdminChanged(\"addAddress\", class, oneAddress, oneAddress);\r\n            removeItem(taskHash);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function dropTask(bytes32 taskHash) public onlyOwner returns (bool){\r\n        removeItem(taskHash);\r\n        emit AdminTaskDropped(taskHash);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/BridgeLogic.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n\r\ncontract BridgeLogic {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"BridgeLogic\";\r\n\r\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\r\n    uint256 public constant TASKINIT = 0;\r\n    uint256 public constant TASKPROCESSING = 1;\r\n    uint256 public constant TASKCANCELLED = 2;\r\n    uint256 public constant TASKDONE = 3;\r\n    uint256 public constant WITHDRAWTASK = 1;\r\n\r\n    address private caller;\r\n    BridgeStorage private store;\r\n\r\n    constructor(address aCaller) {\r\n        caller = aCaller;\r\n    }\r\n\r\n    modifier onlyCaller(){\r\n        require(msg.sender == caller, \"only main contract can call\");\r\n        _;\r\n    }\r\n\r\n    modifier operatorExists(address operator) {\r\n        require(store.supporterExists(OPERATORHASH, operator), \"wrong operator\");\r\n        _;\r\n    }\r\n\r\n    function resetStoreLogic(address storeAddress) external onlyCaller {\r\n        store = BridgeStorage(storeAddress);\r\n    }\r\n\r\n    function getStoreAddress() public view returns(address) {\r\n        return address(store);\r\n    }\r\n\r\n    function supportTask(uint256 taskType, bytes32 taskHash, address oneAddress, uint256 requireNum) external onlyCaller returns(uint256){\r\n        require(!store.supporterExists(taskHash, oneAddress), \"supporter already exists\");\r\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\r\n        require(theTaskStatus < TASKDONE, \"wrong status\");\r\n\r\n        if (theTaskStatus != TASKINIT)\r\n            require(theTaskType == taskType, \"task type not match\");\r\n        store.addSupporter(taskHash, oneAddress);\r\n        theSupporterNum++;\r\n        if(theSupporterNum >= requireNum)\r\n            theTaskStatus = TASKDONE;\r\n        else\r\n            theTaskStatus = TASKPROCESSING;\r\n        store.setTaskInfo(taskHash, taskType, theTaskStatus);\r\n        return theTaskStatus;\r\n    }\r\n\r\n    function cancelTask(bytes32 taskHash)  external onlyCaller returns(uint256) {\r\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\r\n        require(theTaskStatus == TASKPROCESSING, \"wrong status\");\r\n        if(theSupporterNum > 0) store.removeAllSupporter(taskHash);\r\n        theTaskStatus = TASKCANCELLED;\r\n        store.setTaskInfo(taskHash, theTaskType, theTaskStatus);\r\n        return theTaskStatus;\r\n    }\r\n    function removeTask(bytes32 taskHash)  external onlyCaller {\r\n        store.removeTask(taskHash);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// File contracts/ERC20Sample.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\nabstract contract ERC20Template is IERC20 {\r\n\r\n    function mint(address account, uint256 amount) public{\r\n    }\r\n    function burn(address account , uint256 amount) public{\r\n    }\r\n    function redeem(address account, uint256 amount)public {\r\n    }\r\n    function issue(address account, uint256 amount) public {\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Bridge.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Bridge is BridgeAdmin, Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Bridge\";\r\n\r\n    BridgeLogic private logic;\r\n\r\n    event DepositNative(address indexed from, uint256 value, string targetAddress, string chain);\r\n    event DepositToken(address indexed from, uint256 value, address indexed token, string targetAddress, string chain, uint256 nativeValue);\r\n    event WithdrawingNative(address indexed to, uint256 value, string proof);\r\n    event WithdrawingToken(address indexed to, address indexed token, uint256 value, string proof);\r\n    event WithdrawDoneNative(address indexed to, uint256 value, string proof);\r\n    event WithdrawDoneToken(address indexed to, address indexed token, uint256 value, string proof);\r\n\r\n    modifier onlyOperator() {\r\n        require(itemAddressExists(OPERATORHASH, msg.sender), \"wrong operator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(itemAddressExists(PAUSERHASH, msg.sender), \"wrong pauser\");\r\n        _;\r\n    }\r\n\r\n    modifier positiveValue(uint _value) {\r\n        require(_value > 0, \"value need > 0\");\r\n        _;\r\n    }\r\n\r\n\r\n    constructor(address[] memory _owners, uint _ownerRequired) {\r\n        initAdmin(_owners, _ownerRequired);\r\n\r\n    }\r\n\r\n    function depositNative(string memory _targetAddress, string memory  chain) public payable {\r\n        emit DepositNative(msg.sender, msg.value, _targetAddress,chain);\r\n    }\r\n\r\n    function depositToken(address _token, uint value, string memory _targetAddress, string memory chain) public payable returns (bool){\r\n        //deposit(address token, address _from, uint256 _value)\r\n        bool res = depositTokenLogic(_token,  msg.sender, value);\r\n        emit DepositToken(msg.sender, value, _token, _targetAddress, chain, msg.value);\r\n        return res;\r\n    }// \r\n\r\n    function withdrawNative(address payable to, uint value, string memory proof, bytes32 taskHash) public\r\n    onlyOperator\r\n    whenNotPaused\r\n    positiveValue(value)\r\n    returns(bool)\r\n    {\r\n        require(address(this).balance >= value, \"not enough native token\");\r\n        require(taskHash == keccak256((abi.encodePacked(to,value,proof))),\"taskHash is wrong\");\r\n        uint256 status = logic.supportTask(logic.WITHDRAWTASK(), taskHash, msg.sender, operatorRequireNum);\r\n\r\n        if (status == logic.TASKPROCESSING()){\r\n            emit WithdrawingNative(to, value, proof);\r\n        }else if (status == logic.TASKDONE()) {\r\n            emit WithdrawingNative(to, value, proof);\r\n            emit WithdrawDoneNative(to, value, proof);\r\n            to.transfer(value);\r\n            logic.removeTask(taskHash);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdrawToken(address _token, address to, uint value, string memory proof, bytes32 taskHash) public\r\n    onlyOperator\r\n    whenNotPaused\r\n    positiveValue(value)\r\n    returns (bool)\r\n    {\r\n        require(taskHash == keccak256((abi.encodePacked(to,value,proof))),\"taskHash is wrong\");\r\n        uint256 status = logic.supportTask(logic.WITHDRAWTASK(), taskHash, msg.sender, operatorRequireNum);\r\n\r\n        if (status == logic.TASKPROCESSING()){\r\n            emit WithdrawingToken(to, _token, value, proof);\r\n        }else if (status == logic.TASKDONE()) {\r\n            // withdraw(address token, address _to, address _value)\r\n            bool res = withdrawTokenLogic( _token, to, value);\r\n\r\n            emit WithdrawingToken(to, _token, value, proof);\r\n            emit WithdrawDoneToken(to, _token, value, proof);\r\n            logic.removeTask(taskHash);\r\n            return res;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function modifyAdminAddress(string memory class, address oldAddress, address newAddress) public whenPaused {\r\n        require(newAddress != address(0x0), \"wrong address\");\r\n        bool flag = modifyAddress(class, oldAddress, newAddress);\r\n        if(flag){\r\n            bytes32 classHash = keccak256(abi.encodePacked(class));\r\n            if(classHash == LOGICHASH){\r\n                logic = BridgeLogic(newAddress);\r\n            }else if(classHash == STOREHASH){\r\n                logic.resetStoreLogic(newAddress);\r\n            }\r\n        }\r\n    }\r\n    function getLogicAddress() public view returns(address){\r\n        return address(logic);\r\n    }\r\n\r\n    function getStoreAddress() public view returns(address){\r\n        return logic.getStoreAddress();\r\n    }\r\n\r\n    function pause() public onlyPauser {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyPauser {\r\n        _unpause();\r\n    }\r\n\r\n\r\n    function transferToken(address token, address to , uint256 value) onlyPauser external{\r\n        IERC20 atoken = IERC20(token);\r\n        bool success = atoken.transfer(to,value);\r\n    }\r\n\r\n\r\n    function setDepositSelector(address token, string memory method, bool _isValueFirst) onlyOperator external{\r\n        depositSelector[token] = assetSelector(method,_isValueFirst);\r\n    }\r\n\r\n    function setWithdrawSelector(address token, string memory method, bool _isValueFirst) onlyOperator external{\r\n        withdrawSelector[token] = assetSelector(method,_isValueFirst);\r\n    }\r\n\r\n\r\n    struct assetSelector{\r\n        string selector;\r\n        bool isValueFirst;\r\n    }\r\n\r\n    mapping (address=>assetSelector)  public depositSelector;\r\n    mapping (address=> assetSelector) public withdrawSelector;\r\n\r\n    function depositTokenLogic(address token, address _from, uint256 _value) internal returns(bool){\r\n        bool status = false;\r\n        bytes memory returnedData;\r\n        if (bytes(depositSelector[token].selector).length == 0){\r\n            (status,returnedData)= token.call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\",_from,this,_value));\r\n        }\r\n        else{\r\n            assetSelector memory aselector = depositSelector[token];\r\n            if (aselector.isValueFirst){\r\n                (status, returnedData) = token.call(abi.encodeWithSignature(aselector.selector,_value,_from));\r\n            }\r\n            else {\r\n                (status,returnedData)= token.call(abi.encodeWithSignature(aselector.selector,_from,_value));\r\n            }\r\n        }\r\n        require(\r\n            status && (returnedData.length == 0 || abi.decode(returnedData, (bool))),\r\n            ' transfer failed');\r\n        return true;\r\n    }\r\n\r\n    function withdrawTokenLogic(address token, address _to, uint256 _value) internal returns(bool){\r\n        bool status = false;\r\n        bytes memory returnedData;\r\n        if (bytes(withdrawSelector[token].selector).length==0){\r\n            (status,returnedData)= token.call(abi.encodeWithSignature(\"transfer(address,uint256)\",_to,_value));\r\n        }\r\n        else{\r\n            assetSelector memory aselector = withdrawSelector[token];\r\n            if (aselector.isValueFirst){\r\n                (status,returnedData) = token.call(abi.encodeWithSignature( aselector.selector,_value,_to));\r\n            }\r\n            else {\r\n                (status,returnedData)= token.call(abi.encodeWithSignature(aselector.selector,_to,_value));\r\n            }\r\n        }\r\n\r\n        require(status && (returnedData.length == 0 || abi.decode(returnedData, (bool))),'withdraw failed');\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_ownerRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"TaskType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"TaskType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredNum\",\"type\":\"uint256\"}],\"name\":\"AdminRequiredNumChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"AdminTaskDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"DepositNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeValue\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawDoneNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawDoneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawingNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawingToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oneAddress\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_targetAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositSelector\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"selector\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isValueFirst\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_targetAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oneAddress\",\"type\":\"address\"}],\"name\":\"dropAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"dropTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"}],\"name\":\"getAdminAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLogicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorRequireNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerRequireNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"modifyAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requiredNum\",\"type\":\"uint256\"}],\"name\":\"resetRequiredNum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isValueFirst\",\"type\":\"bool\"}],\"name\":\"setDepositSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isValueFirst\",\"type\":\"bool\"}],\"name\":\"setWithdrawSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"withdrawNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawSelector\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"selector\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isValueFirst\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bridge", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d2b75596a63728d84d341f2e3ce6ddae66810128", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://175fd30761d46f49bdd013683f3d26a07b057927b3f48644cc55d126254c0718"}, {"Rank": 19, "Address": "0x8484ef722627bf18ca5ae6bcf031c23e6e922b30", "NameTag": "Polygon (Matic): Ether Bridge", "Balance": 389676.65204961, "Percentage": 0.33087563, "TxCount": 9, "SourceCode": "// File: contracts/common/Proxy/IERCProxy.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\ninterface IERCProxy {\r\n    function proxyType() external pure returns (uint256 proxyTypeId);\r\n\r\n    function implementation() external view returns (address codeAddr);\r\n}\r\n\r\n// File: contracts/common/Proxy/Proxy.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\nabstract contract Proxy is IERCProxy {\r\n    function delegatedFwd(address _dst, bytes memory _calldata) internal {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let result := delegatecall(\r\n                sub(gas(), 10000),\r\n                _dst,\r\n                add(_calldata, 0x20),\r\n                mload(_calldata),\r\n                0,\r\n                0\r\n            )\r\n            let size := returndatasize()\r\n\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\r\n            // if the call returned error data, forward it\r\n            switch result\r\n                case 0 {\r\n                    revert(ptr, size)\r\n                }\r\n                default {\r\n                    return(ptr, size)\r\n                }\r\n        }\r\n    }\r\n\r\n    function proxyType() external virtual override pure returns (uint256 proxyTypeId) {\r\n        // Upgradeable proxy\r\n        proxyTypeId = 2;\r\n    }\r\n\r\n    function implementation() external virtual override view returns (address);\r\n}\r\n\r\n// File: contracts/common/Proxy/UpgradableProxy.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ncontract UpgradableProxy is Proxy {\r\n    event ProxyUpdated(address indexed _new, address indexed _old);\r\n    event ProxyOwnerUpdate(address _new, address _old);\r\n\r\n    bytes32 constant IMPLEMENTATION_SLOT = keccak256(\"matic.network.proxy.implementation\");\r\n    bytes32 constant OWNER_SLOT = keccak256(\"matic.network.proxy.owner\");\r\n\r\n    constructor(address _proxyTo) public {\r\n        setProxyOwner(msg.sender);\r\n        setImplementation(_proxyTo);\r\n    }\r\n\r\n    fallback() external payable {\r\n        delegatedFwd(loadImplementation(), msg.data);\r\n    }\r\n\r\n    receive() external payable {\r\n        delegatedFwd(loadImplementation(), msg.data);\r\n    }\r\n\r\n    modifier onlyProxyOwner() {\r\n        require(loadProxyOwner() == msg.sender, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    function proxyOwner() external view returns(address) {\r\n        return loadProxyOwner();\r\n    }\r\n\r\n    function loadProxyOwner() internal view returns(address) {\r\n        address _owner;\r\n        bytes32 position = OWNER_SLOT;\r\n        assembly {\r\n            _owner := sload(position)\r\n        }\r\n        return _owner;\r\n    }\r\n\r\n    function implementation() external override view returns (address) {\r\n        return loadImplementation();\r\n    }\r\n\r\n    function loadImplementation() internal view returns(address) {\r\n        address _impl;\r\n        bytes32 position = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            _impl := sload(position)\r\n        }\r\n        return _impl;\r\n    }\r\n\r\n    function transferProxyOwnership(address newOwner) public onlyProxyOwner {\r\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\r\n        emit ProxyOwnerUpdate(newOwner, loadProxyOwner());\r\n        setProxyOwner(newOwner);\r\n    }\r\n\r\n    function setProxyOwner(address newOwner) private {\r\n        bytes32 position = OWNER_SLOT;\r\n        assembly {\r\n            sstore(position, newOwner)\r\n        }\r\n    }\r\n\r\n    function updateImplementation(address _newProxyTo) public onlyProxyOwner {\r\n        require(_newProxyTo != address(0x0), \"INVALID_PROXY_ADDRESS\");\r\n        require(isContract(_newProxyTo), \"DESTINATION_ADDRESS_IS_NOT_A_CONTRACT\");\r\n\r\n        emit ProxyUpdated(_newProxyTo, loadImplementation());\r\n        \r\n        setImplementation(_newProxyTo);\r\n    }\r\n\r\n    function updateAndCall(address _newProxyTo, bytes memory data) payable public onlyProxyOwner {\r\n        updateImplementation(_newProxyTo);\r\n\r\n        (bool success, bytes memory returnData) = address(this).call{value: msg.value}(data);\r\n        require(success, string(returnData));\r\n    }\r\n\r\n    function setImplementation(address _newProxyTo) private {\r\n        bytes32 position = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            sstore(position, _newProxyTo)\r\n        }\r\n    }\r\n    \r\n    function isContract(address _target) internal view returns (bool) {\r\n        if (_target == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_target)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/root/TokenPredicates/EtherPredicateProxy.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ncontract EtherPredicateProxy is UpgradableProxy {\r\n    constructor(address _proxyTo)\r\n        public\r\n        UpgradableProxy(_proxyTo)\r\n    {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"}],\"name\":\"ProxyOwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"}],\"name\":\"ProxyUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proxyTypeId\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProxyTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"updateAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProxyTo\",\"type\":\"address\"}],\"name\":\"updateImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EtherPredicateProxy", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0x54006763154c764da4af42a8c3cfc25ea29765d5", "SwarmSource": "ipfs://473addc2dfd800f9bd17510bf11eef42d9ddb76820db4dc99c4a0e72a9023176"}, {"Rank": 22, "Address": "0x220866b1a2219f40e72f5c628b65d54268ca3a9d", "NameTag": "Vb 3", "Balance": 325000.91459528, "Percentage": 0.27595926, "TxCount": 23, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 39, "Address": "0x1db92e2eebc8e0c075a02bea49a2935bcd2dfcf4", "NameTag": "", "Balance": 204932.76849543, "Percentage": 0.17400903, "TxCount": 122959, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 106, "Address": "0x78605df79524164911c144801f41e9811b7db73d", "NameTag": "BitDAO: Treasury", "Balance": 138714.89847312, "Percentage": 0.11778323, "TxCount": 16, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 203, "Address": "0xeae57ce9cc1984f202e15e038b964bb8bdf7229a", "NameTag": "Sollet: Solana Bridge", "Balance": 72247.21357361, "Percentage": 0.06134532, "TxCount": 63081, "SourceCode": "// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/cryptography/ECDSA.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: contracts/SplTokenSwap.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SplTokenSwap is Ownable, Pausable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event Swap(address indexed token, string recipient, uint amount);\r\n    event Withdraw(address indexed token, address indexed recipient, uint amount);\r\n    event NonceUsed(uint indexed nonce, bytes signature);\r\n\r\n    mapping(uint256 => bool) usedNonces;\r\n\r\n    function swapErc20(IERC20 token, string calldata recipient, uint amount) external nonReentrant whenNotPaused {\r\n        require(amount > 0, \"Swap amount must be positive\");\r\n        require(token.allowance(msg.sender, address(this)) >= amount, \"Swap amount exceeds allowance\");\r\n\r\n        token.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        emit Swap(address(token), recipient, amount);\r\n    }\r\n\r\n    function swapEth(string calldata recipient) external payable nonReentrant whenNotPaused {\r\n        uint amount = msg.value;\r\n        require(amount > 0, \"Swap amount must be positive\");\r\n\r\n        emit Swap(address(0), recipient, amount);\r\n    }\r\n\r\n    function withdrawErc20(IERC20 token, address recipient, uint amount, uint nonce, bytes calldata signature) external nonReentrant whenNotPaused {\r\n        bytes32 message = keccak256(abi.encodePacked(\"withdrawErc20\", this, address(token), recipient, amount, nonce));\r\n        bytes32 hash = ECDSA.toEthSignedMessageHash(message);\r\n        address signer = ECDSA.recover(hash, signature);\r\n        require(signer == this.owner(), \"Invalid signature\");\r\n\r\n        require(!usedNonces[nonce], \"Duplicate nonce\");\r\n        usedNonces[nonce] = true;\r\n        emit NonceUsed(nonce, signature);\r\n\r\n        token.safeTransfer(recipient, amount);\r\n        emit Withdraw(address(token), recipient, amount);\r\n    }\r\n\r\n    function withdrawEth(address payable recipient, uint amount, uint nonce, bytes calldata signature) external nonReentrant whenNotPaused {\r\n        bytes32 message = keccak256(abi.encodePacked(\"withdrawEth\", this, recipient, amount, nonce));\r\n        bytes32 hash = ECDSA.toEthSignedMessageHash(message);\r\n        address signer = ECDSA.recover(hash, signature);\r\n        require(signer == this.owner(), \"Invalid signature\");\r\n\r\n        require(!usedNonces[nonce], \"Duplicate nonce\");\r\n        usedNonces[nonce] = true;\r\n        emit NonceUsed(nonce, signature);\r\n\r\n        recipient.transfer(amount);\r\n        emit Withdraw(address(0), recipient, amount);\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function ownerWithdrawErc20(IERC20 token, uint amount) external onlyOwner {\r\n        token.safeTransfer(msg.sender, amount);\r\n        emit Withdraw(address(token), msg.sender, amount);\r\n    }\r\n\r\n    function ownerWithdrawEth(uint amount) external onlyOwner {\r\n        msg.sender.transfer(amount);\r\n        emit Withdraw(address(0), msg.sender, amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"NonceUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipient\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"recipient\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"recipient\",\"type\":\"string\"}],\"name\":\"swapEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SplTokenSwap", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8d2d9c74d84a4bc2fd6058196bced084de250f4aa2e58621e88d02a64c519bab"}, {"Rank": 214, "Address": "0xdca6ab9508d28c0eb7b120b8252041edcb56753f", "NameTag": "", "Balance": 65000.0, "Percentage": 0.05519169, "TxCount": 6, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 260, "Address": "0x4c9a2bd661d640da3634a4988a9bd2bc0f18e5a9", "NameTag": "Bancor: Converter 571", "Balance": 59712.40379496, "Percentage": 0.05070198, "TxCount": 304, "SourceCode": "// File: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: solidity/contracts/converter/ConverterVersion.sol\n\n\npragma solidity 0.6.12;\n\ncontract ConverterVersion {\n    uint16 public constant version = 46;\n}\n\n// File: solidity/contracts/utility/interfaces/IOwned.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Owned contract interface\n*/\ninterface IOwned {\n    // this function isn't since the compiler emits automatically generated getter functions as external\n    function owner() external view returns (address);\n\n    function transferOwnership(address _newOwner) external;\n\n    function acceptOwnership() external;\n}\n\n// File: solidity/contracts/converter/interfaces/IConverterAnchor.sol\n\n\npragma solidity 0.6.12;\n\n\n/*\n    Converter Anchor interface\n*/\ninterface IConverterAnchor is IOwned {\n\n}\n\n// File: solidity/contracts/converter/interfaces/IConverter.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/*\n    Converter interface\n*/\ninterface IConverter is IOwned {\n    function converterType() external pure returns (uint16);\n\n    function anchor() external view returns (IConverterAnchor);\n\n    function isActive() external view returns (bool);\n\n    function targetAmountAndFee(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount\n    ) external view returns (uint256, uint256);\n\n    function convert(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount,\n        address _trader,\n        address payable _beneficiary\n    ) external payable returns (uint256);\n\n    function conversionFee() external view returns (uint32);\n\n    function maxConversionFee() external view returns (uint32);\n\n    function reserveBalance(IERC20 _reserveToken) external view returns (uint256);\n\n    receive() external payable;\n\n    function transferAnchorOwnership(address _newOwner) external;\n\n    function acceptAnchorOwnership() external;\n\n    function setConversionFee(uint32 _conversionFee) external;\n\n    function addReserve(IERC20 _token, uint32 _weight) external;\n\n    function transferReservesOnUpgrade(address _newConverter) external;\n\n    function onUpgradeComplete() external;\n\n    // deprecated, backward compatibility\n    function token() external view returns (IConverterAnchor);\n\n    function transferTokenOwnership(address _newOwner) external;\n\n    function acceptTokenOwnership() external;\n\n    function connectors(IERC20 _address)\n        external\n        view\n        returns (\n            uint256,\n            uint32,\n            bool,\n            bool,\n            bool\n        );\n\n    function getConnectorBalance(IERC20 _connectorToken) external view returns (uint256);\n\n    function connectorTokens(uint256 _index) external view returns (IERC20);\n\n    function connectorTokenCount() external view returns (uint16);\n\n    /**\n     * @dev triggered when the converter is activated\n     *\n     * @param _type        converter type\n     * @param _anchor      converter anchor\n     * @param _activated   true if the converter was activated, false if it was deactivated\n     */\n    event Activation(uint16 indexed _type, IConverterAnchor indexed _anchor, bool indexed _activated);\n\n    /**\n     * @dev triggered when a conversion between two tokens occurs\n     *\n     * @param _fromToken       source ERC20 token\n     * @param _toToken         target ERC20 token\n     * @param _trader          wallet that initiated the trade\n     * @param _amount          input amount in units of the source token\n     * @param _return          output amount minus conversion fee in units of the target token\n     * @param _conversionFee   conversion fee in units of the target token\n     */\n    event Conversion(\n        IERC20 indexed _fromToken,\n        IERC20 indexed _toToken,\n        address indexed _trader,\n        uint256 _amount,\n        uint256 _return,\n        int256 _conversionFee\n    );\n\n    /**\n     * @dev triggered when the rate between two tokens in the converter changes\n     * note that the event might be dispatched for rate updates between any two tokens in the converter\n     *\n     * @param  _token1 address of the first token\n     * @param  _token2 address of the second token\n     * @param  _rateN  rate of 1 unit of `_token1` in `_token2` (numerator)\n     * @param  _rateD  rate of 1 unit of `_token1` in `_token2` (denominator)\n     */\n    event TokenRateUpdate(IERC20 indexed _token1, IERC20 indexed _token2, uint256 _rateN, uint256 _rateD);\n\n    /**\n     * @dev triggered when the conversion fee is updated\n     *\n     * @param  _prevFee    previous fee percentage, represented in ppm\n     * @param  _newFee     new fee percentage, represented in ppm\n     */\n    event ConversionFeeUpdate(uint32 _prevFee, uint32 _newFee);\n}\n\n// File: solidity/contracts/converter/interfaces/IConverterUpgrader.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Converter Upgrader interface\n*/\ninterface IConverterUpgrader {\n    function upgrade(bytes32 _version) external;\n\n    function upgrade(uint16 _version) external;\n}\n\n// File: solidity/contracts/utility/interfaces/ITokenHolder.sol\n\n\npragma solidity 0.6.12;\n\n\n\n/*\n    Token Holder interface\n*/\ninterface ITokenHolder is IOwned {\n    receive() external payable;\n\n    function withdrawTokens(\n        IERC20 token,\n        address payable to,\n        uint256 amount\n    ) external;\n\n    function withdrawTokensMultiple(\n        IERC20[] calldata tokens,\n        address payable to,\n        uint256[] calldata amounts\n    ) external;\n}\n\n// File: solidity/contracts/INetworkSettings.sol\n\n\npragma solidity 0.6.12;\n\n\ninterface INetworkSettings {\n    function networkFeeParams() external view returns (ITokenHolder, uint32);\n\n    function networkFeeWallet() external view returns (ITokenHolder);\n\n    function networkFee() external view returns (uint32);\n}\n\n// File: solidity/contracts/token/interfaces/IDSToken.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/*\n    DSToken interface\n*/\ninterface IDSToken is IConverterAnchor, IERC20 {\n    function issue(address _to, uint256 _amount) external;\n\n    function destroy(address _from, uint256 _amount) external;\n}\n\n// File: solidity/contracts/utility/MathEx.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev This library provides a set of complex math operations.\n */\nlibrary MathEx {\n    uint256 private constant MAX_EXP_BIT_LEN = 4;\n    uint256 private constant MAX_EXP = 2**MAX_EXP_BIT_LEN - 1;\n    uint256 private constant MAX_UINT128 = 2**128 - 1;\n\n    /**\n     * @dev returns the largest integer smaller than or equal to the square root of a positive integer\n     *\n     * @param _num a positive integer\n     *\n     * @return the largest integer smaller than or equal to the square root of the positive integer\n     */\n    function floorSqrt(uint256 _num) internal pure returns (uint256) {\n        uint256 x = _num / 2 + 1;\n        uint256 y = (x + _num / x) / 2;\n        while (x > y) {\n            x = y;\n            y = (x + _num / x) / 2;\n        }\n        return x;\n    }\n\n    /**\n     * @dev returns the smallest integer larger than or equal to the square root of a positive integer\n     *\n     * @param _num a positive integer\n     *\n     * @return the smallest integer larger than or equal to the square root of the positive integer\n     */\n    function ceilSqrt(uint256 _num) internal pure returns (uint256) {\n        uint256 x = floorSqrt(_num);\n        return x * x == _num ? x : x + 1;\n    }\n\n    /**\n     * @dev computes a powered ratio\n     *\n     * @param _n   ratio numerator\n     * @param _d   ratio denominator\n     * @param _exp ratio exponent\n     *\n     * @return powered ratio's numerator and denominator\n     */\n    function poweredRatio(\n        uint256 _n,\n        uint256 _d,\n        uint256 _exp\n    ) internal pure returns (uint256, uint256) {\n        require(_exp <= MAX_EXP, \"ERR_EXP_TOO_LARGE\");\n\n        uint256[MAX_EXP_BIT_LEN] memory ns;\n        uint256[MAX_EXP_BIT_LEN] memory ds;\n\n        (ns[0], ds[0]) = reducedRatio(_n, _d, MAX_UINT128);\n        for (uint256 i = 0; (_exp >> i) > 1; i++) {\n            (ns[i + 1], ds[i + 1]) = reducedRatio(ns[i] ** 2, ds[i] ** 2, MAX_UINT128);\n        }\n\n        uint256 n = 1;\n        uint256 d = 1;\n\n        for (uint256 i = 0; (_exp >> i) > 0; i++) {\n            if (((_exp >> i) & 1) > 0) {\n                (n, d) = reducedRatio(n * ns[i], d * ds[i], MAX_UINT128);\n            }\n        }\n\n        return (n, d);\n    }\n\n    /**\n     * @dev computes a reduced-scalar ratio\n     *\n     * @param _n   ratio numerator\n     * @param _d   ratio denominator\n     * @param _max maximum desired scalar\n     *\n     * @return ratio's numerator and denominator\n     */\n    function reducedRatio(\n        uint256 _n,\n        uint256 _d,\n        uint256 _max\n    ) internal pure returns (uint256, uint256) {\n        (uint256 n, uint256 d) = (_n, _d);\n        if (n > _max || d > _max) {\n            (n, d) = normalizedRatio(n, d, _max);\n        }\n        if (n != d) {\n            return (n, d);\n        }\n        return (1, 1);\n    }\n\n    /**\n     * @dev computes \"scale * a / (a + b)\" and \"scale * b / (a + b)\".\n     */\n    function normalizedRatio(\n        uint256 _a,\n        uint256 _b,\n        uint256 _scale\n    ) internal pure returns (uint256, uint256) {\n        if (_a <= _b) {\n            return accurateRatio(_a, _b, _scale);\n        }\n        (uint256 y, uint256 x) = accurateRatio(_b, _a, _scale);\n        return (x, y);\n    }\n\n    /**\n     * @dev computes \"scale * a / (a + b)\" and \"scale * b / (a + b)\", assuming that \"a <= b\".\n     */\n    function accurateRatio(\n        uint256 _a,\n        uint256 _b,\n        uint256 _scale\n    ) internal pure returns (uint256, uint256) {\n        uint256 maxVal = uint256(-1) / _scale;\n        if (_a > maxVal) {\n            uint256 c = _a / (maxVal + 1) + 1;\n            _a /= c; // we can now safely compute `_a * _scale`\n            _b /= c;\n        }\n        if (_a != _b) {\n            uint256 n = _a * _scale;\n            uint256 d = _a + _b; // can overflow\n            if (d >= _a) {\n                // no overflow in `_a + _b`\n                uint256 x = roundDiv(n, d); // we can now safely compute `_scale - x`\n                uint256 y = _scale - x;\n                return (x, y);\n            }\n            if (n < _b - (_b - _a) / 2) {\n                return (0, _scale); // `_a * _scale < (_a + _b) / 2 < MAX_UINT256 < _a + _b`\n            }\n            return (1, _scale - 1); // `(_a + _b) / 2 < _a * _scale < MAX_UINT256 < _a + _b`\n        }\n        return (_scale / 2, _scale / 2); // allow reduction to `(1, 1)` in the calling function\n    }\n\n    /**\n     * @dev computes the nearest integer to a given quotient without overflowing or underflowing.\n     */\n    function roundDiv(uint256 _n, uint256 _d) internal pure returns (uint256) {\n        return _n / _d + (_n % _d) / (_d - _d / 2);\n    }\n\n    /**\n     * @dev returns the average number of decimal digits in a given list of positive integers\n     *\n     * @param _values  list of positive integers\n     *\n     * @return the average number of decimal digits in the given list of positive integers\n     */\n    function geometricMean(uint256[] memory _values) internal pure returns (uint256) {\n        uint256 numOfDigits = 0;\n        uint256 length = _values.length;\n        for (uint256 i = 0; i < length; i++) {\n            numOfDigits += decimalLength(_values[i]);\n        }\n        return uint256(10)**(roundDivUnsafe(numOfDigits, length) - 1);\n    }\n\n    /**\n     * @dev returns the number of decimal digits in a given positive integer\n     *\n     * @param _x   positive integer\n     *\n     * @return the number of decimal digits in the given positive integer\n     */\n    function decimalLength(uint256 _x) internal pure returns (uint256) {\n        uint256 y = 0;\n        for (uint256 x = _x; x > 0; x /= 10) {\n            y++;\n        }\n        return y;\n    }\n\n    /**\n     * @dev returns the nearest integer to a given quotient\n     * the computation is overflow-safe assuming that the input is sufficiently small\n     *\n     * @param _n   quotient numerator\n     * @param _d   quotient denominator\n     *\n     * @return the nearest integer to the given quotient\n     */\n    function roundDivUnsafe(uint256 _n, uint256 _d) internal pure returns (uint256) {\n        return (_n + _d / 2) / _d;\n    }\n\n    /**\n     * @dev returns the larger of two values\n     *\n     * @param _val1 the first value\n     * @param _val2 the second value\n     */\n    function max(uint256 _val1, uint256 _val2) internal pure returns (uint256) {\n        return _val1 > _val2 ? _val1 : _val2;\n    }\n}\n\n// File: solidity/contracts/utility/Owned.sol\n\n\npragma solidity 0.6.12;\n\n\n/**\n * @dev This contract provides support and utilities for contract ownership.\n */\ncontract Owned is IOwned {\n    address public override owner;\n    address public newOwner;\n\n    /**\n     * @dev triggered when the owner is updated\n     *\n     * @param _prevOwner previous owner\n     * @param _newOwner  new owner\n     */\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n\n    /**\n     * @dev initializes a new Owned instance\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        _ownerOnly();\n        _;\n    }\n\n    // error message binary size optimization\n    function _ownerOnly() internal view {\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\n    }\n\n    /**\n     * @dev allows transferring the contract ownership\n     * the new owner still needs to accept the transfer\n     * can only be called by the contract owner\n     *\n     * @param _newOwner    new contract owner\n     */\n    function transferOwnership(address _newOwner) public override ownerOnly {\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\n        newOwner = _newOwner;\n    }\n\n    /**\n     * @dev used by a new owner to accept an ownership transfer\n     */\n    function acceptOwnership() public override {\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// File: solidity/contracts/utility/Utils.sol\n\n\npragma solidity 0.6.12;\n\n\n/**\n * @dev Utilities & Common Modifiers\n */\ncontract Utils {\n    uint32 internal constant PPM_RESOLUTION = 1000000;\n    IERC20 internal constant NATIVE_TOKEN_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    // verifies that a value is greater than zero\n    modifier greaterThanZero(uint256 _value) {\n        _greaterThanZero(_value);\n        _;\n    }\n\n    // error message binary size optimization\n    function _greaterThanZero(uint256 _value) internal pure {\n        require(_value > 0, \"ERR_ZERO_VALUE\");\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        _validAddress(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validAddress(address _address) internal pure {\n        require(_address != address(0), \"ERR_INVALID_ADDRESS\");\n    }\n\n    // ensures that the portion is valid\n    modifier validPortion(uint32 _portion) {\n        _validPortion(_portion);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validPortion(uint32 _portion) internal pure {\n        require(_portion > 0 && _portion <= PPM_RESOLUTION, \"ERR_INVALID_PORTION\");\n    }\n\n    // validates an external address - currently only checks that it isn't null or this\n    modifier validExternalAddress(address _address) {\n        _validExternalAddress(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validExternalAddress(address _address) internal view {\n        require(_address != address(0) && _address != address(this), \"ERR_INVALID_EXTERNAL_ADDRESS\");\n    }\n\n    // ensures that the fee is valid\n    modifier validFee(uint32 fee) {\n        _validFee(fee);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validFee(uint32 fee) internal pure {\n        require(fee <= PPM_RESOLUTION, \"ERR_INVALID_FEE\");\n    }\n}\n\n// File: solidity/contracts/utility/interfaces/IContractRegistry.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Contract Registry interface\n*/\ninterface IContractRegistry {\n    function addressOf(bytes32 _contractName) external view returns (address);\n}\n\n// File: solidity/contracts/utility/ContractRegistryClient.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/**\n * @dev This is the base contract for ContractRegistry clients.\n */\ncontract ContractRegistryClient is Owned, Utils {\n    bytes32 internal constant CONTRACT_REGISTRY = \"ContractRegistry\";\n    bytes32 internal constant BANCOR_NETWORK = \"BancorNetwork\";\n    bytes32 internal constant BANCOR_FORMULA = \"BancorFormula\";\n    bytes32 internal constant CONVERTER_FACTORY = \"ConverterFactory\";\n    bytes32 internal constant CONVERSION_PATH_FINDER = \"ConversionPathFinder\";\n    bytes32 internal constant CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\n    bytes32 internal constant CONVERTER_REGISTRY = \"BancorConverterRegistry\";\n    bytes32 internal constant CONVERTER_REGISTRY_DATA = \"BancorConverterRegistryData\";\n    bytes32 internal constant BNT_TOKEN = \"BNTToken\";\n    bytes32 internal constant BANCOR_X = \"BancorX\";\n    bytes32 internal constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\n    bytes32 internal constant LIQUIDITY_PROTECTION = \"LiquidityProtection\";\n    bytes32 internal constant NETWORK_SETTINGS = \"NetworkSettings\";\n\n    IContractRegistry public registry; // address of the current contract-registry\n    IContractRegistry public prevRegistry; // address of the previous contract-registry\n    bool public onlyOwnerCanUpdateRegistry; // only an owner can update the contract-registry\n\n    /**\n     * @dev verifies that the caller is mapped to the given contract name\n     *\n     * @param _contractName    contract name\n     */\n    modifier only(bytes32 _contractName) {\n        _only(_contractName);\n        _;\n    }\n\n    // error message binary size optimization\n    function _only(bytes32 _contractName) internal view {\n        require(msg.sender == addressOf(_contractName), \"ERR_ACCESS_DENIED\");\n    }\n\n    /**\n     * @dev initializes a new ContractRegistryClient instance\n     *\n     * @param  _registry   address of a contract-registry contract\n     */\n    constructor(IContractRegistry _registry) internal validAddress(address(_registry)) {\n        registry = IContractRegistry(_registry);\n        prevRegistry = IContractRegistry(_registry);\n    }\n\n    /**\n     * @dev updates to the new contract-registry\n     */\n    function updateRegistry() public {\n        // verify that this function is permitted\n        require(msg.sender == owner || !onlyOwnerCanUpdateRegistry, \"ERR_ACCESS_DENIED\");\n\n        // get the new contract-registry\n        IContractRegistry newRegistry = IContractRegistry(addressOf(CONTRACT_REGISTRY));\n\n        // verify that the new contract-registry is different and not zero\n        require(newRegistry != registry && address(newRegistry) != address(0), \"ERR_INVALID_REGISTRY\");\n\n        // verify that the new contract-registry is pointing to a non-zero contract-registry\n        require(newRegistry.addressOf(CONTRACT_REGISTRY) != address(0), \"ERR_INVALID_REGISTRY\");\n\n        // save a backup of the current contract-registry before replacing it\n        prevRegistry = registry;\n\n        // replace the current contract-registry with the new contract-registry\n        registry = newRegistry;\n    }\n\n    /**\n     * @dev restores the previous contract-registry\n     */\n    function restoreRegistry() public ownerOnly {\n        // restore the previous contract-registry\n        registry = prevRegistry;\n    }\n\n    /**\n     * @dev restricts the permission to update the contract-registry\n     *\n     * @param _onlyOwnerCanUpdateRegistry  indicates whether or not permission is restricted to owner only\n     */\n    function restrictRegistryUpdate(bool _onlyOwnerCanUpdateRegistry) public ownerOnly {\n        // change the permission to update the contract-registry\n        onlyOwnerCanUpdateRegistry = _onlyOwnerCanUpdateRegistry;\n    }\n\n    /**\n     * @dev returns the address associated with the given contract name\n     *\n     * @param _contractName    contract name\n     *\n     * @return contract address\n     */\n    function addressOf(bytes32 _contractName) internal view returns (address) {\n        return registry.addressOf(_contractName);\n    }\n}\n\n// File: solidity/contracts/utility/ReentrancyGuard.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev This contract provides protection against calling a function\n * (directly or indirectly) from within itself.\n */\ncontract ReentrancyGuard {\n    uint256 private constant UNLOCKED = 1;\n    uint256 private constant LOCKED = 2;\n\n    // LOCKED while protected code is being executed, UNLOCKED otherwise\n    uint256 private state = UNLOCKED;\n\n    /**\n     * @dev ensures instantiation only by sub-contracts\n     */\n    constructor() internal {}\n\n    // protects a function against reentrancy attacks\n    modifier protected() {\n        _protected();\n        state = LOCKED;\n        _;\n        state = UNLOCKED;\n    }\n\n    // error message binary size optimization\n    function _protected() internal view {\n        require(state == UNLOCKED, \"ERR_REENTRANCY\");\n    }\n}\n\n// File: solidity/contracts/utility/Time.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Time implementing contract\n*/\ncontract Time {\n    /**\n     * @dev returns the current time\n     */\n    function time() internal view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n\n// File: solidity/contracts/converter/types/standard-pool/StandardPoolConverter.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @dev This contract is a specialized version of the converter, which is\n * optimized for a liquidity pool that has 2 reserves with 50%/50% weights.\n */\ncontract StandardPoolConverter is ConverterVersion, IConverter, ContractRegistryClient, ReentrancyGuard, Time {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using MathEx for *;\n\n    uint256 private constant MAX_UINT128 = 2**128 - 1;\n    uint256 private constant MAX_UINT112 = 2**112 - 1;\n    uint256 private constant MAX_UINT32 = 2**32 - 1;\n    uint256 private constant AVERAGE_RATE_PERIOD = 10 minutes;\n\n    uint256 private __reserveBalances;\n    uint256 private _reserveBalancesProduct;\n    IERC20[] private __reserveTokens;\n    mapping(IERC20 => uint256) private __reserveIds;\n\n    IConverterAnchor public override anchor; // converter anchor contract\n    uint32 public override maxConversionFee; // maximum conversion fee, represented in ppm, 0...1000000\n    uint32 public override conversionFee; // current conversion fee, represented in ppm, 0...maxConversionFee\n\n    // average rate details:\n    // bits 0...111 represent the numerator of the rate between reserve token 0 and reserve token 1\n    // bits 111...223 represent the denominator of the rate between reserve token 0 and reserve token 1\n    // bits 224...255 represent the update-time of the rate between reserve token 0 and reserve token 1\n    // where `numerator / denominator` gives the worth of one reserve token 0 in units of reserve token 1\n    uint256 public averageRateInfo;\n\n    /**\n     * @dev triggered after liquidity is added\n     *\n     * @param  _provider       liquidity provider\n     * @param  _reserveToken   reserve token address\n     * @param  _amount         reserve token amount\n     * @param  _newBalance     reserve token new balance\n     * @param  _newSupply      pool token new supply\n     */\n    event LiquidityAdded(\n        address indexed _provider,\n        IERC20 indexed _reserveToken,\n        uint256 _amount,\n        uint256 _newBalance,\n        uint256 _newSupply\n    );\n\n    /**\n     * @dev triggered after liquidity is removed\n     *\n     * @param  _provider       liquidity provider\n     * @param  _reserveToken   reserve token address\n     * @param  _amount         reserve token amount\n     * @param  _newBalance     reserve token new balance\n     * @param  _newSupply      pool token new supply\n     */\n    event LiquidityRemoved(\n        address indexed _provider,\n        IERC20 indexed _reserveToken,\n        uint256 _amount,\n        uint256 _newBalance,\n        uint256 _newSupply\n    );\n\n    /**\n     * @dev initializes a new StandardPoolConverter instance\n     *\n     * @param  _anchor             anchor governed by the converter\n     * @param  _registry           address of a contract registry contract\n     * @param  _maxConversionFee   maximum conversion fee, represented in ppm\n     */\n    constructor(\n        IConverterAnchor _anchor,\n        IContractRegistry _registry,\n        uint32 _maxConversionFee\n    ) public ContractRegistryClient(_registry) validAddress(address(_anchor)) validConversionFee(_maxConversionFee) {\n        anchor = _anchor;\n        maxConversionFee = _maxConversionFee;\n    }\n\n    // ensures that the converter is active\n    modifier active() {\n        _active();\n        _;\n    }\n\n    // error message binary size optimization\n    function _active() internal view {\n        require(isActive(), \"ERR_INACTIVE\");\n    }\n\n    // ensures that the converter is not active\n    modifier inactive() {\n        _inactive();\n        _;\n    }\n\n    // error message binary size optimization\n    function _inactive() internal view {\n        require(!isActive(), \"ERR_ACTIVE\");\n    }\n\n    // validates a reserve token address - verifies that the address belongs to one of the reserve tokens\n    modifier validReserve(IERC20 _address) {\n        _validReserve(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validReserve(IERC20 _address) internal view {\n        require(__reserveIds[_address] != 0, \"ERR_INVALID_RESERVE\");\n    }\n\n    // validates conversion fee\n    modifier validConversionFee(uint32 _conversionFee) {\n        _validConversionFee(_conversionFee);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validConversionFee(uint32 _conversionFee) internal pure {\n        require(_conversionFee <= PPM_RESOLUTION, \"ERR_INVALID_CONVERSION_FEE\");\n    }\n\n    // validates reserve weight\n    modifier validReserveWeight(uint32 _weight) {\n        _validReserveWeight(_weight);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validReserveWeight(uint32 _weight) internal pure {\n        require(_weight == PPM_RESOLUTION / 2, \"ERR_INVALID_RESERVE_WEIGHT\");\n    }\n\n    /**\n     * @dev returns the converter type\n     *\n     * @return see the converter types in the the main contract doc\n     */\n    function converterType() public pure virtual override returns (uint16) {\n        return 3;\n    }\n\n    /**\n     * @dev deposits ether\n     * can only be called if the converter has an ETH reserve\n     */\n    receive() external payable override(IConverter) validReserve(NATIVE_TOKEN_ADDRESS) {}\n\n    /**\n     * @dev checks whether or not the converter version is 28 or higher\n     *\n     * @return true, since the converter version is 28 or higher\n     */\n    function isV28OrHigher() public pure returns (bool) {\n        return true;\n    }\n\n    /**\n     * @dev returns true if the converter is active, false otherwise\n     *\n     * @return true if the converter is active, false otherwise\n     */\n    function isActive() public view virtual override returns (bool) {\n        return anchor.owner() == address(this);\n    }\n\n    /**\n     * @dev transfers the anchor ownership\n     * the new owner needs to accept the transfer\n     * can only be called by the converter upgrader while the upgrader is the owner\n     * note that prior to version 28, you should use 'transferAnchorOwnership' instead\n     *\n     * @param _newOwner    new token owner\n     */\n    function transferAnchorOwnership(address _newOwner) public override ownerOnly only(CONVERTER_UPGRADER) {\n        anchor.transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev accepts ownership of the anchor after an ownership transfer\n     * most converters are also activated as soon as they accept the anchor ownership\n     * can only be called by the contract owner\n     * note that prior to version 28, you should use 'acceptTokenOwnership' instead\n     */\n    function acceptAnchorOwnership() public virtual override ownerOnly {\n        // verify the the converter has exactly two reserves\n        require(reserveTokenCount() == 2, \"ERR_INVALID_RESERVE_COUNT\");\n        anchor.acceptOwnership();\n        syncReserveBalances(0);\n        emit Activation(converterType(), anchor, true);\n    }\n\n    /**\n     * @dev updates the current conversion fee\n     * can only be called by the contract owner\n     *\n     * @param _conversionFee new conversion fee, represented in ppm\n     */\n    function setConversionFee(uint32 _conversionFee) public override ownerOnly {\n        require(_conversionFee <= maxConversionFee, \"ERR_INVALID_CONVERSION_FEE\");\n        emit ConversionFeeUpdate(conversionFee, _conversionFee);\n        conversionFee = _conversionFee;\n    }\n\n    /**\n     * @dev transfers reserve balances to a new converter during an upgrade\n     * can only be called by the converter upgraded which should be set at its owner\n     *\n     * @param _newConverter address of the converter to receive the new amount\n     */\n    function transferReservesOnUpgrade(address _newConverter)\n        external\n        override\n        protected\n        ownerOnly\n        only(CONVERTER_UPGRADER)\n    {\n        uint256 reserveCount = __reserveTokens.length;\n        for (uint256 i = 0; i < reserveCount; ++i) {\n            IERC20 reserveToken = __reserveTokens[i];\n\n            uint256 amount;\n            if (reserveToken == NATIVE_TOKEN_ADDRESS) {\n                amount = address(this).balance;\n            } else {\n                amount = reserveToken.balanceOf(address(this));\n            }\n\n            safeTransfer(reserveToken, _newConverter, amount);\n\n            syncReserveBalance(reserveToken);\n        }\n    }\n\n    /**\n     * @dev upgrades the converter to the latest version\n     * can only be called by the owner\n     * note that the owner needs to call acceptOwnership on the new converter after the upgrade\n     */\n    function upgrade() public ownerOnly {\n        IConverterUpgrader converterUpgrader = IConverterUpgrader(addressOf(CONVERTER_UPGRADER));\n\n        // trigger de-activation event\n        emit Activation(converterType(), anchor, false);\n\n        transferOwnership(address(converterUpgrader));\n        converterUpgrader.upgrade(version);\n        acceptOwnership();\n    }\n\n    /**\n     * @dev executed by the upgrader at the end of the upgrade process to handle custom pool logic\n     */\n    function onUpgradeComplete()\n        external\n        override\n        protected\n        ownerOnly\n        only(CONVERTER_UPGRADER)\n    {\n        (uint256 reserveBalance0, uint256 reserveBalance1) = reserveBalances(1, 2);\n        _reserveBalancesProduct = reserveBalance0 * reserveBalance1;\n    }\n\n    /**\n     * @dev returns the number of reserve tokens\n     * note that prior to version 17, you should use 'connectorTokenCount' instead\n     *\n     * @return number of reserve tokens\n     */\n    function reserveTokenCount() public view returns (uint16) {\n        return uint16(__reserveTokens.length);\n    }\n\n    /**\n     * @dev returns the array of reserve tokens\n     *\n     * @return array of reserve tokens\n     */\n    function reserveTokens() public view returns (IERC20[] memory) {\n        return __reserveTokens;\n    }\n\n    /**\n     * @dev defines a new reserve token for the converter\n     * can only be called by the owner while the converter is inactive\n     *\n     * @param _token   address of the reserve token\n     * @param _weight  reserve weight, represented in ppm, 1-1000000\n     */\n    function addReserve(IERC20 _token, uint32 _weight)\n        public\n        virtual\n        override\n        ownerOnly\n        inactive\n        validExternalAddress(address(_token))\n        validReserveWeight(_weight)\n    {\n        // validate input\n        require(address(_token) != address(anchor) && __reserveIds[_token] == 0, \"ERR_INVALID_RESERVE\");\n        require(reserveTokenCount() < 2, \"ERR_INVALID_RESERVE_COUNT\");\n\n        __reserveTokens.push(_token);\n        __reserveIds[_token] = __reserveTokens.length;\n    }\n\n    /**\n     * @dev returns the reserve's weight\n     * added in version 28\n     *\n     * @param _reserveToken    reserve token contract address\n     *\n     * @return reserve weight\n     */\n    function reserveWeight(IERC20 _reserveToken) public view validReserve(_reserveToken) returns (uint32) {\n        return PPM_RESOLUTION / 2;\n    }\n\n    /**\n     * @dev returns the balance of a given reserve token\n     *\n     * @param _reserveToken    reserve token contract address\n     *\n     * @return the balance of the given reserve token\n     */\n    function reserveBalance(IERC20 _reserveToken) public view override returns (uint256) {\n        uint256 reserveId = __reserveIds[_reserveToken];\n        require(reserveId != 0, \"ERR_INVALID_RESERVE\");\n        return reserveBalance(reserveId);\n    }\n\n    /**\n     * @dev returns the balances of both reserve tokens\n     *\n     * @return the balances of both reserve tokens\n     */\n    function reserveBalances() public view returns (uint256, uint256) {\n        return reserveBalances(1, 2);\n    }\n\n    /**\n     * @dev syncs all stored reserve balances\n     */\n    function syncReserveBalances() external {\n        syncReserveBalances(0);\n    }\n\n    /**\n     * @dev calculates the accumulated network fee and transfers it to the network fee wallet\n     */\n    function processNetworkFees() external protected {\n        (uint256 reserveBalance0, uint256 reserveBalance1) = processNetworkFees(0);\n        _reserveBalancesProduct = reserveBalance0 * reserveBalance1;\n    }\n\n    /**\n     * @dev calculates the accumulated network fee and transfers it to the network fee wallet\n     *\n     * @param _value amount of ether to exclude from the ether reserve balance (if relevant)\n     *\n     * @return new reserve balances\n     */\n    function processNetworkFees(uint256 _value) internal returns (uint256, uint256) {\n        syncReserveBalances(_value);\n        (uint256 reserveBalance0, uint256 reserveBalance1) = reserveBalances(1, 2);\n        (ITokenHolder wallet, uint256 fee0, uint256 fee1) = networkWalletAndFees(reserveBalance0, reserveBalance1);\n        reserveBalance0 -= fee0;\n        reserveBalance1 -= fee1;\n        setReserveBalances(1, 2, reserveBalance0, reserveBalance1);\n        safeTransfer(__reserveTokens[0], address(wallet), fee0);\n        safeTransfer(__reserveTokens[1], address(wallet), fee1);\n        return (reserveBalance0, reserveBalance1);\n    }\n\n    /**\n     * @dev returns the reserve balances of the given reserve tokens minus their corresponding fees\n     *\n     * @param _reserveTokens reserve tokens\n     *\n     * @return reserve balances minus their corresponding fees\n     */\n    function baseReserveBalances(IERC20[] memory _reserveTokens) internal view returns (uint256[2] memory) {\n        uint256 reserveId0 = __reserveIds[_reserveTokens[0]];\n        uint256 reserveId1 = __reserveIds[_reserveTokens[1]];\n        (uint256 reserveBalance0, uint256 reserveBalance1) = reserveBalances(reserveId0, reserveId1);\n        (, uint256 fee0, uint256 fee1) = networkWalletAndFees(reserveBalance0, reserveBalance1);\n        return [reserveBalance0 - fee0, reserveBalance1 - fee1];\n    }\n\n    /**\n     * @dev converts a specific amount of source tokens to target tokens\n     * can only be called by the bancor network contract\n     *\n     * @param _sourceToken source ERC20 token\n     * @param _targetToken target ERC20 token\n     * @param _amount      amount of tokens to convert (in units of the source token)\n     * @param _trader      address of the caller who executed the conversion\n     * @param _beneficiary wallet to receive the conversion result\n     *\n     * @return amount of tokens received (in units of the target token)\n     */\n    function convert(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount,\n        address _trader,\n        address payable _beneficiary\n    ) public payable override protected only(BANCOR_NETWORK) returns (uint256) {\n        // validate input\n        require(_sourceToken != _targetToken, \"ERR_SAME_SOURCE_TARGET\");\n\n        return doConvert(_sourceToken, _targetToken, _amount, _trader, _beneficiary);\n    }\n\n    /**\n     * @dev returns the conversion fee for a given target amount\n     *\n     * @param _targetAmount  target amount\n     *\n     * @return conversion fee\n     */\n    function calculateFee(uint256 _targetAmount) internal view returns (uint256) {\n        return _targetAmount.mul(conversionFee) / PPM_RESOLUTION;\n    }\n\n    /**\n     * @dev returns the conversion fee taken from a given target amount\n     *\n     * @param _targetAmount  target amount\n     *\n     * @return conversion fee\n     */\n    function calculateFeeInv(uint256 _targetAmount) internal view returns (uint256) {\n        return _targetAmount.mul(conversionFee).div(PPM_RESOLUTION - conversionFee);\n    }\n\n    /**\n     * @dev loads the stored reserve balance for a given reserve id\n     *\n     * @param _reserveId   reserve id\n     */\n    function reserveBalance(uint256 _reserveId) internal view returns (uint256) {\n        return decodeReserveBalance(__reserveBalances, _reserveId);\n    }\n\n    /**\n     * @dev loads the stored reserve balances\n     *\n     * @param _sourceId    source reserve id\n     * @param _targetId    target reserve id\n     */\n    function reserveBalances(uint256 _sourceId, uint256 _targetId) internal view returns (uint256, uint256) {\n        require((_sourceId == 1 && _targetId == 2) || (_sourceId == 2 && _targetId == 1), \"ERR_INVALID_RESERVES\");\n        return decodeReserveBalances(__reserveBalances, _sourceId, _targetId);\n    }\n\n    /**\n     * @dev stores the stored reserve balance for a given reserve id\n     *\n     * @param _reserveId       reserve id\n     * @param _reserveBalance  reserve balance\n     */\n    function setReserveBalance(uint256 _reserveId, uint256 _reserveBalance) internal {\n        require(_reserveBalance <= MAX_UINT128, \"ERR_RESERVE_BALANCE_OVERFLOW\");\n        uint256 otherBalance = decodeReserveBalance(__reserveBalances, 3 - _reserveId);\n        __reserveBalances = encodeReserveBalances(_reserveBalance, _reserveId, otherBalance, 3 - _reserveId);\n    }\n\n    /**\n     * @dev stores the stored reserve balances\n     *\n     * @param _sourceId        source reserve id\n     * @param _targetId        target reserve id\n     * @param _sourceBalance   source reserve balance\n     * @param _targetBalance   target reserve balance\n     */\n    function setReserveBalances(\n        uint256 _sourceId,\n        uint256 _targetId,\n        uint256 _sourceBalance,\n        uint256 _targetBalance\n    ) internal {\n        require(_sourceBalance <= MAX_UINT128 && _targetBalance <= MAX_UINT128, \"ERR_RESERVE_BALANCE_OVERFLOW\");\n        __reserveBalances = encodeReserveBalances(_sourceBalance, _sourceId, _targetBalance, _targetId);\n    }\n\n    /**\n     * @dev syncs the stored reserve balance for a given reserve with the real reserve balance\n     *\n     * @param _reserveToken    address of the reserve token\n     */\n    function syncReserveBalance(IERC20 _reserveToken) internal {\n        uint256 reserveId = __reserveIds[_reserveToken];\n        uint256 balance =\n            _reserveToken == NATIVE_TOKEN_ADDRESS ? address(this).balance : _reserveToken.balanceOf(address(this));\n        setReserveBalance(reserveId, balance);\n    }\n\n    /**\n     * @dev syncs all stored reserve balances, excluding a given amount of ether from the ether reserve balance (if relevant)\n     *\n     * @param _value   amount of ether to exclude from the ether reserve balance (if relevant)\n     */\n    function syncReserveBalances(uint256 _value) internal {\n        IERC20 _reserveToken0 = __reserveTokens[0];\n        IERC20 _reserveToken1 = __reserveTokens[1];\n        uint256 balance0 =\n            _reserveToken0 == NATIVE_TOKEN_ADDRESS\n                ? address(this).balance - _value\n                : _reserveToken0.balanceOf(address(this));\n        uint256 balance1 =\n            _reserveToken1 == NATIVE_TOKEN_ADDRESS\n                ? address(this).balance - _value\n                : _reserveToken1.balanceOf(address(this));\n        setReserveBalances(1, 2, balance0, balance1);\n    }\n\n    /**\n     * @dev helper, dispatches the Conversion event\n     *\n     * @param _sourceToken     source ERC20 token\n     * @param _targetToken     target ERC20 token\n     * @param _trader          address of the caller who executed the conversion\n     * @param _amount          amount purchased/sold (in the source token)\n     * @param _returnAmount    amount returned (in the target token)\n     */\n    function dispatchConversionEvent(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        address _trader,\n        uint256 _amount,\n        uint256 _returnAmount,\n        uint256 _feeAmount\n    ) internal {\n        emit Conversion(_sourceToken, _targetToken, _trader, _amount, _returnAmount, int256(_feeAmount));\n    }\n\n    /**\n     * @dev returns the expected amount and expected fee for converting one reserve to another\n     *\n     * @param _sourceToken address of the source reserve token contract\n     * @param _targetToken address of the target reserve token contract\n     * @param _amount      amount of source reserve tokens converted\n     *\n     * @return expected amount in units of the target reserve token\n     * @return expected fee in units of the target reserve token\n     */\n    function targetAmountAndFee(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount\n    ) public view virtual override active returns (uint256, uint256) {\n        uint256 sourceId = __reserveIds[_sourceToken];\n        uint256 targetId = __reserveIds[_targetToken];\n\n        (uint256 sourceBalance, uint256 targetBalance) = reserveBalances(sourceId, targetId);\n\n        return targetAmountAndFee(_sourceToken, _targetToken, sourceBalance, targetBalance, _amount);\n    }\n\n    /**\n     * @dev returns the expected amount and expected fee for converting one reserve to another\n     *\n     * @param _sourceBalance    balance in the source reserve token contract\n     * @param _targetBalance    balance in the target reserve token contract\n     * @param _amount           amount of source reserve tokens converted\n     *\n     * @return expected amount in units of the target reserve token\n     * @return expected fee in units of the target reserve token\n     */\n    function targetAmountAndFee(\n        IERC20, /* _sourceToken */\n        IERC20, /* _targetToken */\n        uint256 _sourceBalance,\n        uint256 _targetBalance,\n        uint256 _amount\n    ) internal view virtual returns (uint256, uint256) {\n        uint256 amount = crossReserveTargetAmount(_sourceBalance, _targetBalance, _amount);\n\n        uint256 fee = calculateFee(amount);\n\n        return (amount - fee, fee);\n    }\n\n    /**\n     * @dev returns the required amount and expected fee for converting one reserve to another\n     *\n     * @param _sourceToken address of the source reserve token contract\n     * @param _targetToken address of the target reserve token contract\n     * @param _amount      amount of target reserve tokens desired\n     *\n     * @return required amount in units of the source reserve token\n     * @return expected fee in units of the target reserve token\n     */\n    function sourceAmountAndFee(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount\n    ) public view virtual active returns (uint256, uint256) {\n        uint256 sourceId = __reserveIds[_sourceToken];\n        uint256 targetId = __reserveIds[_targetToken];\n\n        (uint256 sourceBalance, uint256 targetBalance) = reserveBalances(sourceId, targetId);\n\n        uint256 fee = calculateFeeInv(_amount);\n\n        uint256 amount = crossReserveSourceAmount(sourceBalance, targetBalance, _amount.add(fee));\n\n        return (amount, fee);\n    }\n\n    /**\n     * @dev converts a specific amount of source tokens to target tokens\n     *\n     * @param _sourceToken source ERC20 token\n     * @param _targetToken target ERC20 token\n     * @param _amount      amount of tokens to convert (in units of the source token)\n     * @param _trader      address of the caller who executed the conversion\n     * @param _beneficiary wallet to receive the conversion result\n     *\n     * @return amount of tokens received (in units of the target token)\n     */\n    function doConvert(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount,\n        address _trader,\n        address payable _beneficiary\n    ) internal returns (uint256) {\n        // update the recent average rate\n        updateRecentAverageRate();\n\n        uint256 sourceId = __reserveIds[_sourceToken];\n        uint256 targetId = __reserveIds[_targetToken];\n\n        (uint256 sourceBalance, uint256 targetBalance) = reserveBalances(sourceId, targetId);\n\n        // get the target amount minus the conversion fee and the conversion fee\n        (uint256 amount, uint256 fee) =\n            targetAmountAndFee(_sourceToken, _targetToken, sourceBalance, targetBalance, _amount);\n\n        // ensure that the trade gives something in return\n        require(amount != 0, \"ERR_ZERO_TARGET_AMOUNT\");\n\n        // ensure that the trade won't deplete the reserve balance\n        assert(amount < targetBalance);\n\n        // ensure that the input amount was already deposited\n        uint256 actualSourceBalance;\n        if (_sourceToken == NATIVE_TOKEN_ADDRESS) {\n            actualSourceBalance = address(this).balance;\n            require(msg.value == _amount, \"ERR_ETH_AMOUNT_MISMATCH\");\n        } else {\n            actualSourceBalance = _sourceToken.balanceOf(address(this));\n            require(msg.value == 0 && actualSourceBalance.sub(sourceBalance) >= _amount, \"ERR_INVALID_AMOUNT\");\n        }\n\n        // sync the reserve balances\n        setReserveBalances(sourceId, targetId, actualSourceBalance, targetBalance - amount);\n\n        // transfer funds to the beneficiary in the to reserve token\n        safeTransfer(_targetToken, _beneficiary, amount);\n\n        // dispatch the conversion event\n        dispatchConversionEvent(_sourceToken, _targetToken, _trader, _amount, amount, fee);\n\n        // dispatch rate updates\n        dispatchTokenRateUpdateEvents(_sourceToken, _targetToken, actualSourceBalance, targetBalance - amount);\n\n        return amount;\n    }\n\n    /**\n     * @dev returns the recent average rate of 1 `_token` in the other reserve token units\n     *\n     * @param _token   token to get the rate for\n     *\n     * @return recent average rate between the reserves (numerator)\n     * @return recent average rate between the reserves (denominator)\n     */\n    function recentAverageRate(IERC20 _token) external view validReserve(_token) returns (uint256, uint256) {\n        // get the recent average rate of reserve 0\n        uint256 rate = calcRecentAverageRate(averageRateInfo);\n\n        uint256 rateN = decodeAverageRateN(rate);\n        uint256 rateD = decodeAverageRateD(rate);\n\n        if (_token == __reserveTokens[0]) {\n            return (rateN, rateD);\n        }\n\n        return (rateD, rateN);\n    }\n\n    /**\n     * @dev updates the recent average rate if needed\n     */\n    function updateRecentAverageRate() internal {\n        uint256 averageRateInfo1 = averageRateInfo;\n        uint256 averageRateInfo2 = calcRecentAverageRate(averageRateInfo1);\n        if (averageRateInfo1 != averageRateInfo2) {\n            averageRateInfo = averageRateInfo2;\n        }\n    }\n\n    /**\n     * @dev returns the recent average rate of 1 reserve token 0 in reserve token 1 units\n     *\n     * @param _averageRateInfo a local copy of the `averageRateInfo` state-variable\n     *\n     * @return recent average rate between the reserves\n     */\n    function calcRecentAverageRate(uint256 _averageRateInfo) internal view returns (uint256) {\n        // get the previous average rate and its update-time\n        uint256 prevAverageRateT = decodeAverageRateT(_averageRateInfo);\n        uint256 prevAverageRateN = decodeAverageRateN(_averageRateInfo);\n        uint256 prevAverageRateD = decodeAverageRateD(_averageRateInfo);\n\n        // get the elapsed time since the previous average rate was calculated\n        uint256 currentTime = time();\n        uint256 timeElapsed = currentTime - prevAverageRateT;\n\n        // if the previous average rate was calculated in the current block, the average rate remains unchanged\n        if (timeElapsed == 0) {\n            return _averageRateInfo;\n        }\n\n        // get the current rate between the reserves\n        (uint256 currentRateD, uint256 currentRateN) = reserveBalances();\n\n        // if the previous average rate was calculated a while ago or never, the average rate is equal to the current rate\n        if (timeElapsed >= AVERAGE_RATE_PERIOD || prevAverageRateT == 0) {\n            (currentRateN, currentRateD) = MathEx.reducedRatio(currentRateN, currentRateD, MAX_UINT112);\n            return encodeAverageRateInfo(currentTime, currentRateN, currentRateD);\n        }\n\n        uint256 x = prevAverageRateD.mul(currentRateN);\n        uint256 y = prevAverageRateN.mul(currentRateD);\n\n        // since we know that timeElapsed < AVERAGE_RATE_PERIOD, we can avoid using SafeMath:\n        uint256 newRateN = y.mul(AVERAGE_RATE_PERIOD - timeElapsed).add(x.mul(timeElapsed));\n        uint256 newRateD = prevAverageRateD.mul(currentRateD).mul(AVERAGE_RATE_PERIOD);\n\n        (newRateN, newRateD) = MathEx.reducedRatio(newRateN, newRateD, MAX_UINT112);\n        return encodeAverageRateInfo(currentTime, newRateN, newRateD);\n    }\n\n    /**\n     * @dev increases the pool's liquidity and mints new shares in the pool to the caller\n     *\n     * @param _reserveTokens   address of each reserve token\n     * @param _reserveAmounts  amount of each reserve token\n     * @param _minReturn       token minimum return-amount\n     *\n     * @return amount of pool tokens issued\n     */\n    function addLiquidity(\n        IERC20[] memory _reserveTokens,\n        uint256[] memory _reserveAmounts,\n        uint256 _minReturn\n    ) public payable protected active returns (uint256) {\n        // verify the user input\n        verifyLiquidityInput(_reserveTokens, _reserveAmounts, _minReturn);\n\n        // if one of the reserves is ETH, then verify that the input amount of ETH is equal to the input value of ETH\n        for (uint256 i = 0; i < 2; i++) {\n            if (_reserveTokens[i] == NATIVE_TOKEN_ADDRESS) {\n                require(_reserveAmounts[i] == msg.value, \"ERR_ETH_AMOUNT_MISMATCH\");\n            }\n        }\n\n        // if the input value of ETH is larger than zero, then verify that one of the reserves is ETH\n        if (msg.value > 0) {\n            require(__reserveIds[NATIVE_TOKEN_ADDRESS] != 0, \"ERR_NO_ETH_RESERVE\");\n        }\n\n        // save a local copy of the pool token\n        IDSToken poolToken = IDSToken(address(anchor));\n\n        // get the total supply\n        uint256 totalSupply = poolToken.totalSupply();\n\n        uint256[2] memory prevReserveBalances;\n        uint256[2] memory newReserveBalances;\n\n        // process the network fees and get the reserve balances\n        (prevReserveBalances[0], prevReserveBalances[1]) = processNetworkFees(msg.value);\n\n        uint256 amount;\n        uint256[2] memory reserveAmounts;\n\n        // calculate the amount of pool tokens to mint for the caller\n        // and the amount of reserve tokens to transfer from the caller\n        if (totalSupply == 0) {\n            amount = MathEx.geometricMean(_reserveAmounts);\n            reserveAmounts[0] = _reserveAmounts[0];\n            reserveAmounts[1] = _reserveAmounts[1];\n        } else {\n            (amount, reserveAmounts) = addLiquidityAmounts(\n                _reserveTokens,\n                _reserveAmounts,\n                prevReserveBalances,\n                totalSupply\n            );\n        }\n\n        uint256 newPoolTokenSupply = totalSupply.add(amount);\n        for (uint256 i = 0; i < 2; i++) {\n            IERC20 reserveToken = _reserveTokens[i];\n            uint256 reserveAmount = reserveAmounts[i];\n            require(reserveAmount > 0, \"ERR_ZERO_TARGET_AMOUNT\");\n            assert(reserveAmount <= _reserveAmounts[i]);\n\n            // transfer each one of the reserve amounts from the user to the pool\n            if (reserveToken != NATIVE_TOKEN_ADDRESS) {\n                // ETH has already been transferred as part of the transaction\n                reserveToken.safeTransferFrom(msg.sender, address(this), reserveAmount);\n            } else if (_reserveAmounts[i] > reserveAmount) {\n                // transfer the extra amount of ETH back to the user\n                msg.sender.transfer(_reserveAmounts[i] - reserveAmount);\n            }\n\n            // save the new reserve balance\n            newReserveBalances[i] = prevReserveBalances[i].add(reserveAmount);\n\n            emit LiquidityAdded(msg.sender, reserveToken, reserveAmount, newReserveBalances[i], newPoolTokenSupply);\n\n            // dispatch the `TokenRateUpdate` event for the pool token\n            emit TokenRateUpdate(poolToken, reserveToken, newReserveBalances[i], newPoolTokenSupply);\n        }\n\n        // set the reserve balances\n        setReserveBalances(1, 2, newReserveBalances[0], newReserveBalances[1]);\n\n        // set the reserve balances product\n        _reserveBalancesProduct = newReserveBalances[0] * newReserveBalances[1];\n\n        // verify that the equivalent amount of tokens is equal to or larger than the user's expectation\n        require(amount >= _minReturn, \"ERR_RETURN_TOO_LOW\");\n\n        // issue the tokens to the user\n        poolToken.issue(msg.sender, amount);\n\n        // return the amount of pool tokens issued\n        return amount;\n    }\n\n    /**\n     * @dev get the amount of pool tokens to mint for the caller\n     * and the amount of reserve tokens to transfer from the caller\n     *\n     * @param _reserveAmounts   amount of each reserve token\n     * @param _reserveBalances  balance of each reserve token\n     * @param _totalSupply      total supply of pool tokens\n     *\n     * @return amount of pool tokens to mint for the caller\n     * @return amount of reserve tokens to transfer from the caller\n     */\n    function addLiquidityAmounts(\n        IERC20[] memory, /* _reserveTokens */\n        uint256[] memory _reserveAmounts,\n        uint256[2] memory _reserveBalances,\n        uint256 _totalSupply\n    ) internal view virtual returns (uint256, uint256[2] memory) {\n        this;\n\n        uint256 index =\n            _reserveAmounts[0].mul(_reserveBalances[1]) < _reserveAmounts[1].mul(_reserveBalances[0]) ? 0 : 1;\n        uint256 amount = fundSupplyAmount(_totalSupply, _reserveBalances[index], _reserveAmounts[index]);\n\n        uint256[2] memory reserveAmounts =\n            [fundCost(_totalSupply, _reserveBalances[0], amount), fundCost(_totalSupply, _reserveBalances[1], amount)];\n\n        return (amount, reserveAmounts);\n    }\n\n    /**\n     * @dev decreases the pool's liquidity and burns the caller's shares in the pool\n     *\n     * @param _amount                  token amount\n     * @param _reserveTokens           address of each reserve token\n     * @param _reserveMinReturnAmounts minimum return-amount of each reserve token\n     *\n     * @return the amount of each reserve token granted for the given amount of pool tokens\n     */\n    function removeLiquidity(\n        uint256 _amount,\n        IERC20[] memory _reserveTokens,\n        uint256[] memory _reserveMinReturnAmounts\n    ) public protected active returns (uint256[] memory) {\n        // verify the user input\n        bool inputRearranged = verifyLiquidityInput(_reserveTokens, _reserveMinReturnAmounts, _amount);\n\n        // save a local copy of the pool token\n        IDSToken poolToken = IDSToken(address(anchor));\n\n        // get the total supply BEFORE destroying the user tokens\n        uint256 totalSupply = poolToken.totalSupply();\n\n        // destroy the user tokens\n        poolToken.destroy(msg.sender, _amount);\n\n        uint256 newPoolTokenSupply = totalSupply.sub(_amount);\n\n        uint256[2] memory prevReserveBalances;\n        uint256[2] memory newReserveBalances;\n\n        // process the network fees and get the reserve balances\n        (prevReserveBalances[0], prevReserveBalances[1]) = processNetworkFees(0);\n\n        uint256[] memory reserveAmounts = removeLiquidityReserveAmounts(_amount, totalSupply, prevReserveBalances);\n\n        for (uint256 i = 0; i < 2; i++) {\n            IERC20 reserveToken = _reserveTokens[i];\n            uint256 reserveAmount = reserveAmounts[i];\n            require(reserveAmount >= _reserveMinReturnAmounts[i], \"ERR_ZERO_TARGET_AMOUNT\");\n\n            // save the new reserve balance\n            newReserveBalances[i] = prevReserveBalances[i].sub(reserveAmount);\n\n            // transfer each one of the reserve amounts from the pool to the user\n            safeTransfer(reserveToken, msg.sender, reserveAmount);\n\n            emit LiquidityRemoved(msg.sender, reserveToken, reserveAmount, newReserveBalances[i], newPoolTokenSupply);\n\n            // dispatch the `TokenRateUpdate` event for the pool token\n            emit TokenRateUpdate(poolToken, reserveToken, newReserveBalances[i], newPoolTokenSupply);\n        }\n\n        // set the reserve balances\n        setReserveBalances(1, 2, newReserveBalances[0], newReserveBalances[1]);\n\n        // set the reserve balances product\n        _reserveBalancesProduct = newReserveBalances[0] * newReserveBalances[1];\n\n        if (inputRearranged) {\n            uint256 tempReserveAmount = reserveAmounts[0];\n            reserveAmounts[0] = reserveAmounts[1];\n            reserveAmounts[1] = tempReserveAmount;\n        }\n\n        // return the amount of each reserve token granted for the given amount of pool tokens\n        return reserveAmounts;\n    }\n\n    /**\n     * @dev given the amount of one of the reserve tokens to add liquidity of,\n     * returns the required amount of each one of the other reserve tokens\n     * since an empty pool can be funded with any list of non-zero input amounts,\n     * this function assumes that the pool is not empty (has already been funded)\n     *\n     * @param _reserveTokens       address of each reserve token\n     * @param _reserveTokenIndex   index of the relevant reserve token\n     * @param _reserveAmount       amount of the relevant reserve token\n     *\n     * @return the required amount of each one of the reserve tokens\n     */\n    function addLiquidityCost(\n        IERC20[] memory _reserveTokens,\n        uint256 _reserveTokenIndex,\n        uint256 _reserveAmount\n    ) public view returns (uint256[] memory) {\n        uint256 totalSupply = IDSToken(address(anchor)).totalSupply();\n        uint256[2] memory baseBalances = baseReserveBalances(_reserveTokens);\n        uint256 amount = fundSupplyAmount(totalSupply, baseBalances[_reserveTokenIndex], _reserveAmount);\n\n        uint256[] memory reserveAmounts = new uint256[](2);\n        reserveAmounts[0] = fundCost(totalSupply, baseBalances[0], amount);\n        reserveAmounts[1] = fundCost(totalSupply, baseBalances[1], amount);\n        return reserveAmounts;\n    }\n\n    /**\n     * @dev returns the amount of pool tokens entitled for given amounts of reserve tokens\n     * since an empty pool can be funded with any list of non-zero input amounts,\n     * this function assumes that the pool is not empty (has already been funded)\n     *\n     * @param _reserveTokens   address of each reserve token\n     * @param _reserveAmounts  amount of each reserve token\n     *\n     * @return the amount of pool tokens entitled for the given amounts of reserve tokens\n     */\n    function addLiquidityReturn(IERC20[] memory _reserveTokens, uint256[] memory _reserveAmounts)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 totalSupply = IDSToken(address(anchor)).totalSupply();\n        uint256[2] memory baseBalances = baseReserveBalances(_reserveTokens);\n        (uint256 amount, ) = addLiquidityAmounts(_reserveTokens, _reserveAmounts, baseBalances, totalSupply);\n        return amount;\n    }\n\n    /**\n     * @dev returns the amount of each reserve token entitled for a given amount of pool tokens\n     *\n     * @param _amount          amount of pool tokens\n     * @param _reserveTokens   address of each reserve token\n     *\n     * @return the amount of each reserve token entitled for the given amount of pool tokens\n     */\n    function removeLiquidityReturn(uint256 _amount, IERC20[] memory _reserveTokens)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256 totalSupply = IDSToken(address(anchor)).totalSupply();\n        uint256[2] memory baseBalances = baseReserveBalances(_reserveTokens);\n        return removeLiquidityReserveAmounts(_amount, totalSupply, baseBalances);\n    }\n\n    /**\n     * @dev verifies that a given array of tokens is identical to the converter's array of reserve tokens\n     * we take this input in order to allow specifying the corresponding reserve amounts in any order\n     * this function rearranges the input arrays according to the converter's array of reserve tokens\n     *\n     * @param _reserveTokens   array of reserve tokens\n     * @param _reserveAmounts  array of reserve amounts\n     * @param _amount          token amount\n     *\n     * @return true if the function has rearranged the input arrays; false otherwise\n     */\n    function verifyLiquidityInput(\n        IERC20[] memory _reserveTokens,\n        uint256[] memory _reserveAmounts,\n        uint256 _amount\n    ) private view returns (bool) {\n        require(validReserveAmounts(_reserveAmounts) && _amount > 0, \"ERR_ZERO_AMOUNT\");\n\n        uint256 reserve0Id = __reserveIds[_reserveTokens[0]];\n        uint256 reserve1Id = __reserveIds[_reserveTokens[1]];\n\n        if (reserve0Id == 2 && reserve1Id == 1) {\n            IERC20 tempReserveToken = _reserveTokens[0];\n            _reserveTokens[0] = _reserveTokens[1];\n            _reserveTokens[1] = tempReserveToken;\n            uint256 tempReserveAmount = _reserveAmounts[0];\n            _reserveAmounts[0] = _reserveAmounts[1];\n            _reserveAmounts[1] = tempReserveAmount;\n            return true;\n        }\n\n        require(reserve0Id == 1 && reserve1Id == 2, \"ERR_INVALID_RESERVE\");\n        return false;\n    }\n\n    /**\n     * @dev checks whether or not both reserve amounts are larger than zero\n     *\n     * @param _reserveAmounts  array of reserve amounts\n     *\n     * @return true if both reserve amounts are larger than zero; false otherwise\n     */\n    function validReserveAmounts(uint256[] memory _reserveAmounts) internal pure virtual returns (bool) {\n        return _reserveAmounts[0] > 0 && _reserveAmounts[1] > 0;\n    }\n\n    /**\n     * @dev returns the amount of each reserve token entitled for a given amount of pool tokens\n     *\n     * @param _amount          amount of pool tokens\n     * @param _totalSupply     total supply of pool tokens\n     * @param _reserveBalances balance of each reserve token\n     *\n     * @return the amount of each reserve token entitled for the given amount of pool tokens\n     */\n    function removeLiquidityReserveAmounts(\n        uint256 _amount,\n        uint256 _totalSupply,\n        uint256[2] memory _reserveBalances\n    ) private pure returns (uint256[] memory) {\n        uint256[] memory reserveAmounts = new uint256[](2);\n        reserveAmounts[0] = liquidateReserveAmount(_totalSupply, _reserveBalances[0], _amount);\n        reserveAmounts[1] = liquidateReserveAmount(_totalSupply, _reserveBalances[1], _amount);\n        return reserveAmounts;\n    }\n\n    /**\n     * @dev dispatches token rate update events for the reserve tokens and the pool token\n     *\n     * @param _sourceToken     address of the source reserve token\n     * @param _targetToken     address of the target reserve token\n     * @param _sourceBalance   balance of the source reserve token\n     * @param _targetBalance   balance of the target reserve token\n     */\n    function dispatchTokenRateUpdateEvents(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _sourceBalance,\n        uint256 _targetBalance\n    ) private {\n        // save a local copy of the pool token\n        IDSToken poolToken = IDSToken(address(anchor));\n\n        // get the total supply of pool tokens\n        uint256 poolTokenSupply = poolToken.totalSupply();\n\n        // dispatch token rate update event for the reserve tokens\n        emit TokenRateUpdate(_sourceToken, _targetToken, _targetBalance, _sourceBalance);\n\n        // dispatch token rate update events for the pool token\n        emit TokenRateUpdate(poolToken, _sourceToken, _sourceBalance, poolTokenSupply);\n        emit TokenRateUpdate(poolToken, _targetToken, _targetBalance, poolTokenSupply);\n    }\n\n    function encodeReserveBalance(uint256 _balance, uint256 _id) private pure returns (uint256) {\n        assert(_balance <= MAX_UINT128 && (_id == 1 || _id == 2));\n        return _balance << ((_id - 1) * 128);\n    }\n\n    function decodeReserveBalance(uint256 _balances, uint256 _id) private pure returns (uint256) {\n        assert(_id == 1 || _id == 2);\n        return (_balances >> ((_id - 1) * 128)) & MAX_UINT128;\n    }\n\n    function encodeReserveBalances(\n        uint256 _balance0,\n        uint256 _id0,\n        uint256 _balance1,\n        uint256 _id1\n    ) private pure returns (uint256) {\n        return encodeReserveBalance(_balance0, _id0) | encodeReserveBalance(_balance1, _id1);\n    }\n\n    function decodeReserveBalances(\n        uint256 _balances,\n        uint256 _id0,\n        uint256 _id1\n    ) private pure returns (uint256, uint256) {\n        return (decodeReserveBalance(_balances, _id0), decodeReserveBalance(_balances, _id1));\n    }\n\n    function encodeAverageRateInfo(\n        uint256 _averageRateT,\n        uint256 _averageRateN,\n        uint256 _averageRateD\n    ) private pure returns (uint256) {\n        assert(_averageRateT <= MAX_UINT32 && _averageRateN <= MAX_UINT112 && _averageRateD <= MAX_UINT112);\n        return (_averageRateT << 224) | (_averageRateN << 112) | _averageRateD;\n    }\n\n    function decodeAverageRateT(uint256 _averageRateInfo) private pure returns (uint256) {\n        return _averageRateInfo >> 224;\n    }\n\n    function decodeAverageRateN(uint256 _averageRateInfo) private pure returns (uint256) {\n        return (_averageRateInfo >> 112) & MAX_UINT112;\n    }\n\n    function decodeAverageRateD(uint256 _averageRateInfo) private pure returns (uint256) {\n        return _averageRateInfo & MAX_UINT112;\n    }\n\n    /**\n     * @dev returns the largest integer smaller than or equal to the square root of a given value\n     *\n     * @param x the given value\n     *\n     * @return the largest integer smaller than or equal to the square root of the given value\n     */\n    function floorSqrt(uint256 x) private pure returns (uint256) {\n        return x > 0 ? MathEx.floorSqrt(x) : 0;\n    }\n\n    function crossReserveTargetAmount(\n        uint256 _sourceReserveBalance,\n        uint256 _targetReserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_sourceReserveBalance > 0 && _targetReserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n\n        return _targetReserveBalance.mul(_amount) / _sourceReserveBalance.add(_amount);\n    }\n\n    function crossReserveSourceAmount(\n        uint256 _sourceReserveBalance,\n        uint256 _targetReserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_sourceReserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n        require(_amount < _targetReserveBalance, \"ERR_INVALID_AMOUNT\");\n\n        if (_amount == 0) {\n            return 0;\n        }\n\n        return (_sourceReserveBalance.mul(_amount) - 1) / (_targetReserveBalance - _amount) + 1;\n    }\n\n    function fundCost(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n\n        // special case for 0 amount\n        if (_amount == 0) {\n            return 0;\n        }\n\n        return (_amount.mul(_reserveBalance) - 1) / _supply + 1;\n    }\n\n    function fundSupplyAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n\n        // special case for 0 amount\n        if (_amount == 0) {\n            return 0;\n        }\n\n        return _amount.mul(_supply) / _reserveBalance;\n    }\n\n    function liquidateReserveAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint256 _amount\n    ) private pure returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n        require(_amount <= _supply, \"ERR_INVALID_AMOUNT\");\n\n        // special case for 0 amount\n        if (_amount == 0) {\n            return 0;\n        }\n\n        // special case for liquidating the entire supply\n        if (_amount == _supply) {\n            return _reserveBalance;\n        }\n\n        return _amount.mul(_reserveBalance) / _supply;\n    }\n\n    /**\n     * @dev returns the network wallet and fees\n     *\n     * @param reserveBalance0 1st reserve balance\n     * @param reserveBalance1 2nd reserve balance\n     *\n     * @return the network wallet\n     * @return the network fee on the 1st reserve\n     * @return the network fee on the 2nd reserve\n     */\n    function networkWalletAndFees(uint256 reserveBalance0, uint256 reserveBalance1)\n        private\n        view\n        returns (\n            ITokenHolder,\n            uint256,\n            uint256\n        )\n    {\n        uint256 prevPoint = floorSqrt(_reserveBalancesProduct);\n        uint256 currPoint = floorSqrt(reserveBalance0 * reserveBalance1);\n\n        if (prevPoint >= currPoint) {\n            return (ITokenHolder(address(0)), 0, 0);\n        }\n\n        (ITokenHolder networkFeeWallet, uint32 networkFee) =\n            INetworkSettings(addressOf(NETWORK_SETTINGS)).networkFeeParams();\n        uint256 n = (currPoint - prevPoint) * networkFee;\n        uint256 d = currPoint * PPM_RESOLUTION;\n        return (networkFeeWallet, reserveBalance0.mul(n).div(d), reserveBalance1.mul(n).div(d));\n    }\n\n    /**\n     * @dev transfers funds held by the contract and sends them to an account\n     *\n     * @param token ERC20 token contract address\n     * @param to account to receive the new amount\n     * @param amount amount to withdraw\n     */\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) private {\n        if (amount == 0) {\n            return;\n        }\n\n        if (token == NATIVE_TOKEN_ADDRESS) {\n            payable(to).transfer(amount);\n        } else {\n            token.safeTransfer(to, amount);\n        }\n    }\n\n    /**\n     * @dev deprecated since version 28, backward compatibility - use only for earlier versions\n     */\n    function token() public view override returns (IConverterAnchor) {\n        return anchor;\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function transferTokenOwnership(address _newOwner) public override ownerOnly {\n        transferAnchorOwnership(_newOwner);\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function acceptTokenOwnership() public override ownerOnly {\n        acceptAnchorOwnership();\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function connectors(IERC20 _address)\n        public\n        view\n        override\n        returns (\n            uint256,\n            uint32,\n            bool,\n            bool,\n            bool\n        )\n    {\n        uint256 reserveId = __reserveIds[_address];\n        if (reserveId != 0) {\n            return (reserveBalance(reserveId), PPM_RESOLUTION / 2, false, false, true);\n        }\n        return (0, 0, false, false, false);\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function connectorTokens(uint256 _index) public view override returns (IERC20) {\n        return __reserveTokens[_index];\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function connectorTokenCount() public view override returns (uint16) {\n        return reserveTokenCount();\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function getConnectorBalance(IERC20 _connectorToken) public view override returns (uint256) {\n        return reserveBalance(_connectorToken);\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function getReturn(\n        IERC20 _sourceToken,\n        IERC20 _targetToken,\n        uint256 _amount\n    ) public view returns (uint256, uint256) {\n        return targetAmountAndFee(_sourceToken, _targetToken, _amount);\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"_anchor\",\"type\":\"address\"},{\"internalType\":\"contract IContractRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_maxConversionFee\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"contract IConverterAnchor\",\"name\":\"_anchor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_activated\",\"type\":\"bool\"}],\"name\":\"Activation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_return\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_conversionFee\",\"type\":\"int256\"}],\"name\":\"Conversion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_prevFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newFee\",\"type\":\"uint32\"}],\"name\":\"ConversionFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSupply\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSupply\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_token2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rateN\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rateD\",\"type\":\"uint256\"}],\"name\":\"TokenRateUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAnchorOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_reserveAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_reserveTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityCost\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_reserveAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addLiquidityReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_weight\",\"type\":\"uint32\"}],\"name\":\"addReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchor\",\"outputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averageRateInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorTokenCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"connectorTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conversionFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converterType\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_connectorToken\",\"type\":\"address\"}],\"name\":\"getConnectorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isV28OrHigher\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxConversionFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onUpgradeComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyOwnerCanUpdateRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processNetworkFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recentAverageRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_reserveMinReturnAmounts\",\"type\":\"uint256[]\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_reserveTokens\",\"type\":\"address[]\"}],\"name\":\"removeLiquidityReturn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_reserveToken\",\"type\":\"address\"}],\"name\":\"reserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveTokenCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_reserveToken\",\"type\":\"address\"}],\"name\":\"reserveWeight\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyOwnerCanUpdateRegistry\",\"type\":\"bool\"}],\"name\":\"restrictRegistryUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_conversionFee\",\"type\":\"uint32\"}],\"name\":\"setConversionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sourceAmountAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncReserveBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"targetAmountAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferAnchorOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newConverter\",\"type\":\"address\"}],\"name\":\"transferReservesOnUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StandardPoolConverter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dbd62d3c1405d28c57f51c823d9d14f3f4a54e2000000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd400000000000000000000000000000000000000000000000000000000000003e8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}, {"Rank": 431, "Address": "0xaab0e04ca86e791b6a214028f09d0a87b36cb564", "NameTag": "", "Balance": 30396.88528438, "Percentage": 0.02581008, "TxCount": 21, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 433, "Address": "0x8dc250d5403ba72cbeaf0ac40f7c61c6db3a9a20", "NameTag": "", "Balance": 30150.0, "Percentage": 0.02560045, "TxCount": 209, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 474, "Address": "0x3dfd23a6c5e8bbcfc9581d2e864a68feb6a076d3", "NameTag": "Aave: Lending Pool Core V1", "Balance": 26533.29889421, "Percentage": 0.0225295, "TxCount": 14, "SourceCode": "pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title WadRayMath library\r\n* @author Aave\r\n* @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\r\n**/\r\n\r\nlibrary WadRayMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant WAD = 1e18;\r\n    uint256 internal constant halfWAD = WAD / 2;\r\n\r\n    uint256 internal constant RAY = 1e27;\r\n    uint256 internal constant halfRAY = RAY / 2;\r\n\r\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\r\n\r\n    /**\r\n    * @return one ray, 1e27\r\n    **/\r\n    function ray() internal pure returns (uint256) {\r\n        return RAY;\r\n    }\r\n\r\n    /**\r\n    * @return one wad, 1e18\r\n    **/\r\n\r\n    function wad() internal pure returns (uint256) {\r\n        return WAD;\r\n    }\r\n\r\n    /**\r\n    * @return half ray, 1e27/2\r\n    **/\r\n    function halfRay() internal pure returns (uint256) {\r\n        return halfRAY;\r\n    }\r\n\r\n    /**\r\n    * @return half ray, 1e18/2\r\n    **/\r\n    function halfWad() internal pure returns (uint256) {\r\n        return halfWAD;\r\n    }\r\n\r\n    /**\r\n    * @dev multiplies two wad, rounding half up to the nearest wad\r\n    * @param a wad\r\n    * @param b wad\r\n    * @return the result of a*b, in wad\r\n    **/\r\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return halfWAD.add(a.mul(b)).div(WAD);\r\n    }\r\n\r\n    /**\r\n    * @dev divides two wad, rounding half up to the nearest wad\r\n    * @param a wad\r\n    * @param b wad\r\n    * @return the result of a/b, in wad\r\n    **/\r\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 halfB = b / 2;\r\n\r\n        return halfB.add(a.mul(WAD)).div(b);\r\n    }\r\n\r\n    /**\r\n    * @dev multiplies two ray, rounding half up to the nearest ray\r\n    * @param a ray\r\n    * @param b ray\r\n    * @return the result of a*b, in ray\r\n    **/\r\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return halfRAY.add(a.mul(b)).div(RAY);\r\n    }\r\n\r\n    /**\r\n    * @dev divides two ray, rounding half up to the nearest ray\r\n    * @param a ray\r\n    * @param b ray\r\n    * @return the result of a/b, in ray\r\n    **/\r\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 halfB = b / 2;\r\n\r\n        return halfB.add(a.mul(RAY)).div(b);\r\n    }\r\n\r\n    /**\r\n    * @dev casts ray down to wad\r\n    * @param a ray\r\n    * @return a casted to wad, rounded half up to the nearest wad\r\n    **/\r\n    function rayToWad(uint256 a) internal pure returns (uint256) {\r\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\r\n\r\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\r\n    }\r\n\r\n    /**\r\n    * @dev convert wad up to ray\r\n    * @param a wad\r\n    * @return a converted in ray\r\n    **/\r\n    function wadToRay(uint256 a) internal pure returns (uint256) {\r\n        return a.mul(WAD_RAY_RATIO);\r\n    }\r\n\r\n    /**\r\n    * @dev calculates base^exp. The code uses the ModExp precompile\r\n    * @return base^exp, in ray\r\n    */\r\n    //solium-disable-next-line\r\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rayMul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rayMul(z, x);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * > Note that this information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * `IERC20.balanceOf` and `IERC20.transfer`.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title VersionedInitializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n *\r\n * @author Aave, inspired by the OpenZeppelin Initializable contract\r\n */\r\ncontract VersionedInitializable {\r\n    /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n    uint256 private lastInitializedRevision = 0;\r\n\r\n    /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n    bool private initializing;\r\n\r\n    /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n    modifier initializer() {\r\n        uint256 revision = getRevision();\r\n        require(initializing || isConstructor() || revision > lastInitializedRevision, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            lastInitializedRevision = revision;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev returns the revision number of the contract.\r\n    /// Needs to be defined in the inherited class as a constant.\r\n    function getRevision() internal pure returns(uint256);\r\n\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        uint256 cs;\r\n        //solium-disable-next-line\r\n        assembly {\r\n            cs := extcodesize(address)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n    /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n    function() external payable {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n   * @return The Address of the implementation.\r\n   */\r\n    function _implementation() internal view returns (address);\r\n\r\n    /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n    function _delegate(address implementation) internal {\r\n        //solium-disable-next-line\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize)\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize)\r\n\r\n            switch result\r\n                // delegatecall returns 0 on error.\r\n                case 0 {\r\n                    revert(0, returndatasize)\r\n                }\r\n                default {\r\n                    return(0, returndatasize)\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n    function _willFallback() internal {}\r\n\r\n    /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n    function _fallback() internal {\r\n        _willFallback();\r\n        _delegate(_implementation());\r\n    }\r\n}\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract BaseUpgradeabilityProxy is Proxy {\r\n    /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n    function _implementation() internal view returns (address impl) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        //solium-disable-next-line\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n    function _setImplementation(address newImplementation) internal {\r\n        require(\r\n            Address.isContract(newImplementation),\r\n            \"Cannot set a proxy implementation to a non-contract address\"\r\n        );\r\n\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n        //solium-disable-next-line\r\n        assembly {\r\n            sstore(slot, newImplementation)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title BaseAdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n    /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _admin()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n    function admin() external ifAdmin returns (address) {\r\n        return _admin();\r\n    }\r\n\r\n    /**\r\n   * @return The address of the implementation.\r\n   */\r\n    function implementation() external ifAdmin returns (address) {\r\n        return _implementation();\r\n    }\r\n\r\n    /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n    function changeAdmin(address newAdmin) external ifAdmin {\r\n        require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n        emit AdminChanged(_admin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n    function upgradeTo(address newImplementation) external ifAdmin {\r\n        _upgradeTo(newImplementation);\r\n    }\r\n\r\n    /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\r\n        _upgradeTo(newImplementation);\r\n        (bool success, ) = newImplementation.delegatecall(data);\r\n        require(success);\r\n    }\r\n\r\n    /**\r\n   * @return The admin slot.\r\n   */\r\n    function _admin() internal view returns (address adm) {\r\n        bytes32 slot = ADMIN_SLOT;\r\n        //solium-disable-next-line\r\n        assembly {\r\n            adm := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n    function _setAdmin(address newAdmin) internal {\r\n        bytes32 slot = ADMIN_SLOT;\r\n        //solium-disable-next-line\r\n        assembly {\r\n            sstore(slot, newAdmin)\r\n        }\r\n    }\r\n\r\n    /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n    function _willFallback() internal {\r\n        require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n        super._willFallback();\r\n    }\r\n}\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\r\n * implementation and init data.\r\n */\r\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n    /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n    constructor(address _logic, bytes memory _data) public payable {\r\n        assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\r\n        _setImplementation(_logic);\r\n        if (_data.length > 0) {\r\n            (bool success, ) = _logic.delegatecall(_data);\r\n            require(success);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\r\n    /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n    constructor(address _logic, address _admin, bytes memory _data) public payable UpgradeabilityProxy(_logic, _data) {\r\n        assert(ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\r\n        _setAdmin(_admin);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title InitializableUpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\r\n * implementation and init data.\r\n */\r\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n    /**\r\n   * @dev Contract initializer.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n    function initialize(address _logic, bytes memory _data) public payable {\r\n        require(_implementation() == address(0));\r\n        assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\r\n        _setImplementation(_logic);\r\n        if (_data.length > 0) {\r\n            (bool success, ) = _logic.delegatecall(_data);\r\n            require(success);\r\n        }\r\n    }\r\n}\r\n\r\ncontract AddressStorage {\r\n    mapping(bytes32 => address) private addresses;\r\n\r\n    function getAddress(bytes32 _key) public view returns (address) {\r\n        return addresses[_key];\r\n    }\r\n\r\n    function _setAddress(bytes32 _key, address _value) internal {\r\n        addresses[_key] = _value;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title InitializableAdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\r\n    /**\r\n   * Contract initializer.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n    function initialize(address _logic, address _admin, bytes memory _data) public payable {\r\n        require(_implementation() == address(0));\r\n        InitializableUpgradeabilityProxy.initialize(_logic, _data);\r\n        assert(ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\r\n        _setAdmin(_admin);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n@title ILendingPoolAddressesProvider interface\r\n@notice provides the interface to fetch the LendingPoolCore address\r\n */\r\n\r\ncontract ILendingPoolAddressesProvider {\r\n\r\n    function getLendingPool() public view returns (address);\r\n    function setLendingPoolImpl(address _pool) public;\r\n\r\n    function getLendingPoolCore() public view returns (address payable);\r\n    function setLendingPoolCoreImpl(address _lendingPoolCore) public;\r\n\r\n    function getLendingPoolConfigurator() public view returns (address);\r\n    function setLendingPoolConfiguratorImpl(address _configurator) public;\r\n\r\n    function getLendingPoolDataProvider() public view returns (address);\r\n    function setLendingPoolDataProviderImpl(address _provider) public;\r\n\r\n    function getLendingPoolParametersProvider() public view returns (address);\r\n    function setLendingPoolParametersProviderImpl(address _parametersProvider) public;\r\n\r\n    function getTokenDistributor() public view returns (address);\r\n    function setTokenDistributor(address _tokenDistributor) public;\r\n\r\n\r\n    function getFeeProvider() public view returns (address);\r\n    function setFeeProviderImpl(address _feeProvider) public;\r\n\r\n    function getLendingPoolLiquidationManager() public view returns (address);\r\n    function setLendingPoolLiquidationManager(address _manager) public;\r\n\r\n    function getLendingPoolManager() public view returns (address);\r\n    function setLendingPoolManager(address _lendingPoolManager) public;\r\n\r\n    function getPriceOracle() public view returns (address);\r\n    function setPriceOracle(address _priceOracle) public;\r\n\r\n    function getLendingRateOracle() public view returns (address);\r\n    function setLendingRateOracle(address _lendingRateOracle) public;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @title LendingPoolAddressesProvider contract\r\n* @notice Is the main registry of the protocol. All the different components of the protocol are accessible\r\n* through the addresses provider.\r\n* @author Aave\r\n**/\r\n\r\ncontract LendingPoolAddressesProvider is Ownable, ILendingPoolAddressesProvider, AddressStorage {\r\n    //events\r\n    event LendingPoolUpdated(address indexed newAddress);\r\n    event LendingPoolCoreUpdated(address indexed newAddress);\r\n    event LendingPoolParametersProviderUpdated(address indexed newAddress);\r\n    event LendingPoolManagerUpdated(address indexed newAddress);\r\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\r\n    event LendingPoolLiquidationManagerUpdated(address indexed newAddress);\r\n    event LendingPoolDataProviderUpdated(address indexed newAddress);\r\n    event EthereumAddressUpdated(address indexed newAddress);\r\n    event PriceOracleUpdated(address indexed newAddress);\r\n    event LendingRateOracleUpdated(address indexed newAddress);\r\n    event FeeProviderUpdated(address indexed newAddress);\r\n    event TokenDistributorUpdated(address indexed newAddress);\r\n\r\n    event ProxyCreated(bytes32 id, address indexed newAddress);\r\n\r\n    bytes32 private constant LENDING_POOL = \"LENDING_POOL\";\r\n    bytes32 private constant LENDING_POOL_CORE = \"LENDING_POOL_CORE\";\r\n    bytes32 private constant LENDING_POOL_CONFIGURATOR = \"LENDING_POOL_CONFIGURATOR\";\r\n    bytes32 private constant LENDING_POOL_PARAMETERS_PROVIDER = \"PARAMETERS_PROVIDER\";\r\n    bytes32 private constant LENDING_POOL_MANAGER = \"LENDING_POOL_MANAGER\";\r\n    bytes32 private constant LENDING_POOL_LIQUIDATION_MANAGER = \"LIQUIDATION_MANAGER\";\r\n    bytes32 private constant LENDING_POOL_FLASHLOAN_PROVIDER = \"FLASHLOAN_PROVIDER\";\r\n    bytes32 private constant DATA_PROVIDER = \"DATA_PROVIDER\";\r\n    bytes32 private constant ETHEREUM_ADDRESS = \"ETHEREUM_ADDRESS\";\r\n    bytes32 private constant PRICE_ORACLE = \"PRICE_ORACLE\";\r\n    bytes32 private constant LENDING_RATE_ORACLE = \"LENDING_RATE_ORACLE\";\r\n    bytes32 private constant FEE_PROVIDER = \"FEE_PROVIDER\";\r\n    bytes32 private constant WALLET_BALANCE_PROVIDER = \"WALLET_BALANCE_PROVIDER\";\r\n    bytes32 private constant TOKEN_DISTRIBUTOR = \"TOKEN_DISTRIBUTOR\";\r\n\r\n\r\n    /**\r\n    * @dev returns the address of the LendingPool proxy\r\n    * @return the lending pool proxy address\r\n    **/\r\n    function getLendingPool() public view returns (address) {\r\n        return getAddress(LENDING_POOL);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev updates the implementation of the lending pool\r\n    * @param _pool the new lending pool implementation\r\n    **/\r\n    function setLendingPoolImpl(address _pool) public onlyOwner {\r\n        updateImplInternal(LENDING_POOL, _pool);\r\n        emit LendingPoolUpdated(_pool);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the address of the LendingPoolCore proxy\r\n    * @return the lending pool core proxy address\r\n     */\r\n    function getLendingPoolCore() public view returns (address payable) {\r\n        address payable core = address(uint160(getAddress(LENDING_POOL_CORE)));\r\n        return core;\r\n    }\r\n\r\n    /**\r\n    * @dev updates the implementation of the lending pool core\r\n    * @param _lendingPoolCore the new lending pool core implementation\r\n    **/\r\n    function setLendingPoolCoreImpl(address _lendingPoolCore) public onlyOwner {\r\n        updateImplInternal(LENDING_POOL_CORE, _lendingPoolCore);\r\n        emit LendingPoolCoreUpdated(_lendingPoolCore);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the address of the LendingPoolConfigurator proxy\r\n    * @return the lending pool configurator proxy address\r\n    **/\r\n    function getLendingPoolConfigurator() public view returns (address) {\r\n        return getAddress(LENDING_POOL_CONFIGURATOR);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the implementation of the lending pool configurator\r\n    * @param _configurator the new lending pool configurator implementation\r\n    **/\r\n    function setLendingPoolConfiguratorImpl(address _configurator) public onlyOwner {\r\n        updateImplInternal(LENDING_POOL_CONFIGURATOR, _configurator);\r\n        emit LendingPoolConfiguratorUpdated(_configurator);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the address of the LendingPoolDataProvider proxy\r\n    * @return the lending pool data provider proxy address\r\n     */\r\n    function getLendingPoolDataProvider() public view returns (address) {\r\n        return getAddress(DATA_PROVIDER);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the implementation of the lending pool data provider\r\n    * @param _provider the new lending pool data provider implementation\r\n    **/\r\n    function setLendingPoolDataProviderImpl(address _provider) public onlyOwner {\r\n        updateImplInternal(DATA_PROVIDER, _provider);\r\n        emit LendingPoolDataProviderUpdated(_provider);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the address of the LendingPoolParametersProvider proxy\r\n    * @return the address of the Lending pool parameters provider proxy\r\n    **/\r\n    function getLendingPoolParametersProvider() public view returns (address) {\r\n        return getAddress(LENDING_POOL_PARAMETERS_PROVIDER);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the implementation of the lending pool parameters provider\r\n    * @param _parametersProvider the new lending pool parameters provider implementation\r\n    **/\r\n    function setLendingPoolParametersProviderImpl(address _parametersProvider) public onlyOwner {\r\n        updateImplInternal(LENDING_POOL_PARAMETERS_PROVIDER, _parametersProvider);\r\n        emit LendingPoolParametersProviderUpdated(_parametersProvider);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the address of the FeeProvider proxy\r\n    * @return the address of the Fee provider proxy\r\n    **/\r\n    function getFeeProvider() public view returns (address) {\r\n        return getAddress(FEE_PROVIDER);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the implementation of the FeeProvider proxy\r\n    * @param _feeProvider the new lending pool fee provider implementation\r\n    **/\r\n    function setFeeProviderImpl(address _feeProvider) public onlyOwner {\r\n        updateImplInternal(FEE_PROVIDER, _feeProvider);\r\n        emit FeeProviderUpdated(_feeProvider);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the address of the LendingPoolLiquidationManager. Since the manager is used\r\n    * through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence\r\n    * the addresses are changed directly.\r\n    * @return the address of the Lending pool liquidation manager\r\n    **/\r\n\r\n    function getLendingPoolLiquidationManager() public view returns (address) {\r\n        return getAddress(LENDING_POOL_LIQUIDATION_MANAGER);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the address of the Lending pool liquidation manager\r\n    * @param _manager the new lending pool liquidation manager address\r\n    **/\r\n    function setLendingPoolLiquidationManager(address _manager) public onlyOwner {\r\n        _setAddress(LENDING_POOL_LIQUIDATION_MANAGER, _manager);\r\n        emit LendingPoolLiquidationManagerUpdated(_manager);\r\n    }\r\n\r\n    /**\r\n    * @dev the functions below are storing specific addresses that are outside the context of the protocol\r\n    * hence the upgradable proxy pattern is not used\r\n    **/\r\n\r\n\r\n    function getLendingPoolManager() public view returns (address) {\r\n        return getAddress(LENDING_POOL_MANAGER);\r\n    }\r\n\r\n    function setLendingPoolManager(address _lendingPoolManager) public onlyOwner {\r\n        _setAddress(LENDING_POOL_MANAGER, _lendingPoolManager);\r\n        emit LendingPoolManagerUpdated(_lendingPoolManager);\r\n    }\r\n\r\n    function getPriceOracle() public view returns (address) {\r\n        return getAddress(PRICE_ORACLE);\r\n    }\r\n\r\n    function setPriceOracle(address _priceOracle) public onlyOwner {\r\n        _setAddress(PRICE_ORACLE, _priceOracle);\r\n        emit PriceOracleUpdated(_priceOracle);\r\n    }\r\n\r\n    function getLendingRateOracle() public view returns (address) {\r\n        return getAddress(LENDING_RATE_ORACLE);\r\n    }\r\n\r\n    function setLendingRateOracle(address _lendingRateOracle) public onlyOwner {\r\n        _setAddress(LENDING_RATE_ORACLE, _lendingRateOracle);\r\n        emit LendingRateOracleUpdated(_lendingRateOracle);\r\n    }\r\n\r\n\r\n    function getTokenDistributor() public view returns (address) {\r\n        return getAddress(TOKEN_DISTRIBUTOR);\r\n    }\r\n\r\n    function setTokenDistributor(address _tokenDistributor) public onlyOwner {\r\n        _setAddress(TOKEN_DISTRIBUTOR, _tokenDistributor);\r\n        emit TokenDistributorUpdated(_tokenDistributor);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev internal function to update the implementation of a specific component of the protocol\r\n    * @param _id the id of the contract to be updated\r\n    * @param _newAddress the address of the new implementation\r\n    **/\r\n    function updateImplInternal(bytes32 _id, address _newAddress) internal {\r\n        address payable proxyAddress = address(uint160(getAddress(_id)));\r\n\r\n        InitializableAdminUpgradeabilityProxy proxy = InitializableAdminUpgradeabilityProxy(proxyAddress);\r\n        bytes memory params = abi.encodeWithSignature(\"initialize(address)\", address(this));\r\n\r\n        if (proxyAddress == address(0)) {\r\n            proxy = new InitializableAdminUpgradeabilityProxy();\r\n            proxy.initialize(_newAddress, address(this), params);\r\n            _setAddress(_id, address(proxy));\r\n            emit ProxyCreated(_id, address(proxy));\r\n        } else {\r\n            proxy.upgradeToAndCall(_newAddress, params);\r\n        }\r\n\r\n    }\r\n}\r\n\r\ncontract UintStorage {\r\n    mapping(bytes32 => uint256) private uints;\r\n\r\n    function getUint(bytes32 _key) public view returns (uint256) {\r\n        return uints[_key];\r\n    }\r\n\r\n    function _setUint(bytes32 _key, uint256 _value) internal {\r\n        uints[_key] = _value;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n* @title LendingPoolParametersProvider\r\n* @author Aave\r\n* @notice stores the configuration parameters of the Lending Pool contract\r\n**/\r\n\r\ncontract LendingPoolParametersProvider is VersionedInitializable {\r\n\r\n    uint256 private constant MAX_STABLE_RATE_BORROW_SIZE_PERCENT = 25;\r\n    uint256 private constant REBALANCE_DOWN_RATE_DELTA = (1e27)/5;\r\n    uint256 private constant FLASHLOAN_FEE_TOTAL = 35;\r\n    uint256 private constant FLASHLOAN_FEE_PROTOCOL = 3000;\r\n\r\n    uint256 constant private DATA_PROVIDER_REVISION = 0x1;\r\n\r\n    function getRevision() internal pure returns(uint256) {\r\n        return DATA_PROVIDER_REVISION;\r\n    }\r\n\r\n    /**\r\n    * @dev initializes the LendingPoolParametersProvider after it's added to the proxy\r\n    * @param _addressesProvider the address of the LendingPoolAddressesProvider\r\n    */\r\n    function initialize(address _addressesProvider) public initializer {\r\n    }\r\n    /**\r\n    * @dev returns the maximum stable rate borrow size, in percentage of the available liquidity.\r\n    **/\r\n    function getMaxStableRateBorrowSizePercent() external pure returns (uint256)  {\r\n        return MAX_STABLE_RATE_BORROW_SIZE_PERCENT;\r\n    }\r\n\r\n    /**\r\n    * @dev returns the delta between the current stable rate and the user stable rate at\r\n    *      which the borrow position of the user will be rebalanced (scaled down)\r\n    **/\r\n    function getRebalanceDownRateDelta() external pure returns (uint256) {\r\n        return REBALANCE_DOWN_RATE_DELTA;\r\n    }\r\n\r\n    /**\r\n    * @dev returns the fee applied to a flashloan and the portion to redirect to the protocol, in basis points.\r\n    **/\r\n    function getFlashLoanFeesInBips() external pure returns (uint256, uint256) {\r\n        return (FLASHLOAN_FEE_TOTAL, FLASHLOAN_FEE_PROTOCOL);\r\n    }\r\n}\r\n\r\n/**\r\n* @title CoreLibrary library\r\n* @author Aave\r\n* @notice Defines the data structures of the reserves and the user data\r\n**/\r\nlibrary CoreLibrary {\r\n    using SafeMath for uint256;\r\n    using WadRayMath for uint256;\r\n\r\n    enum InterestRateMode {NONE, STABLE, VARIABLE}\r\n\r\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\r\n\r\n    struct UserReserveData {\r\n        //principal amount borrowed by the user.\r\n        uint256 principalBorrowBalance;\r\n        //cumulated variable borrow index for the user. Expressed in ray\r\n        uint256 lastVariableBorrowCumulativeIndex;\r\n        //origination fee cumulated by the user\r\n        uint256 originationFee;\r\n        // stable borrow rate at which the user has borrowed. Expressed in ray\r\n        uint256 stableBorrowRate;\r\n        uint40 lastUpdateTimestamp;\r\n        //defines if a specific deposit should or not be used as a collateral in borrows\r\n        bool useAsCollateral;\r\n    }\r\n\r\n    struct ReserveData {\r\n        /**\r\n        * @dev refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\r\n        **/\r\n        //the liquidity index. Expressed in ray\r\n        uint256 lastLiquidityCumulativeIndex;\r\n        //the current supply rate. Expressed in ray\r\n        uint256 currentLiquidityRate;\r\n        //the total borrows of the reserve at a stable rate. Expressed in the currency decimals\r\n        uint256 totalBorrowsStable;\r\n        //the total borrows of the reserve at a variable rate. Expressed in the currency decimals\r\n        uint256 totalBorrowsVariable;\r\n        //the current variable borrow rate. Expressed in ray\r\n        uint256 currentVariableBorrowRate;\r\n        //the current stable borrow rate. Expressed in ray\r\n        uint256 currentStableBorrowRate;\r\n        //the current average stable borrow rate (weighted average of all the different stable rate loans). Expressed in ray\r\n        uint256 currentAverageStableBorrowRate;\r\n        //variable borrow index. Expressed in ray\r\n        uint256 lastVariableBorrowCumulativeIndex;\r\n        //the ltv of the reserve. Expressed in percentage (0-100)\r\n        uint256 baseLTVasCollateral;\r\n        //the liquidation threshold of the reserve. Expressed in percentage (0-100)\r\n        uint256 liquidationThreshold;\r\n        //the liquidation bonus of the reserve. Expressed in percentage\r\n        uint256 liquidationBonus;\r\n        //the decimals of the reserve asset\r\n        uint256 decimals;\r\n        /**\r\n        * @dev address of the aToken representing the asset\r\n        **/\r\n        address aTokenAddress;\r\n        /**\r\n        * @dev address of the interest rate strategy contract\r\n        **/\r\n        address interestRateStrategyAddress;\r\n        uint40 lastUpdateTimestamp;\r\n        // borrowingEnabled = true means users can borrow from this reserve\r\n        bool borrowingEnabled;\r\n        // usageAsCollateralEnabled = true means users can use this reserve as collateral\r\n        bool usageAsCollateralEnabled;\r\n        // isStableBorrowRateEnabled = true means users can borrow at a stable rate\r\n        bool isStableBorrowRateEnabled;\r\n        // isActive = true means the reserve has been activated and properly configured\r\n        bool isActive;\r\n        // isFreezed = true means the reserve only allows repays and redeems, but not deposits, new borrowings or rate swap\r\n        bool isFreezed;\r\n    }\r\n\r\n    /**\r\n    * @dev returns the ongoing normalized income for the reserve.\r\n    * a value of 1e27 means there is no income. As time passes, the income is accrued.\r\n    * A value of 2*1e27 means that the income of the reserve is double the initial amount.\r\n    * @param _reserve the reserve object\r\n    * @return the normalized income. expressed in ray\r\n    **/\r\n    function getNormalizedIncome(CoreLibrary.ReserveData storage _reserve)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 cumulated = calculateLinearInterest(\r\n            _reserve\r\n                .currentLiquidityRate,\r\n            _reserve\r\n                .lastUpdateTimestamp\r\n        )\r\n            .rayMul(_reserve.lastLiquidityCumulativeIndex);\r\n\r\n        return cumulated;\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Updates the liquidity cumulative index Ci and variable borrow cumulative index Bvc. Refer to the whitepaper for\r\n    * a formal specification.\r\n    * @param _self the reserve object\r\n    **/\r\n    function updateCumulativeIndexes(ReserveData storage _self) internal {\r\n        uint256 totalBorrows = getTotalBorrows(_self);\r\n\r\n        if (totalBorrows > 0) {\r\n            //only cumulating if there is any income being produced\r\n            uint256 cumulatedLiquidityInterest = calculateLinearInterest(\r\n                _self.currentLiquidityRate,\r\n                _self.lastUpdateTimestamp\r\n            );\r\n\r\n            _self.lastLiquidityCumulativeIndex = cumulatedLiquidityInterest.rayMul(\r\n                _self.lastLiquidityCumulativeIndex\r\n            );\r\n\r\n            uint256 cumulatedVariableBorrowInterest = calculateCompoundedInterest(\r\n                _self.currentVariableBorrowRate,\r\n                _self.lastUpdateTimestamp\r\n            );\r\n            _self.lastVariableBorrowCumulativeIndex = cumulatedVariableBorrowInterest.rayMul(\r\n                _self.lastVariableBorrowCumulativeIndex\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev accumulates a predefined amount of asset to the reserve as a fixed, one time income. Used for example to accumulate\r\n    * the flashloan fee to the reserve, and spread it through the depositors.\r\n    * @param _self the reserve object\r\n    * @param _totalLiquidity the total liquidity available in the reserve\r\n    * @param _amount the amount to accomulate\r\n    **/\r\n    function cumulateToLiquidityIndex(\r\n        ReserveData storage _self,\r\n        uint256 _totalLiquidity,\r\n        uint256 _amount\r\n    ) internal {\r\n        uint256 amountToLiquidityRatio = _amount.wadToRay().rayDiv(_totalLiquidity.wadToRay());\r\n\r\n        uint256 cumulatedLiquidity = amountToLiquidityRatio.add(WadRayMath.ray());\r\n\r\n        _self.lastLiquidityCumulativeIndex = cumulatedLiquidity.rayMul(\r\n            _self.lastLiquidityCumulativeIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev initializes a reserve\r\n    * @param _self the reserve object\r\n    * @param _aTokenAddress the address of the overlying atoken contract\r\n    * @param _decimals the number of decimals of the underlying asset\r\n    * @param _interestRateStrategyAddress the address of the interest rate strategy contract\r\n    **/\r\n    function init(\r\n        ReserveData storage _self,\r\n        address _aTokenAddress,\r\n        uint256 _decimals,\r\n        address _interestRateStrategyAddress\r\n    ) external {\r\n        require(_self.aTokenAddress == address(0), \"Reserve has already been initialized\");\r\n\r\n        if (_self.lastLiquidityCumulativeIndex == 0) {\r\n            //if the reserve has not been initialized yet\r\n            _self.lastLiquidityCumulativeIndex = WadRayMath.ray();\r\n        }\r\n\r\n        if (_self.lastVariableBorrowCumulativeIndex == 0) {\r\n            _self.lastVariableBorrowCumulativeIndex = WadRayMath.ray();\r\n        }\r\n\r\n        _self.aTokenAddress = _aTokenAddress;\r\n        _self.decimals = _decimals;\r\n\r\n        _self.interestRateStrategyAddress = _interestRateStrategyAddress;\r\n        _self.isActive = true;\r\n        _self.isFreezed = false;\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev enables borrowing on a reserve\r\n    * @param _self the reserve object\r\n    * @param _stableBorrowRateEnabled true if the stable borrow rate must be enabled by default, false otherwise\r\n    **/\r\n    function enableBorrowing(ReserveData storage _self, bool _stableBorrowRateEnabled) external {\r\n        require(_self.borrowingEnabled == false, \"Reserve is already enabled\");\r\n\r\n        _self.borrowingEnabled = true;\r\n        _self.isStableBorrowRateEnabled = _stableBorrowRateEnabled;\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev disables borrowing on a reserve\r\n    * @param _self the reserve object\r\n    **/\r\n    function disableBorrowing(ReserveData storage _self) external {\r\n        _self.borrowingEnabled = false;\r\n    }\r\n\r\n    /**\r\n    * @dev enables a reserve to be used as collateral\r\n    * @param _self the reserve object\r\n    * @param _baseLTVasCollateral the loan to value of the asset when used as collateral\r\n    * @param _liquidationThreshold the threshold at which loans using this asset as collateral will be considered undercollateralized\r\n    * @param _liquidationBonus the bonus liquidators receive to liquidate this asset\r\n    **/\r\n    function enableAsCollateral(\r\n        ReserveData storage _self,\r\n        uint256 _baseLTVasCollateral,\r\n        uint256 _liquidationThreshold,\r\n        uint256 _liquidationBonus\r\n    ) external {\r\n        require(\r\n            _self.usageAsCollateralEnabled == false,\r\n            \"Reserve is already enabled as collateral\"\r\n        );\r\n\r\n        _self.usageAsCollateralEnabled = true;\r\n        _self.baseLTVasCollateral = _baseLTVasCollateral;\r\n        _self.liquidationThreshold = _liquidationThreshold;\r\n        _self.liquidationBonus = _liquidationBonus;\r\n\r\n        if (_self.lastLiquidityCumulativeIndex == 0)\r\n            _self.lastLiquidityCumulativeIndex = WadRayMath.ray();\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev disables a reserve as collateral\r\n    * @param _self the reserve object\r\n    **/\r\n    function disableAsCollateral(ReserveData storage _self) external {\r\n        _self.usageAsCollateralEnabled = false;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @dev calculates the compounded borrow balance of a user\r\n    * @param _self the userReserve object\r\n    * @param _reserve the reserve object\r\n    * @return the user compounded borrow balance\r\n    **/\r\n    function getCompoundedBorrowBalance(\r\n        CoreLibrary.UserReserveData storage _self,\r\n        CoreLibrary.ReserveData storage _reserve\r\n    ) internal view returns (uint256) {\r\n        if (_self.principalBorrowBalance == 0) return 0;\r\n\r\n        uint256 principalBorrowBalanceRay = _self.principalBorrowBalance.wadToRay();\r\n        uint256 compoundedBalance = 0;\r\n        uint256 cumulatedInterest = 0;\r\n\r\n        if (_self.stableBorrowRate > 0) {\r\n            cumulatedInterest = calculateCompoundedInterest(\r\n                _self.stableBorrowRate,\r\n                _self.lastUpdateTimestamp\r\n            );\r\n        } else {\r\n            //variable interest\r\n            cumulatedInterest = calculateCompoundedInterest(\r\n                _reserve\r\n                    .currentVariableBorrowRate,\r\n                _reserve\r\n                    .lastUpdateTimestamp\r\n            )\r\n                .rayMul(_reserve.lastVariableBorrowCumulativeIndex)\r\n                .rayDiv(_self.lastVariableBorrowCumulativeIndex);\r\n        }\r\n\r\n        compoundedBalance = principalBorrowBalanceRay.rayMul(cumulatedInterest).rayToWad();\r\n\r\n        if (compoundedBalance == _self.principalBorrowBalance) {\r\n            //solium-disable-next-line\r\n            if (_self.lastUpdateTimestamp != block.timestamp) {\r\n                //no interest cumulation because of the rounding - we add 1 wei\r\n                //as symbolic cumulated interest to avoid interest free loans.\r\n\r\n                return _self.principalBorrowBalance.add(1 wei);\r\n            }\r\n        }\r\n\r\n        return compoundedBalance;\r\n    }\r\n\r\n    /**\r\n    * @dev increases the total borrows at a stable rate on a specific reserve and updates the\r\n    * average stable rate consequently\r\n    * @param _reserve the reserve object\r\n    * @param _amount the amount to add to the total borrows stable\r\n    * @param _rate the rate at which the amount has been borrowed\r\n    **/\r\n    function increaseTotalBorrowsStableAndUpdateAverageRate(\r\n        ReserveData storage _reserve,\r\n        uint256 _amount,\r\n        uint256 _rate\r\n    ) internal {\r\n        uint256 previousTotalBorrowStable = _reserve.totalBorrowsStable;\r\n        //updating reserve borrows stable\r\n        _reserve.totalBorrowsStable = _reserve.totalBorrowsStable.add(_amount);\r\n\r\n        //update the average stable rate\r\n        //weighted average of all the borrows\r\n        uint256 weightedLastBorrow = _amount.wadToRay().rayMul(_rate);\r\n        uint256 weightedPreviousTotalBorrows = previousTotalBorrowStable.wadToRay().rayMul(\r\n            _reserve.currentAverageStableBorrowRate\r\n        );\r\n\r\n        _reserve.currentAverageStableBorrowRate = weightedLastBorrow\r\n            .add(weightedPreviousTotalBorrows)\r\n            .rayDiv(_reserve.totalBorrowsStable.wadToRay());\r\n    }\r\n\r\n    /**\r\n    * @dev decreases the total borrows at a stable rate on a specific reserve and updates the\r\n    * average stable rate consequently\r\n    * @param _reserve the reserve object\r\n    * @param _amount the amount to substract to the total borrows stable\r\n    * @param _rate the rate at which the amount has been repaid\r\n    **/\r\n    function decreaseTotalBorrowsStableAndUpdateAverageRate(\r\n        ReserveData storage _reserve,\r\n        uint256 _amount,\r\n        uint256 _rate\r\n    ) internal {\r\n        require(_reserve.totalBorrowsStable >= _amount, \"Invalid amount to decrease\");\r\n\r\n        uint256 previousTotalBorrowStable = _reserve.totalBorrowsStable;\r\n\r\n        //updating reserve borrows stable\r\n        _reserve.totalBorrowsStable = _reserve.totalBorrowsStable.sub(_amount);\r\n\r\n        if (_reserve.totalBorrowsStable == 0) {\r\n            _reserve.currentAverageStableBorrowRate = 0; //no income if there are no stable rate borrows\r\n            return;\r\n        }\r\n\r\n        //update the average stable rate\r\n        //weighted average of all the borrows\r\n        uint256 weightedLastBorrow = _amount.wadToRay().rayMul(_rate);\r\n        uint256 weightedPreviousTotalBorrows = previousTotalBorrowStable.wadToRay().rayMul(\r\n            _reserve.currentAverageStableBorrowRate\r\n        );\r\n\r\n        require(\r\n            weightedPreviousTotalBorrows >= weightedLastBorrow,\r\n            \"The amounts to subtract don't match\"\r\n        );\r\n\r\n        _reserve.currentAverageStableBorrowRate = weightedPreviousTotalBorrows\r\n            .sub(weightedLastBorrow)\r\n            .rayDiv(_reserve.totalBorrowsStable.wadToRay());\r\n    }\r\n\r\n    /**\r\n    * @dev increases the total borrows at a variable rate\r\n    * @param _reserve the reserve object\r\n    * @param _amount the amount to add to the total borrows variable\r\n    **/\r\n    function increaseTotalBorrowsVariable(ReserveData storage _reserve, uint256 _amount) internal {\r\n        _reserve.totalBorrowsVariable = _reserve.totalBorrowsVariable.add(_amount);\r\n    }\r\n\r\n    /**\r\n    * @dev decreases the total borrows at a variable rate\r\n    * @param _reserve the reserve object\r\n    * @param _amount the amount to substract to the total borrows variable\r\n    **/\r\n    function decreaseTotalBorrowsVariable(ReserveData storage _reserve, uint256 _amount) internal {\r\n        require(\r\n            _reserve.totalBorrowsVariable >= _amount,\r\n            \"The amount that is being subtracted from the variable total borrows is incorrect\"\r\n        );\r\n        _reserve.totalBorrowsVariable = _reserve.totalBorrowsVariable.sub(_amount);\r\n    }\r\n\r\n    /**\r\n    * @dev function to calculate the interest using a linear interest rate formula\r\n    * @param _rate the interest rate, in ray\r\n    * @param _lastUpdateTimestamp the timestamp of the last update of the interest\r\n    * @return the interest rate linearly accumulated during the timeDelta, in ray\r\n    **/\r\n\r\n    function calculateLinearInterest(uint256 _rate, uint40 _lastUpdateTimestamp)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        //solium-disable-next-line\r\n        uint256 timeDifference = block.timestamp.sub(uint256(_lastUpdateTimestamp));\r\n\r\n        uint256 timeDelta = timeDifference.wadToRay().rayDiv(SECONDS_PER_YEAR.wadToRay());\r\n\r\n        return _rate.rayMul(timeDelta).add(WadRayMath.ray());\r\n    }\r\n\r\n    /**\r\n    * @dev function to calculate the interest using a compounded interest rate formula\r\n    * @param _rate the interest rate, in ray\r\n    * @param _lastUpdateTimestamp the timestamp of the last update of the interest\r\n    * @return the interest rate compounded during the timeDelta, in ray\r\n    **/\r\n    function calculateCompoundedInterest(uint256 _rate, uint40 _lastUpdateTimestamp)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        //solium-disable-next-line\r\n        uint256 timeDifference = block.timestamp.sub(uint256(_lastUpdateTimestamp));\r\n\r\n        uint256 ratePerSecond = _rate.div(SECONDS_PER_YEAR);\r\n\r\n        return ratePerSecond.add(WadRayMath.ray()).rayPow(timeDifference);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the total borrows on the reserve\r\n    * @param _reserve the reserve object\r\n    * @return the total borrows (stable + variable)\r\n    **/\r\n    function getTotalBorrows(CoreLibrary.ReserveData storage _reserve)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _reserve.totalBorrowsStable.add(_reserve.totalBorrowsVariable);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n* @title IPriceOracleGetter interface\r\n* @notice Interface for the Aave price oracle.\r\n**/\r\n\r\ninterface IPriceOracleGetter {\r\n    /**\r\n    * @dev returns the asset price in ETH\r\n    * @param _asset the address of the asset\r\n    * @return the ETH price of the asset\r\n    **/\r\n    function getAssetPrice(address _asset) external view returns (uint256);\r\n}\r\n\r\n/**\r\n* @title IFeeProvider interface\r\n* @notice Interface for the Aave fee provider.\r\n**/\r\n\r\ninterface IFeeProvider {\r\n    function calculateLoanOriginationFee(address _user, uint256 _amount) external view returns (uint256);\r\n    function getLoanOriginationFeePercentage() external view returns (uint256);\r\n}\r\n\r\n/**\r\n* @title LendingPoolDataProvider contract\r\n* @author Aave\r\n* @notice Implements functions to fetch data from the core, and aggregate them in order to allow computation\r\n* on the compounded balances and the account balances in ETH\r\n**/\r\ncontract LendingPoolDataProvider is VersionedInitializable {\r\n    using SafeMath for uint256;\r\n    using WadRayMath for uint256;\r\n\r\n    LendingPoolCore public core;\r\n    LendingPoolAddressesProvider public addressesProvider;\r\n\r\n    /**\r\n    * @dev specifies the health factor threshold at which the user position is liquidated.\r\n    * 1e18 by default, if the health factor drops below 1e18, the loan can be liquidated.\r\n    **/\r\n    uint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1e18;\r\n\r\n    uint256 public constant DATA_PROVIDER_REVISION = 0x1;\r\n\r\n    function getRevision() internal pure returns (uint256) {\r\n        return DATA_PROVIDER_REVISION;\r\n    }\r\n\r\n    function initialize(LendingPoolAddressesProvider _addressesProvider) public initializer {\r\n        addressesProvider = _addressesProvider;\r\n        core = LendingPoolCore(_addressesProvider.getLendingPoolCore());\r\n    }\r\n\r\n    /**\r\n    * @dev struct to hold calculateUserGlobalData() local computations\r\n    **/\r\n    struct UserGlobalDataLocalVars {\r\n        uint256 reserveUnitPrice;\r\n        uint256 tokenUnit;\r\n        uint256 compoundedLiquidityBalance;\r\n        uint256 compoundedBorrowBalance;\r\n        uint256 reserveDecimals;\r\n        uint256 baseLtv;\r\n        uint256 liquidationThreshold;\r\n        uint256 originationFee;\r\n        bool usageAsCollateralEnabled;\r\n        bool userUsesReserveAsCollateral;\r\n        address currentReserve;\r\n    }\r\n\r\n    /**\r\n    * @dev calculates the user data across the reserves.\r\n    * this includes the total liquidity/collateral/borrow balances in ETH,\r\n    * the average Loan To Value, the average Liquidation Ratio, and the Health factor.\r\n    * @param _user the address of the user\r\n    * @return the total liquidity, total collateral, total borrow balances of the user in ETH.\r\n    * also the average Ltv, liquidation threshold, and the health factor\r\n    **/\r\n    function calculateUserGlobalData(address _user)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityBalanceETH,\r\n            uint256 totalCollateralBalanceETH,\r\n            uint256 totalBorrowBalanceETH,\r\n            uint256 totalFeesETH,\r\n            uint256 currentLtv,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 healthFactor,\r\n            bool healthFactorBelowThreshold\r\n        )\r\n    {\r\n        IPriceOracleGetter oracle = IPriceOracleGetter(addressesProvider.getPriceOracle());\r\n\r\n        // Usage of a memory struct of vars to avoid \"Stack too deep\" errors due to local variables\r\n        UserGlobalDataLocalVars memory vars;\r\n\r\n        address[] memory reserves = core.getReserves();\r\n\r\n        for (uint256 i = 0; i < reserves.length; i++) {\r\n            vars.currentReserve = reserves[i];\r\n\r\n            (\r\n                vars.compoundedLiquidityBalance,\r\n                vars.compoundedBorrowBalance,\r\n                vars.originationFee,\r\n                vars.userUsesReserveAsCollateral\r\n            ) = core.getUserBasicReserveData(vars.currentReserve, _user);\r\n\r\n            if (vars.compoundedLiquidityBalance == 0 && vars.compoundedBorrowBalance == 0) {\r\n                continue;\r\n            }\r\n\r\n            //fetch reserve data\r\n            (\r\n                vars.reserveDecimals,\r\n                vars.baseLtv,\r\n                vars.liquidationThreshold,\r\n                vars.usageAsCollateralEnabled\r\n            ) = core.getReserveConfiguration(vars.currentReserve);\r\n\r\n            vars.tokenUnit = 10 ** vars.reserveDecimals;\r\n            vars.reserveUnitPrice = oracle.getAssetPrice(vars.currentReserve);\r\n\r\n            //liquidity and collateral balance\r\n            if (vars.compoundedLiquidityBalance > 0) {\r\n                uint256 liquidityBalanceETH = vars\r\n                    .reserveUnitPrice\r\n                    .mul(vars.compoundedLiquidityBalance)\r\n                    .div(vars.tokenUnit);\r\n                totalLiquidityBalanceETH = totalLiquidityBalanceETH.add(liquidityBalanceETH);\r\n\r\n                if (vars.usageAsCollateralEnabled && vars.userUsesReserveAsCollateral) {\r\n                    totalCollateralBalanceETH = totalCollateralBalanceETH.add(liquidityBalanceETH);\r\n                    currentLtv = currentLtv.add(liquidityBalanceETH.mul(vars.baseLtv));\r\n                    currentLiquidationThreshold = currentLiquidationThreshold.add(\r\n                        liquidityBalanceETH.mul(vars.liquidationThreshold)\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (vars.compoundedBorrowBalance > 0) {\r\n                totalBorrowBalanceETH = totalBorrowBalanceETH.add(\r\n                    vars.reserveUnitPrice.mul(vars.compoundedBorrowBalance).div(vars.tokenUnit)\r\n                );\r\n                totalFeesETH = totalFeesETH.add(\r\n                    vars.originationFee.mul(vars.reserveUnitPrice).div(vars.tokenUnit)\r\n                );\r\n            }\r\n        }\r\n\r\n        currentLtv = totalCollateralBalanceETH > 0 ? currentLtv.div(totalCollateralBalanceETH) : 0;\r\n        currentLiquidationThreshold = totalCollateralBalanceETH > 0\r\n            ? currentLiquidationThreshold.div(totalCollateralBalanceETH)\r\n            : 0;\r\n\r\n        healthFactor = calculateHealthFactorFromBalancesInternal(\r\n            totalCollateralBalanceETH,\r\n            totalBorrowBalanceETH,\r\n            totalFeesETH,\r\n            currentLiquidationThreshold\r\n        );\r\n        healthFactorBelowThreshold = healthFactor < HEALTH_FACTOR_LIQUIDATION_THRESHOLD;\r\n\r\n    }\r\n\r\n    struct balanceDecreaseAllowedLocalVars {\r\n        uint256 decimals;\r\n        uint256 collateralBalanceETH;\r\n        uint256 borrowBalanceETH;\r\n        uint256 totalFeesETH;\r\n        uint256 currentLiquidationThreshold;\r\n        uint256 reserveLiquidationThreshold;\r\n        uint256 amountToDecreaseETH;\r\n        uint256 collateralBalancefterDecrease;\r\n        uint256 liquidationThresholdAfterDecrease;\r\n        uint256 healthFactorAfterDecrease;\r\n        bool reserveUsageAsCollateralEnabled;\r\n    }\r\n\r\n    /**\r\n    * @dev check if a specific balance decrease is allowed (i.e. doesn't bring the user borrow position health factor under 1e18)\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user\r\n    * @param _amount the amount to decrease\r\n    * @return true if the decrease of the balance is allowed\r\n    **/\r\n\r\n    function balanceDecreaseAllowed(address _reserve, address _user, uint256 _amount)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        // Usage of a memory struct of vars to avoid \"Stack too deep\" errors due to local variables\r\n        balanceDecreaseAllowedLocalVars memory vars;\r\n\r\n        (\r\n            vars.decimals,\r\n            ,\r\n            vars.reserveLiquidationThreshold,\r\n            vars.reserveUsageAsCollateralEnabled\r\n        ) = core.getReserveConfiguration(_reserve);\r\n\r\n        if (\r\n            !vars.reserveUsageAsCollateralEnabled ||\r\n            !core.isUserUseReserveAsCollateralEnabled(_reserve, _user)\r\n        ) {\r\n            return true; //if reserve is not used as collateral, no reasons to block the transfer\r\n        }\r\n\r\n        (\r\n            ,\r\n            vars.collateralBalanceETH,\r\n            vars.borrowBalanceETH,\r\n            vars.totalFeesETH,\r\n            ,\r\n            vars.currentLiquidationThreshold,\r\n            ,\r\n\r\n        ) = calculateUserGlobalData(_user);\r\n\r\n        if (vars.borrowBalanceETH == 0) {\r\n            return true; //no borrows - no reasons to block the transfer\r\n        }\r\n\r\n        IPriceOracleGetter oracle = IPriceOracleGetter(addressesProvider.getPriceOracle());\r\n\r\n        vars.amountToDecreaseETH = oracle.getAssetPrice(_reserve).mul(_amount).div(\r\n            10 ** vars.decimals\r\n        );\r\n\r\n        vars.collateralBalancefterDecrease = vars.collateralBalanceETH.sub(\r\n            vars.amountToDecreaseETH\r\n        );\r\n\r\n        //if there is a borrow, there can't be 0 collateral\r\n        if (vars.collateralBalancefterDecrease == 0) {\r\n            return false;\r\n        }\r\n\r\n        vars.liquidationThresholdAfterDecrease = vars\r\n            .collateralBalanceETH\r\n            .mul(vars.currentLiquidationThreshold)\r\n            .sub(vars.amountToDecreaseETH.mul(vars.reserveLiquidationThreshold))\r\n            .div(vars.collateralBalancefterDecrease);\r\n\r\n        uint256 healthFactorAfterDecrease = calculateHealthFactorFromBalancesInternal(\r\n            vars.collateralBalancefterDecrease,\r\n            vars.borrowBalanceETH,\r\n            vars.totalFeesETH,\r\n            vars.liquidationThresholdAfterDecrease\r\n        );\r\n\r\n        return healthFactorAfterDecrease > HEALTH_FACTOR_LIQUIDATION_THRESHOLD;\r\n\r\n    }\r\n\r\n    /**\r\n   * @notice calculates the amount of collateral needed in ETH to cover a new borrow.\r\n   * @param _reserve the reserve from which the user wants to borrow\r\n   * @param _amount the amount the user wants to borrow\r\n   * @param _fee the fee for the amount that the user needs to cover\r\n   * @param _userCurrentBorrowBalanceTH the current borrow balance of the user (before the borrow)\r\n   * @param _userCurrentLtv the average ltv of the user given his current collateral\r\n   * @return the total amount of collateral in ETH to cover the current borrow balance + the new amount + fee\r\n   **/\r\n    function calculateCollateralNeededInETH(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _fee,\r\n        uint256 _userCurrentBorrowBalanceTH,\r\n        uint256 _userCurrentFeesETH,\r\n        uint256 _userCurrentLtv\r\n    ) external view returns (uint256) {\r\n        uint256 reserveDecimals = core.getReserveDecimals(_reserve);\r\n\r\n        IPriceOracleGetter oracle = IPriceOracleGetter(addressesProvider.getPriceOracle());\r\n\r\n        uint256 requestedBorrowAmountETH = oracle\r\n            .getAssetPrice(_reserve)\r\n            .mul(_amount.add(_fee))\r\n            .div(10 ** reserveDecimals); //price is in ether\r\n\r\n        //add the current already borrowed amount to the amount requested to calculate the total collateral needed.\r\n        uint256 collateralNeededInETH = _userCurrentBorrowBalanceTH\r\n            .add(_userCurrentFeesETH)\r\n            .add(requestedBorrowAmountETH)\r\n            .mul(100)\r\n            .div(_userCurrentLtv); //LTV is calculated in percentage\r\n\r\n        return collateralNeededInETH;\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev calculates the equivalent amount in ETH that an user can borrow, depending on the available collateral and the\r\n    * average Loan To Value.\r\n    * @param collateralBalanceETH the total collateral balance\r\n    * @param borrowBalanceETH the total borrow balance\r\n    * @param totalFeesETH the total fees\r\n    * @param ltv the average loan to value\r\n    * @return the amount available to borrow in ETH for the user\r\n    **/\r\n\r\n    function calculateAvailableBorrowsETHInternal(\r\n        uint256 collateralBalanceETH,\r\n        uint256 borrowBalanceETH,\r\n        uint256 totalFeesETH,\r\n        uint256 ltv\r\n    ) internal view returns (uint256) {\r\n        uint256 availableBorrowsETH = collateralBalanceETH.mul(ltv).div(100); //ltv is in percentage\r\n\r\n        if (availableBorrowsETH < borrowBalanceETH) {\r\n            return 0;\r\n        }\r\n\r\n        availableBorrowsETH = availableBorrowsETH.sub(borrowBalanceETH.add(totalFeesETH));\r\n        //calculate fee\r\n        uint256 borrowFee = IFeeProvider(addressesProvider.getFeeProvider())\r\n            .calculateLoanOriginationFee(msg.sender, availableBorrowsETH);\r\n        return availableBorrowsETH.sub(borrowFee);\r\n    }\r\n\r\n    /**\r\n    * @dev calculates the health factor from the corresponding balances\r\n    * @param collateralBalanceETH the total collateral balance in ETH\r\n    * @param borrowBalanceETH the total borrow balance in ETH\r\n    * @param totalFeesETH the total fees in ETH\r\n    * @param liquidationThreshold the avg liquidation threshold\r\n    **/\r\n    function calculateHealthFactorFromBalancesInternal(\r\n        uint256 collateralBalanceETH,\r\n        uint256 borrowBalanceETH,\r\n        uint256 totalFeesETH,\r\n        uint256 liquidationThreshold\r\n    ) internal pure returns (uint256) {\r\n        if (borrowBalanceETH == 0) return uint256(-1);\r\n\r\n        return\r\n            (collateralBalanceETH.mul(liquidationThreshold).div(100)).wadDiv(\r\n                borrowBalanceETH.add(totalFeesETH)\r\n            );\r\n    }\r\n\r\n    /**\r\n    * @dev returns the health factor liquidation threshold\r\n    **/\r\n    function getHealthFactorLiquidationThreshold() public pure returns (uint256) {\r\n        return HEALTH_FACTOR_LIQUIDATION_THRESHOLD;\r\n    }\r\n\r\n    /**\r\n    * @dev accessory functions to fetch data from the lendingPoolCore\r\n    **/\r\n    function getReserveConfigurationData(address _reserve)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 ltv,\r\n            uint256 liquidationThreshold,\r\n            uint256 liquidationBonus,\r\n            address rateStrategyAddress,\r\n            bool usageAsCollateralEnabled,\r\n            bool borrowingEnabled,\r\n            bool stableBorrowRateEnabled,\r\n            bool isActive\r\n        )\r\n    {\r\n        (, ltv, liquidationThreshold, usageAsCollateralEnabled) = core.getReserveConfiguration(\r\n            _reserve\r\n        );\r\n        stableBorrowRateEnabled = core.getReserveIsStableBorrowRateEnabled(_reserve);\r\n        borrowingEnabled = core.isReserveBorrowingEnabled(_reserve);\r\n        isActive = core.getReserveIsActive(_reserve);\r\n        liquidationBonus = core.getReserveLiquidationBonus(_reserve);\r\n\r\n        rateStrategyAddress = core.getReserveInterestRateStrategyAddress(_reserve);\r\n    }\r\n\r\n    function getReserveData(address _reserve)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalLiquidity,\r\n            uint256 availableLiquidity,\r\n            uint256 totalBorrowsStable,\r\n            uint256 totalBorrowsVariable,\r\n            uint256 liquidityRate,\r\n            uint256 variableBorrowRate,\r\n            uint256 stableBorrowRate,\r\n            uint256 averageStableBorrowRate,\r\n            uint256 utilizationRate,\r\n            uint256 liquidityIndex,\r\n            uint256 variableBorrowIndex,\r\n            address aTokenAddress,\r\n            uint40 lastUpdateTimestamp\r\n        )\r\n    {\r\n        totalLiquidity = core.getReserveTotalLiquidity(_reserve);\r\n        availableLiquidity = core.getReserveAvailableLiquidity(_reserve);\r\n        totalBorrowsStable = core.getReserveTotalBorrowsStable(_reserve);\r\n        totalBorrowsVariable = core.getReserveTotalBorrowsVariable(_reserve);\r\n        liquidityRate = core.getReserveCurrentLiquidityRate(_reserve);\r\n        variableBorrowRate = core.getReserveCurrentVariableBorrowRate(_reserve);\r\n        stableBorrowRate = core.getReserveCurrentStableBorrowRate(_reserve);\r\n        averageStableBorrowRate = core.getReserveCurrentAverageStableBorrowRate(_reserve);\r\n        utilizationRate = core.getReserveUtilizationRate(_reserve);\r\n        liquidityIndex = core.getReserveLiquidityCumulativeIndex(_reserve);\r\n        variableBorrowIndex = core.getReserveVariableBorrowsCumulativeIndex(_reserve);\r\n        aTokenAddress = core.getReserveATokenAddress(_reserve);\r\n        lastUpdateTimestamp = core.getReserveLastUpdate(_reserve);\r\n    }\r\n\r\n    function getUserAccountData(address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityETH,\r\n            uint256 totalCollateralETH,\r\n            uint256 totalBorrowsETH,\r\n            uint256 totalFeesETH,\r\n            uint256 availableBorrowsETH,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 ltv,\r\n            uint256 healthFactor\r\n        )\r\n    {\r\n        (\r\n            totalLiquidityETH,\r\n            totalCollateralETH,\r\n            totalBorrowsETH,\r\n            totalFeesETH,\r\n            ltv,\r\n            currentLiquidationThreshold,\r\n            healthFactor,\r\n\r\n        ) = calculateUserGlobalData(_user);\r\n\r\n        availableBorrowsETH = calculateAvailableBorrowsETHInternal(\r\n            totalCollateralETH,\r\n            totalBorrowsETH,\r\n            totalFeesETH,\r\n            ltv\r\n        );\r\n    }\r\n\r\n    function getUserReserveData(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 currentATokenBalance,\r\n            uint256 currentBorrowBalance,\r\n            uint256 principalBorrowBalance,\r\n            uint256 borrowRateMode,\r\n            uint256 borrowRate,\r\n            uint256 liquidityRate,\r\n            uint256 originationFee,\r\n            uint256 variableBorrowIndex,\r\n            uint256 lastUpdateTimestamp,\r\n            bool usageAsCollateralEnabled\r\n        )\r\n    {\r\n        currentATokenBalance = AToken(core.getReserveATokenAddress(_reserve)).balanceOf(_user);\r\n        CoreLibrary.InterestRateMode mode = core.getUserCurrentBorrowRateMode(_reserve, _user);\r\n        (principalBorrowBalance, currentBorrowBalance, ) = core.getUserBorrowBalances(\r\n            _reserve,\r\n            _user\r\n        );\r\n\r\n        //default is 0, if mode == CoreLibrary.InterestRateMode.NONE\r\n        if (mode == CoreLibrary.InterestRateMode.STABLE) {\r\n            borrowRate = core.getUserCurrentStableBorrowRate(_reserve, _user);\r\n        } else if (mode == CoreLibrary.InterestRateMode.VARIABLE) {\r\n            borrowRate = core.getReserveCurrentVariableBorrowRate(_reserve);\r\n        }\r\n\r\n        borrowRateMode = uint256(mode);\r\n        liquidityRate = core.getReserveCurrentLiquidityRate(_reserve);\r\n        originationFee = core.getUserOriginationFee(_reserve, _user);\r\n        variableBorrowIndex = core.getUserVariableBorrowCumulativeIndex(_reserve, _user);\r\n        lastUpdateTimestamp = core.getUserLastUpdate(_reserve, _user);\r\n        usageAsCollateralEnabled = core.isUserUseReserveAsCollateralEnabled(_reserve, _user);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Aave ERC20 AToken\r\n *\r\n * @dev Implementation of the interest bearing token for the DLP protocol.\r\n * @author Aave\r\n */\r\ncontract AToken is ERC20, ERC20Detailed {\r\n    using WadRayMath for uint256;\r\n\r\n    uint256 public constant UINT_MAX_VALUE = uint256(-1);\r\n\r\n    /**\r\n    * @dev emitted after the redeem action\r\n    * @param _from the address performing the redeem\r\n    * @param _value the amount to be redeemed\r\n    * @param _fromBalanceIncrease the cumulated balance since the last update of the user\r\n    * @param _fromIndex the last index of the user\r\n    **/\r\n    event Redeem(\r\n        address indexed _from,\r\n        uint256 _value,\r\n        uint256 _fromBalanceIncrease,\r\n        uint256 _fromIndex\r\n    );\r\n\r\n    /**\r\n    * @dev emitted after the mint action\r\n    * @param _from the address performing the mint\r\n    * @param _value the amount to be minted\r\n    * @param _fromBalanceIncrease the cumulated balance since the last update of the user\r\n    * @param _fromIndex the last index of the user\r\n    **/\r\n    event MintOnDeposit(\r\n        address indexed _from,\r\n        uint256 _value,\r\n        uint256 _fromBalanceIncrease,\r\n        uint256 _fromIndex\r\n    );\r\n\r\n    /**\r\n    * @dev emitted during the liquidation action, when the liquidator reclaims the underlying\r\n    * asset\r\n    * @param _from the address from which the tokens are being burned\r\n    * @param _value the amount to be burned\r\n    * @param _fromBalanceIncrease the cumulated balance since the last update of the user\r\n    * @param _fromIndex the last index of the user\r\n    **/\r\n    event BurnOnLiquidation(\r\n        address indexed _from,\r\n        uint256 _value,\r\n        uint256 _fromBalanceIncrease,\r\n        uint256 _fromIndex\r\n    );\r\n\r\n    /**\r\n    * @dev emitted during the transfer action\r\n    * @param _from the address from which the tokens are being transferred\r\n    * @param _to the adress of the destination\r\n    * @param _value the amount to be minted\r\n    * @param _fromBalanceIncrease the cumulated balance since the last update of the user\r\n    * @param _toBalanceIncrease the cumulated balance since the last update of the destination\r\n    * @param _fromIndex the last index of the user\r\n    * @param _toIndex the last index of the liquidator\r\n    **/\r\n    event BalanceTransfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value,\r\n        uint256 _fromBalanceIncrease,\r\n        uint256 _toBalanceIncrease,\r\n        uint256 _fromIndex,\r\n        uint256 _toIndex\r\n    );\r\n\r\n    /**\r\n    * @dev emitted when the accumulation of the interest\r\n    * by an user is redirected to another user\r\n    * @param _from the address from which the interest is being redirected\r\n    * @param _to the adress of the destination\r\n    * @param _fromBalanceIncrease the cumulated balance since the last update of the user\r\n    * @param _fromIndex the last index of the user\r\n    **/\r\n    event InterestStreamRedirected(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _redirectedBalance,\r\n        uint256 _fromBalanceIncrease,\r\n        uint256 _fromIndex\r\n    );\r\n\r\n    /**\r\n    * @dev emitted when the redirected balance of an user is being updated\r\n    * @param _targetAddress the address of which the balance is being updated\r\n    * @param _targetBalanceIncrease the cumulated balance since the last update of the target\r\n    * @param _targetIndex the last index of the user\r\n    * @param _redirectedBalanceAdded the redirected balance being added\r\n    * @param _redirectedBalanceRemoved the redirected balance being removed\r\n    **/\r\n    event RedirectedBalanceUpdated(\r\n        address indexed _targetAddress,\r\n        uint256 _targetBalanceIncrease,\r\n        uint256 _targetIndex,\r\n        uint256 _redirectedBalanceAdded,\r\n        uint256 _redirectedBalanceRemoved\r\n    );\r\n\r\n    event InterestRedirectionAllowanceChanged(\r\n        address indexed _from,\r\n        address indexed _to\r\n    );\r\n\r\n    address public underlyingAssetAddress;\r\n\r\n    mapping (address => uint256) private userIndexes;\r\n    mapping (address => address) private interestRedirectionAddresses;\r\n    mapping (address => uint256) private redirectedBalances;\r\n    mapping (address => address) private interestRedirectionAllowances;\r\n\r\n    LendingPoolAddressesProvider private addressesProvider;\r\n    LendingPoolCore private core;\r\n    LendingPool private pool;\r\n    LendingPoolDataProvider private dataProvider;\r\n\r\n    modifier onlyLendingPool {\r\n        require(\r\n            msg.sender == address(pool),\r\n            \"The caller of this function must be a lending pool\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier whenTransferAllowed(address _from, uint256 _amount) {\r\n        require(isTransferAllowed(_from, _amount), \"Transfer cannot be allowed.\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        LendingPoolAddressesProvider _addressesProvider,\r\n        address _underlyingAsset,\r\n        uint8 _underlyingAssetDecimals,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) public ERC20Detailed(_name, _symbol, _underlyingAssetDecimals) {\r\n\r\n        addressesProvider = _addressesProvider;\r\n        core = LendingPoolCore(addressesProvider.getLendingPoolCore());\r\n        pool = LendingPool(addressesProvider.getLendingPool());\r\n        dataProvider = LendingPoolDataProvider(addressesProvider.getLendingPoolDataProvider());\r\n        underlyingAssetAddress = _underlyingAsset;\r\n    }\r\n\r\n    /**\r\n     * @notice ERC20 implementation internal function backing transfer() and transferFrom()\r\n     * @dev validates the transfer before allowing it. NOTE: This is not standard ERC20 behavior\r\n     **/\r\n    function _transfer(address _from, address _to, uint256 _amount) internal whenTransferAllowed(_from, _amount) {\r\n\r\n        executeTransferInternal(_from, _to, _amount);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev redirects the interest generated to a target address.\r\n    * when the interest is redirected, the user balance is added to\r\n    * the recepient redirected balance.\r\n    * @param _to the address to which the interest will be redirected\r\n    **/\r\n    function redirectInterestStream(address _to) external {\r\n        redirectInterestStreamInternal(msg.sender, _to);\r\n    }\r\n\r\n    /**\r\n    * @dev redirects the interest generated by _from to a target address.\r\n    * when the interest is redirected, the user balance is added to\r\n    * the recepient redirected balance. The caller needs to have allowance on\r\n    * the interest redirection to be able to execute the function.\r\n    * @param _from the address of the user whom interest is being redirected\r\n    * @param _to the address to which the interest will be redirected\r\n    **/\r\n    function redirectInterestStreamOf(address _from, address _to) external {\r\n        require(\r\n            msg.sender == interestRedirectionAllowances[_from],\r\n            \"Caller is not allowed to redirect the interest of the user\"\r\n        );\r\n        redirectInterestStreamInternal(_from,_to);\r\n    }\r\n\r\n    /**\r\n    * @dev gives allowance to an address to execute the interest redirection\r\n    * on behalf of the caller.\r\n    * @param _to the address to which the interest will be redirected. Pass address(0) to reset\r\n    * the allowance.\r\n    **/\r\n    function allowInterestRedirectionTo(address _to) external {\r\n        require(_to != msg.sender, \"User cannot give allowance to himself\");\r\n        interestRedirectionAllowances[msg.sender] = _to;\r\n        emit InterestRedirectionAllowanceChanged(\r\n            msg.sender,\r\n            _to\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev redeems aToken for the underlying asset\r\n    * @param _amount the amount being redeemed\r\n    **/\r\n    function redeem(uint256 _amount) external {\r\n\r\n        require(_amount > 0, \"Amount to redeem needs to be > 0\");\r\n\r\n        //cumulates the balance of the user\r\n        (,\r\n        uint256 currentBalance,\r\n        uint256 balanceIncrease,\r\n        uint256 index) = cumulateBalanceInternal(msg.sender);\r\n\r\n        uint256 amountToRedeem = _amount;\r\n\r\n        //if amount is equal to uint(-1), the user wants to redeem everything\r\n        if(_amount == UINT_MAX_VALUE){\r\n            amountToRedeem = currentBalance;\r\n        }\r\n\r\n        require(amountToRedeem <= currentBalance, \"User cannot redeem more than the available balance\");\r\n\r\n        //check that the user is allowed to redeem the amount\r\n        require(isTransferAllowed(msg.sender, amountToRedeem), \"Transfer cannot be allowed.\");\r\n\r\n        //if the user is redirecting his interest towards someone else,\r\n        //we update the redirected balance of the redirection address by adding the accrued interest,\r\n        //and removing the amount to redeem\r\n        updateRedirectedBalanceOfRedirectionAddressInternal(msg.sender, balanceIncrease, amountToRedeem);\r\n\r\n        // burns tokens equivalent to the amount requested\r\n        _burn(msg.sender, amountToRedeem);\r\n\r\n        bool userIndexReset = false;\r\n        //reset the user data if the remaining balance is 0\r\n        if(currentBalance.sub(amountToRedeem) == 0){\r\n            userIndexReset = resetDataOnZeroBalanceInternal(msg.sender);\r\n        }\r\n\r\n        // executes redeem of the underlying asset\r\n        pool.redeemUnderlying(\r\n            underlyingAssetAddress,\r\n            msg.sender,\r\n            amountToRedeem,\r\n            currentBalance.sub(amountToRedeem)\r\n        );\r\n\r\n        emit Redeem(msg.sender, amountToRedeem, balanceIncrease, userIndexReset ? 0 : index);\r\n    }\r\n\r\n    /**\r\n     * @dev mints token in the event of users depositing the underlying asset into the lending pool\r\n     * only lending pools can call this function\r\n     * @param _account the address receiving the minted tokens\r\n     * @param _amount the amount of tokens to mint\r\n     */\r\n    function mintOnDeposit(address _account, uint256 _amount) external onlyLendingPool {\r\n\r\n        //cumulates the balance of the user\r\n        (,\r\n        ,\r\n        uint256 balanceIncrease,\r\n        uint256 index) = cumulateBalanceInternal(_account);\r\n\r\n         //if the user is redirecting his interest towards someone else,\r\n        //we update the redirected balance of the redirection address by adding the accrued interest\r\n        //and the amount deposited\r\n        updateRedirectedBalanceOfRedirectionAddressInternal(_account, balanceIncrease.add(_amount), 0);\r\n\r\n        //mint an equivalent amount of tokens to cover the new deposit\r\n        _mint(_account, _amount);\r\n\r\n        emit MintOnDeposit(_account, _amount, balanceIncrease, index);\r\n    }\r\n\r\n    /**\r\n     * @dev burns token in the event of a borrow being liquidated, in case the liquidators reclaims the underlying asset\r\n     * Transfer of the liquidated asset is executed by the lending pool contract.\r\n     * only lending pools can call this function\r\n     * @param _account the address from which burn the aTokens\r\n     * @param _value the amount to burn\r\n     **/\r\n    function burnOnLiquidation(address _account, uint256 _value) external onlyLendingPool {\r\n\r\n        //cumulates the balance of the user being liquidated\r\n        (,uint256 accountBalance,uint256 balanceIncrease,uint256 index) = cumulateBalanceInternal(_account);\r\n\r\n        //adds the accrued interest and substracts the burned amount to\r\n        //the redirected balance\r\n        updateRedirectedBalanceOfRedirectionAddressInternal(_account, balanceIncrease, _value);\r\n\r\n        //burns the requested amount of tokens\r\n        _burn(_account, _value);\r\n\r\n        bool userIndexReset = false;\r\n        //reset the user data if the remaining balance is 0\r\n        if(accountBalance.sub(_value) == 0){\r\n            userIndexReset = resetDataOnZeroBalanceInternal(_account);\r\n        }\r\n\r\n        emit BurnOnLiquidation(_account, _value, balanceIncrease, userIndexReset ? 0 : index);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers tokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\r\n     *      only lending pools can call this function\r\n     * @param _from the address from which transfer the aTokens\r\n     * @param _to the destination address\r\n     * @param _value the amount to transfer\r\n     **/\r\n    function transferOnLiquidation(address _from, address _to, uint256 _value) external onlyLendingPool {\r\n\r\n        //being a normal transfer, the Transfer() and BalanceTransfer() are emitted\r\n        //so no need to emit a specific event here\r\n        executeTransferInternal(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev calculates the balance of the user, which is the\r\n    * principal balance + interest generated by the principal balance + interest generated by the redirected balance\r\n    * @param _user the user for which the balance is being calculated\r\n    * @return the total balance of the user\r\n    **/\r\n    function balanceOf(address _user) public view returns(uint256) {\r\n\r\n        //current principal balance of the user\r\n        uint256 currentPrincipalBalance = super.balanceOf(_user);\r\n        //balance redirected by other users to _user for interest rate accrual\r\n        uint256 redirectedBalance = redirectedBalances[_user];\r\n\r\n        if(currentPrincipalBalance == 0 && redirectedBalance == 0){\r\n            return 0;\r\n        }\r\n        //if the _user is not redirecting the interest to anybody, accrues\r\n        //the interest for himself\r\n\r\n        if(interestRedirectionAddresses[_user] == address(0)){\r\n\r\n            //accruing for himself means that both the principal balance and\r\n            //the redirected balance partecipate in the interest\r\n            return calculateCumulatedBalanceInternal(\r\n                _user,\r\n                currentPrincipalBalance.add(redirectedBalance)\r\n                )\r\n                .sub(redirectedBalance);\r\n        }\r\n        else {\r\n            //if the user redirected the interest, then only the redirected\r\n            //balance generates interest. In that case, the interest generated\r\n            //by the redirected balance is added to the current principal balance.\r\n            return currentPrincipalBalance.add(\r\n                calculateCumulatedBalanceInternal(\r\n                    _user,\r\n                    redirectedBalance\r\n                )\r\n                .sub(redirectedBalance)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev returns the principal balance of the user. The principal balance is the last\r\n    * updated stored balance, which does not consider the perpetually accruing interest.\r\n    * @param _user the address of the user\r\n    * @return the principal balance of the user\r\n    **/\r\n    function principalBalanceOf(address _user) external view returns(uint256) {\r\n        return super.balanceOf(_user);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev calculates the total supply of the specific aToken\r\n    * since the balance of every single user increases over time, the total supply\r\n    * does that too.\r\n    * @return the current total supply\r\n    **/\r\n    function totalSupply() public view returns(uint256) {\r\n\r\n        uint256 currentSupplyPrincipal = super.totalSupply();\r\n\r\n        if(currentSupplyPrincipal == 0){\r\n            return 0;\r\n        }\r\n\r\n        return currentSupplyPrincipal\r\n            .wadToRay()\r\n            .rayMul(core.getReserveNormalizedIncome(underlyingAssetAddress))\r\n            .rayToWad();\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Used to validate transfers before actually executing them.\r\n     * @param _user address of the user to check\r\n     * @param _amount the amount to check\r\n     * @return true if the _user can transfer _amount, false otherwise\r\n     **/\r\n    function isTransferAllowed(address _user, uint256 _amount) public view returns (bool) {\r\n        return dataProvider.balanceDecreaseAllowed(underlyingAssetAddress, _user, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the last index of the user, used to calculate the balance of the user\r\n    * @param _user address of the user\r\n    * @return the last user index\r\n    **/\r\n    function getUserIndex(address _user) external view returns(uint256) {\r\n        return userIndexes[_user];\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev returns the address to which the interest is redirected\r\n    * @param _user address of the user\r\n    * @return 0 if there is no redirection, an address otherwise\r\n    **/\r\n    function getInterestRedirectionAddress(address _user) external view returns(address) {\r\n        return interestRedirectionAddresses[_user];\r\n    }\r\n\r\n    /**\r\n    * @dev returns the redirected balance of the user. The redirected balance is the balance\r\n    * redirected by other accounts to the user, that is accrueing interest for him.\r\n    * @param _user address of the user\r\n    * @return the total redirected balance\r\n    **/\r\n    function getRedirectedBalance(address _user) external view returns(uint256) {\r\n        return redirectedBalances[_user];\r\n    }\r\n\r\n    /**\r\n    * @dev accumulates the accrued interest of the user to the principal balance\r\n    * @param _user the address of the user for which the interest is being accumulated\r\n    * @return the previous principal balance, the new principal balance, the balance increase\r\n    * and the new user index\r\n    **/\r\n    function cumulateBalanceInternal(address _user)\r\n        internal\r\n        returns(uint256, uint256, uint256, uint256) {\r\n\r\n        uint256 previousPrincipalBalance = super.balanceOf(_user);\r\n\r\n        //calculate the accrued interest since the last accumulation\r\n        uint256 balanceIncrease = balanceOf(_user).sub(previousPrincipalBalance);\r\n        //mints an amount of tokens equivalent to the amount accumulated\r\n        _mint(_user, balanceIncrease);\r\n        //updates the user index\r\n        uint256 index = userIndexes[_user] = core.getReserveNormalizedIncome(underlyingAssetAddress);\r\n        return (\r\n            previousPrincipalBalance,\r\n            previousPrincipalBalance.add(balanceIncrease),\r\n            balanceIncrease,\r\n            index\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev updates the redirected balance of the user. If the user is not redirecting his\r\n    * interest, nothing is executed.\r\n    * @param _user the address of the user for which the interest is being accumulated\r\n    * @param _balanceToAdd the amount to add to the redirected balance\r\n    * @param _balanceToRemove the amount to remove from the redirected balance\r\n    **/\r\n    function updateRedirectedBalanceOfRedirectionAddressInternal(\r\n        address _user,\r\n        uint256 _balanceToAdd,\r\n        uint256 _balanceToRemove\r\n    ) internal {\r\n\r\n        address redirectionAddress = interestRedirectionAddresses[_user];\r\n        //if there isn't any redirection, nothing to be done\r\n        if(redirectionAddress == address(0)){\r\n            return;\r\n        }\r\n\r\n        //compound balances of the redirected address\r\n        (,,uint256 balanceIncrease, uint256 index) = cumulateBalanceInternal(redirectionAddress);\r\n\r\n        //updating the redirected balance\r\n        redirectedBalances[redirectionAddress] = redirectedBalances[redirectionAddress]\r\n            .add(_balanceToAdd)\r\n            .sub(_balanceToRemove);\r\n\r\n        //if the interest of redirectionAddress is also being redirected, we need to update\r\n        //the redirected balance of the redirection target by adding the balance increase\r\n        address targetOfRedirectionAddress = interestRedirectionAddresses[redirectionAddress];\r\n\r\n        if(targetOfRedirectionAddress != address(0)){\r\n            redirectedBalances[targetOfRedirectionAddress] = redirectedBalances[targetOfRedirectionAddress].add(balanceIncrease);\r\n        }\r\n\r\n        emit RedirectedBalanceUpdated(\r\n            redirectionAddress,\r\n            balanceIncrease,\r\n            index,\r\n            _balanceToAdd,\r\n            _balanceToRemove\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev calculate the interest accrued by _user on a specific balance\r\n    * @param _user the address of the user for which the interest is being accumulated\r\n    * @param _balance the balance on which the interest is calculated\r\n    * @return the interest rate accrued\r\n    **/\r\n    function calculateCumulatedBalanceInternal(\r\n        address _user,\r\n        uint256 _balance\r\n    ) internal view returns (uint256) {\r\n        return _balance\r\n            .wadToRay()\r\n            .rayMul(core.getReserveNormalizedIncome(underlyingAssetAddress))\r\n            .rayDiv(userIndexes[_user])\r\n            .rayToWad();\r\n    }\r\n\r\n    /**\r\n    * @dev executes the transfer of aTokens, invoked by both _transfer() and\r\n    *      transferOnLiquidation()\r\n    * @param _from the address from which transfer the aTokens\r\n    * @param _to the destination address\r\n    * @param _value the amount to transfer\r\n    **/\r\n    function executeTransferInternal(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal {\r\n\r\n        require(_value > 0, \"Transferred amount needs to be greater than zero\");\r\n\r\n        //cumulate the balance of the sender\r\n        (,\r\n        uint256 fromBalance,\r\n        uint256 fromBalanceIncrease,\r\n        uint256 fromIndex\r\n        ) = cumulateBalanceInternal(_from);\r\n\r\n        //cumulate the balance of the receiver\r\n        (,\r\n        ,\r\n        uint256 toBalanceIncrease,\r\n        uint256 toIndex\r\n        ) = cumulateBalanceInternal(_to);\r\n\r\n        //if the sender is redirecting his interest towards someone else,\r\n        //adds to the redirected balance the accrued interest and removes the amount\r\n        //being transferred\r\n        updateRedirectedBalanceOfRedirectionAddressInternal(_from, fromBalanceIncrease, _value);\r\n\r\n        //if the receiver is redirecting his interest towards someone else,\r\n        //adds to the redirected balance the accrued interest and the amount\r\n        //being transferred\r\n        updateRedirectedBalanceOfRedirectionAddressInternal(_to, toBalanceIncrease.add(_value), 0);\r\n\r\n        //performs the transfer\r\n        super._transfer(_from, _to, _value);\r\n\r\n        bool fromIndexReset = false;\r\n        //reset the user data if the remaining balance is 0\r\n        if(fromBalance.sub(_value) == 0){\r\n            fromIndexReset = resetDataOnZeroBalanceInternal(_from);\r\n        }\r\n\r\n        emit BalanceTransfer(\r\n            _from,\r\n            _to,\r\n            _value,\r\n            fromBalanceIncrease,\r\n            toBalanceIncrease,\r\n            fromIndexReset ? 0 : fromIndex,\r\n            toIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev executes the redirection of the interest from one address to another.\r\n    * immediately after redirection, the destination address will start to accrue interest.\r\n    * @param _from the address from which transfer the aTokens\r\n    * @param _to the destination address\r\n    **/\r\n    function redirectInterestStreamInternal(\r\n        address _from,\r\n        address _to\r\n    ) internal {\r\n\r\n        address currentRedirectionAddress = interestRedirectionAddresses[_from];\r\n\r\n        require(_to != currentRedirectionAddress, \"Interest is already redirected to the user\");\r\n\r\n        //accumulates the accrued interest to the principal\r\n        (uint256 previousPrincipalBalance,\r\n        uint256 fromBalance,\r\n        uint256 balanceIncrease,\r\n        uint256 fromIndex) = cumulateBalanceInternal(_from);\r\n\r\n        require(fromBalance > 0, \"Interest stream can only be redirected if there is a valid balance\");\r\n\r\n        //if the user is already redirecting the interest to someone, before changing\r\n        //the redirection address we substract the redirected balance of the previous\r\n        //recipient\r\n        if(currentRedirectionAddress != address(0)){\r\n            updateRedirectedBalanceOfRedirectionAddressInternal(_from,0, previousPrincipalBalance);\r\n        }\r\n\r\n        //if the user is redirecting the interest back to himself,\r\n        //we simply set to 0 the interest redirection address\r\n        if(_to == _from) {\r\n            interestRedirectionAddresses[_from] = address(0);\r\n            emit InterestStreamRedirected(\r\n                _from,\r\n                address(0),\r\n                fromBalance,\r\n                balanceIncrease,\r\n                fromIndex\r\n            );\r\n            return;\r\n        }\r\n\r\n        //first set the redirection address to the new recipient\r\n        interestRedirectionAddresses[_from] = _to;\r\n\r\n        //adds the user balance to the redirected balance of the destination\r\n        updateRedirectedBalanceOfRedirectionAddressInternal(_from,fromBalance,0);\r\n\r\n        emit InterestStreamRedirected(\r\n            _from,\r\n            _to,\r\n            fromBalance,\r\n            balanceIncrease,\r\n            fromIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev function to reset the interest stream redirection and the user index, if the\r\n    * user has no balance left.\r\n    * @param _user the address of the user\r\n    * @return true if the user index has also been reset, false otherwise. useful to emit the proper user index value\r\n    **/\r\n    function resetDataOnZeroBalanceInternal(address _user) internal returns(bool) {\r\n\r\n        //if the user has 0 principal balance, the interest stream redirection gets reset\r\n        interestRedirectionAddresses[_user] = address(0);\r\n\r\n        //emits a InterestStreamRedirected event to notify that the redirection has been reset\r\n        emit InterestStreamRedirected(_user, address(0),0,0,0);\r\n\r\n        //if the redirected balance is also 0, we clear up the user index\r\n        if(redirectedBalances[_user] == 0){\r\n            userIndexes[_user] = 0;\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n* @title IFlashLoanReceiver interface\r\n* @notice Interface for the Aave fee IFlashLoanReceiver.\r\n* @author Aave\r\n* @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\r\n**/\r\ninterface IFlashLoanReceiver {\r\n\r\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\r\n}\r\n\r\n/**\r\n* @title ILendingRateOracle interface\r\n* @notice Interface for the Aave borrow rate oracle. Provides the average market borrow rate to be used as a base for the stable borrow rate calculations\r\n**/\r\n\r\ninterface ILendingRateOracle {\r\n    /**\r\n    @dev returns the market borrow rate in ray\r\n    **/\r\n    function getMarketBorrowRate(address _asset) external view returns (uint256);\r\n\r\n    /**\r\n    @dev sets the market borrow rate. Rate value must be in ray\r\n    **/\r\n    function setMarketBorrowRate(address _asset, uint256 _rate) external;\r\n}\r\n\r\n/**\r\n@title IReserveInterestRateStrategyInterface interface\r\n@notice Interface for the calculation of the interest rates.\r\n*/\r\n\r\ninterface IReserveInterestRateStrategy {\r\n\r\n    /**\r\n    * @dev returns the base variable borrow rate, in rays\r\n    */\r\n\r\n    function getBaseVariableBorrowRate() external view returns (uint256);\r\n    /**\r\n    * @dev calculates the liquidity, stable, and variable rates depending on the current utilization rate\r\n    *      and the base parameters\r\n    *\r\n    */\r\n    function calculateInterestRates(\r\n        address _reserve,\r\n        uint256 _utilizationRate,\r\n        uint256 _totalBorrowsStable,\r\n        uint256 _totalBorrowsVariable,\r\n        uint256 _averageStableBorrowRate)\r\n    external\r\n    view\r\n    returns (uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate);\r\n}\r\n\r\nlibrary EthAddressLib {\r\n\r\n    /**\r\n    * @dev returns the address used within the protocol to identify ETH\r\n    * @return the address assigned to ETH\r\n     */\r\n    function ethAddress() internal pure returns(address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\n/**\r\n* @title LendingPoolCore contract\r\n* @author Aave\r\n* @notice Holds the state of the lending pool and all the funds deposited\r\n* @dev NOTE: The core does not enforce security checks on the update of the state\r\n* (eg, updateStateOnBorrow() does not enforce that borrowed is enabled on the reserve).\r\n* The check that an action can be performed is a duty of the overlying LendingPool contract.\r\n**/\r\n\r\ncontract LendingPoolCore is VersionedInitializable {\r\n    using SafeMath for uint256;\r\n    using WadRayMath for uint256;\r\n    using CoreLibrary for CoreLibrary.ReserveData;\r\n    using CoreLibrary for CoreLibrary.UserReserveData;\r\n    using SafeERC20 for ERC20;\r\n    using Address for address payable;\r\n\r\n    /**\r\n    * @dev Emitted when the state of a reserve is updated\r\n    * @param reserve the address of the reserve\r\n    * @param liquidityRate the new liquidity rate\r\n    * @param stableBorrowRate the new stable borrow rate\r\n    * @param variableBorrowRate the new variable borrow rate\r\n    * @param liquidityIndex the new liquidity index\r\n    * @param variableBorrowIndex the new variable borrow index\r\n    **/\r\n    event ReserveUpdated(\r\n        address indexed reserve,\r\n        uint256 liquidityRate,\r\n        uint256 stableBorrowRate,\r\n        uint256 variableBorrowRate,\r\n        uint256 liquidityIndex,\r\n        uint256 variableBorrowIndex\r\n    );\r\n\r\n    address public lendingPoolAddress;\r\n\r\n    LendingPoolAddressesProvider public addressesProvider;\r\n\r\n    /**\r\n    * @dev only lending pools can use functions affected by this modifier\r\n    **/\r\n    modifier onlyLendingPool {\r\n        require(lendingPoolAddress == msg.sender, \"The caller must be a lending pool contract\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev only lending pools configurator can use functions affected by this modifier\r\n    **/\r\n    modifier onlyLendingPoolConfigurator {\r\n        require(\r\n            addressesProvider.getLendingPoolConfigurator() == msg.sender,\r\n            \"The caller must be a lending pool configurator contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    mapping(address => CoreLibrary.ReserveData) internal reserves;\r\n    mapping(address => mapping(address => CoreLibrary.UserReserveData)) internal usersReserveData;\r\n\r\n    address[] public reservesList;\r\n\r\n    uint256 public constant CORE_REVISION = 0x4;\r\n\r\n    /**\r\n    * @dev returns the revision number of the contract\r\n    **/\r\n    function getRevision() internal pure returns (uint256) {\r\n        return CORE_REVISION;\r\n    }\r\n\r\n    /**\r\n    * @dev initializes the Core contract, invoked upon registration on the AddressesProvider\r\n    * @param _addressesProvider the addressesProvider contract\r\n    **/\r\n\r\n    function initialize(LendingPoolAddressesProvider _addressesProvider) public initializer {\r\n        addressesProvider = _addressesProvider;\r\n        refreshConfigInternal();\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a result of a deposit action\r\n    * @param _reserve the address of the reserve in which the deposit is happening\r\n    * @param _user the address of the the user depositing\r\n    * @param _amount the amount being deposited\r\n    * @param _isFirstDeposit true if the user is depositing for the first time\r\n    **/\r\n\r\n    function updateStateOnDeposit(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _amount,\r\n        bool _isFirstDeposit\r\n    ) external onlyLendingPool {\r\n        reserves[_reserve].updateCumulativeIndexes();\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, _amount, 0);\r\n\r\n        if (_isFirstDeposit) {\r\n            //if this is the first deposit of the user, we configure the deposit as enabled to be used as collateral\r\n            setUserUseReserveAsCollateral(_reserve, _user, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a result of a redeem action\r\n    * @param _reserve the address of the reserve in which the redeem is happening\r\n    * @param _user the address of the the user redeeming\r\n    * @param _amountRedeemed the amount being redeemed\r\n    * @param _userRedeemedEverything true if the user is redeeming everything\r\n    **/\r\n    function updateStateOnRedeem(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _amountRedeemed,\r\n        bool _userRedeemedEverything\r\n    ) external onlyLendingPool {\r\n        //compound liquidity and variable borrow interests\r\n        reserves[_reserve].updateCumulativeIndexes();\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, 0, _amountRedeemed);\r\n\r\n        //if user redeemed everything the useReserveAsCollateral flag is reset\r\n        if (_userRedeemedEverything) {\r\n            setUserUseReserveAsCollateral(_reserve, _user, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a result of a flashloan action\r\n    * @param _reserve the address of the reserve in which the flashloan is happening\r\n    * @param _income the income of the protocol as a result of the action\r\n    **/\r\n    function updateStateOnFlashLoan(\r\n        address _reserve,\r\n        uint256 _availableLiquidityBefore,\r\n        uint256 _income,\r\n        uint256 _protocolFee\r\n    ) external onlyLendingPool {\r\n        transferFlashLoanProtocolFeeInternal(_reserve, _protocolFee);\r\n\r\n        //compounding the cumulated interest\r\n        reserves[_reserve].updateCumulativeIndexes();\r\n\r\n        uint256 totalLiquidityBefore = _availableLiquidityBefore.add(\r\n            getReserveTotalBorrows(_reserve)\r\n        );\r\n\r\n        //compounding the received fee into the reserve\r\n        reserves[_reserve].cumulateToLiquidityIndex(totalLiquidityBefore, _income);\r\n\r\n        //refresh interest rates\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, _income, 0);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a consequence of a borrow action.\r\n    * @param _reserve the address of the reserve on which the user is borrowing\r\n    * @param _user the address of the borrower\r\n    * @param _amountBorrowed the new amount borrowed\r\n    * @param _borrowFee the fee on the amount borrowed\r\n    * @param _rateMode the borrow rate mode (stable, variable)\r\n    * @return the new borrow rate for the user\r\n    **/\r\n    function updateStateOnBorrow(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _amountBorrowed,\r\n        uint256 _borrowFee,\r\n        CoreLibrary.InterestRateMode _rateMode\r\n    ) external onlyLendingPool returns (uint256, uint256) {\r\n        // getting the previous borrow data of the user\r\n        (uint256 principalBorrowBalance, , uint256 balanceIncrease) = getUserBorrowBalances(\r\n            _reserve,\r\n            _user\r\n        );\r\n\r\n        updateReserveStateOnBorrowInternal(\r\n            _reserve,\r\n            _user,\r\n            principalBorrowBalance,\r\n            balanceIncrease,\r\n            _amountBorrowed,\r\n            _rateMode\r\n        );\r\n\r\n        updateUserStateOnBorrowInternal(\r\n            _reserve,\r\n            _user,\r\n            _amountBorrowed,\r\n            balanceIncrease,\r\n            _borrowFee,\r\n            _rateMode\r\n        );\r\n\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, 0, _amountBorrowed);\r\n\r\n        return (getUserCurrentBorrowRate(_reserve, _user), balanceIncrease);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a consequence of a repay action.\r\n    * @param _reserve the address of the reserve on which the user is repaying\r\n    * @param _user the address of the borrower\r\n    * @param _paybackAmountMinusFees the amount being paid back minus fees\r\n    * @param _originationFeeRepaid the fee on the amount that is being repaid\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @param _repaidWholeLoan true if the user is repaying the whole loan\r\n    **/\r\n\r\n    function updateStateOnRepay(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _paybackAmountMinusFees,\r\n        uint256 _originationFeeRepaid,\r\n        uint256 _balanceIncrease,\r\n        bool _repaidWholeLoan\r\n    ) external onlyLendingPool {\r\n        updateReserveStateOnRepayInternal(\r\n            _reserve,\r\n            _user,\r\n            _paybackAmountMinusFees,\r\n            _balanceIncrease\r\n        );\r\n        updateUserStateOnRepayInternal(\r\n            _reserve,\r\n            _user,\r\n            _paybackAmountMinusFees,\r\n            _originationFeeRepaid,\r\n            _balanceIncrease,\r\n            _repaidWholeLoan\r\n        );\r\n\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, _paybackAmountMinusFees, 0);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a consequence of a swap rate action.\r\n    * @param _reserve the address of the reserve on which the user is repaying\r\n    * @param _user the address of the borrower\r\n    * @param _principalBorrowBalance the amount borrowed by the user\r\n    * @param _compoundedBorrowBalance the amount borrowed plus accrued interest\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @param _currentRateMode the current interest rate mode for the user\r\n    **/\r\n    function updateStateOnSwapRate(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _principalBorrowBalance,\r\n        uint256 _compoundedBorrowBalance,\r\n        uint256 _balanceIncrease,\r\n        CoreLibrary.InterestRateMode _currentRateMode\r\n    ) external onlyLendingPool returns (CoreLibrary.InterestRateMode, uint256) {\r\n        updateReserveStateOnSwapRateInternal(\r\n            _reserve,\r\n            _user,\r\n            _principalBorrowBalance,\r\n            _compoundedBorrowBalance,\r\n            _currentRateMode\r\n        );\r\n\r\n        CoreLibrary.InterestRateMode newRateMode = updateUserStateOnSwapRateInternal(\r\n            _reserve,\r\n            _user,\r\n            _balanceIncrease,\r\n            _currentRateMode\r\n        );\r\n\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, 0, 0);\r\n\r\n        return (newRateMode, getUserCurrentBorrowRate(_reserve, _user));\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a consequence of a liquidation action.\r\n    * @param _principalReserve the address of the principal reserve that is being repaid\r\n    * @param _collateralReserve the address of the collateral reserve that is being liquidated\r\n    * @param _user the address of the borrower\r\n    * @param _amountToLiquidate the amount being repaid by the liquidator\r\n    * @param _collateralToLiquidate the amount of collateral being liquidated\r\n    * @param _feeLiquidated the amount of origination fee being liquidated\r\n    * @param _liquidatedCollateralForFee the amount of collateral equivalent to the origination fee + bonus\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @param _liquidatorReceivesAToken true if the liquidator will receive aTokens, false otherwise\r\n    **/\r\n    function updateStateOnLiquidation(\r\n        address _principalReserve,\r\n        address _collateralReserve,\r\n        address _user,\r\n        uint256 _amountToLiquidate,\r\n        uint256 _collateralToLiquidate,\r\n        uint256 _feeLiquidated,\r\n        uint256 _liquidatedCollateralForFee,\r\n        uint256 _balanceIncrease,\r\n        bool _liquidatorReceivesAToken\r\n    ) external onlyLendingPool {\r\n        updatePrincipalReserveStateOnLiquidationInternal(\r\n            _principalReserve,\r\n            _user,\r\n            _amountToLiquidate,\r\n            _balanceIncrease\r\n        );\r\n\r\n        updateCollateralReserveStateOnLiquidationInternal(\r\n            _collateralReserve\r\n        );\r\n\r\n        updateUserStateOnLiquidationInternal(\r\n            _principalReserve,\r\n            _user,\r\n            _amountToLiquidate,\r\n            _feeLiquidated,\r\n            _balanceIncrease\r\n        );\r\n\r\n        updateReserveInterestRatesAndTimestampInternal(_principalReserve, _amountToLiquidate, 0);\r\n\r\n        if (!_liquidatorReceivesAToken) {\r\n            updateReserveInterestRatesAndTimestampInternal(\r\n                _collateralReserve,\r\n                0,\r\n                _collateralToLiquidate.add(_liquidatedCollateralForFee)\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a consequence of a stable rate rebalance\r\n    * @param _reserve the address of the principal reserve where the user borrowed\r\n    * @param _user the address of the borrower\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @return the new stable rate for the user\r\n    **/\r\n    function updateStateOnRebalance(address _reserve, address _user, uint256 _balanceIncrease)\r\n        external\r\n        onlyLendingPool\r\n        returns (uint256)\r\n    {\r\n        updateReserveStateOnRebalanceInternal(_reserve, _user, _balanceIncrease);\r\n\r\n        //update user data and rebalance the rate\r\n        updateUserStateOnRebalanceInternal(_reserve, _user, _balanceIncrease);\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, 0, 0);\r\n        return usersReserveData[_user][_reserve].stableBorrowRate;\r\n    }\r\n\r\n    /**\r\n    * @dev enables or disables a reserve as collateral\r\n    * @param _reserve the address of the principal reserve where the user deposited\r\n    * @param _user the address of the depositor\r\n    * @param _useAsCollateral true if the depositor wants to use the reserve as collateral\r\n    **/\r\n    function setUserUseReserveAsCollateral(address _reserve, address _user, bool _useAsCollateral)\r\n        public\r\n        onlyLendingPool\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        user.useAsCollateral = _useAsCollateral;\r\n    }\r\n\r\n    /**\r\n    * @notice ETH/token transfer functions\r\n    **/\r\n\r\n    /**\r\n    * @dev fallback function enforces that the caller is a contract, to support flashloan transfers\r\n    **/\r\n    function() external payable {\r\n        //only contracts can send ETH to the core\r\n        require(msg.sender.isContract(), \"Only contracts can send ether to the Lending pool core\");\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev transfers to the user a specific amount from the reserve.\r\n    * @param _reserve the address of the reserve where the transfer is happening\r\n    * @param _user the address of the user receiving the transfer\r\n    * @param _amount the amount being transferred\r\n    **/\r\n    function transferToUser(address _reserve, address payable _user, uint256 _amount)\r\n        external\r\n        onlyLendingPool\r\n    {\r\n        if (_reserve != EthAddressLib.ethAddress()) {\r\n            ERC20(_reserve).safeTransfer(_user, _amount);\r\n        } else {\r\n            //solium-disable-next-line\r\n            (bool result, ) = _user.call.value(_amount).gas(50000)(\"\");\r\n            require(result, \"Transfer of ETH failed\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev transfers the protocol fees to the fees collection address\r\n    * @param _token the address of the token being transferred\r\n    * @param _user the address of the user from where the transfer is happening\r\n    * @param _amount the amount being transferred\r\n    * @param _destination the fee receiver address\r\n    **/\r\n\r\n    function transferToFeeCollectionAddress(\r\n        address _token,\r\n        address _user,\r\n        uint256 _amount,\r\n        address _destination\r\n    ) external payable onlyLendingPool {\r\n        address payable feeAddress = address(uint160(_destination)); //cast the address to payable\r\n\r\n        if (_token != EthAddressLib.ethAddress()) {\r\n            require(\r\n                msg.value == 0,\r\n                \"User is sending ETH along with the ERC20 transfer. Check the value attribute of the transaction\"\r\n            );\r\n            ERC20(_token).safeTransferFrom(_user, feeAddress, _amount);\r\n        } else {\r\n            require(msg.value >= _amount, \"The amount and the value sent to deposit do not match\");\r\n            //solium-disable-next-line\r\n            (bool result, ) = feeAddress.call.value(_amount).gas(50000)(\"\");\r\n            require(result, \"Transfer of ETH failed\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev transfers the fees to the fees collection address in the case of liquidation\r\n    * @param _token the address of the token being transferred\r\n    * @param _amount the amount being transferred\r\n    * @param _destination the fee receiver address\r\n    **/\r\n    function liquidateFee(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _destination\r\n    ) external payable onlyLendingPool {\r\n        address payable feeAddress = address(uint160(_destination)); //cast the address to payable\r\n        require(\r\n            msg.value == 0,\r\n            \"Fee liquidation does not require any transfer of value\"\r\n        );\r\n\r\n        if (_token != EthAddressLib.ethAddress()) {\r\n            ERC20(_token).safeTransfer(feeAddress, _amount);\r\n        } else {\r\n            //solium-disable-next-line\r\n            (bool result, ) = feeAddress.call.value(_amount).gas(50000)(\"\");\r\n            require(result, \"Transfer of ETH failed\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev transfers an amount from a user to the destination reserve\r\n    * @param _reserve the address of the reserve where the amount is being transferred\r\n    * @param _user the address of the user from where the transfer is happening\r\n    * @param _amount the amount being transferred\r\n    **/\r\n    function transferToReserve(address _reserve, address payable _user, uint256 _amount)\r\n        external\r\n        payable\r\n        onlyLendingPool\r\n    {\r\n        if (_reserve != EthAddressLib.ethAddress()) {\r\n            require(msg.value == 0, \"User is sending ETH along with the ERC20 transfer.\");\r\n            ERC20(_reserve).safeTransferFrom(_user, address(this), _amount);\r\n\r\n        } else {\r\n            require(msg.value >= _amount, \"The amount and the value sent to deposit do not match\");\r\n\r\n            if (msg.value > _amount) {\r\n                //send back excess ETH\r\n                uint256 excessAmount = msg.value.sub(_amount);\r\n                //solium-disable-next-line\r\n                (bool result, ) = _user.call.value(excessAmount).gas(50000)(\"\");\r\n                require(result, \"Transfer of ETH failed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice data access functions\r\n    **/\r\n\r\n    /**\r\n    * @dev returns the basic data (balances, fee accrued, reserve enabled/disabled as collateral)\r\n    * needed to calculate the global account data in the LendingPoolDataProvider\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user\r\n    * @return the user deposited balance, the principal borrow balance, the fee, and if the reserve is enabled as collateral or not\r\n    **/\r\n    function getUserBasicReserveData(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (uint256, uint256, uint256, bool)\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        uint256 underlyingBalance = getUserUnderlyingAssetBalance(_reserve, _user);\r\n\r\n        if (user.principalBorrowBalance == 0) {\r\n            return (underlyingBalance, 0, 0, user.useAsCollateral);\r\n        }\r\n\r\n        return (\r\n            underlyingBalance,\r\n            user.getCompoundedBorrowBalance(reserve),\r\n            user.originationFee,\r\n            user.useAsCollateral\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev checks if a user is allowed to borrow at a stable rate\r\n    * @param _reserve the reserve address\r\n    * @param _user the user\r\n    * @param _amount the amount the the user wants to borrow\r\n    * @return true if the user is allowed to borrow at a stable rate, false otherwise\r\n    **/\r\n\r\n    function isUserAllowedToBorrowAtStable(address _reserve, address _user, uint256 _amount)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        if (!reserve.isStableBorrowRateEnabled) return false;\r\n\r\n        return\r\n            !user.useAsCollateral ||\r\n            !reserve.usageAsCollateralEnabled ||\r\n            _amount > getUserUnderlyingAssetBalance(_reserve, _user);\r\n    }\r\n\r\n    /**\r\n    * @dev gets the underlying asset balance of a user based on the corresponding aToken balance.\r\n    * @param _reserve the reserve address\r\n    * @param _user the user address\r\n    * @return the underlying deposit balance of the user\r\n    **/\r\n\r\n    function getUserUnderlyingAssetBalance(address _reserve, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        AToken aToken = AToken(reserves[_reserve].aTokenAddress);\r\n        return aToken.balanceOf(_user);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev gets the interest rate strategy contract address for the reserve\r\n    * @param _reserve the reserve address\r\n    * @return the address of the interest rate strategy contract\r\n    **/\r\n    function getReserveInterestRateStrategyAddress(address _reserve) public view returns (address) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.interestRateStrategyAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the aToken contract address for the reserve\r\n    * @param _reserve the reserve address\r\n    * @return the address of the aToken contract\r\n    **/\r\n\r\n    function getReserveATokenAddress(address _reserve) public view returns (address) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.aTokenAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the available liquidity in the reserve. The available liquidity is the balance of the core contract\r\n    * @param _reserve the reserve address\r\n    * @return the available liquidity\r\n    **/\r\n    function getReserveAvailableLiquidity(address _reserve) public view returns (uint256) {\r\n        uint256 balance = 0;\r\n\r\n        if (_reserve == EthAddressLib.ethAddress()) {\r\n            balance = address(this).balance;\r\n        } else {\r\n            balance = IERC20(_reserve).balanceOf(address(this));\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the total liquidity in the reserve. The total liquidity is the balance of the core contract + total borrows\r\n    * @param _reserve the reserve address\r\n    * @return the total liquidity\r\n    **/\r\n    function getReserveTotalLiquidity(address _reserve) public view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return getReserveAvailableLiquidity(_reserve).add(reserve.getTotalBorrows());\r\n    }\r\n\r\n    /**\r\n    * @dev gets the normalized income of the reserve. a value of 1e27 means there is no income. A value of 2e27 means there\r\n    * there has been 100% income.\r\n    * @param _reserve the reserve address\r\n    * @return the reserve normalized income\r\n    **/\r\n    function getReserveNormalizedIncome(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.getNormalizedIncome();\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve total borrows\r\n    * @param _reserve the reserve address\r\n    * @return the total borrows (stable + variable)\r\n    **/\r\n    function getReserveTotalBorrows(address _reserve) public view returns (uint256) {\r\n        return reserves[_reserve].getTotalBorrows();\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve total borrows stable\r\n    * @param _reserve the reserve address\r\n    * @return the total borrows stable\r\n    **/\r\n    function getReserveTotalBorrowsStable(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.totalBorrowsStable;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve total borrows variable\r\n    * @param _reserve the reserve address\r\n    * @return the total borrows variable\r\n    **/\r\n\r\n    function getReserveTotalBorrowsVariable(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.totalBorrowsVariable;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve liquidation threshold\r\n    * @param _reserve the reserve address\r\n    * @return the reserve liquidation threshold\r\n    **/\r\n\r\n    function getReserveLiquidationThreshold(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.liquidationThreshold;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve liquidation bonus\r\n    * @param _reserve the reserve address\r\n    * @return the reserve liquidation bonus\r\n    **/\r\n\r\n    function getReserveLiquidationBonus(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.liquidationBonus;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve current variable borrow rate. Is the base variable borrow rate if the reserve is empty\r\n    * @param _reserve the reserve address\r\n    * @return the reserve current variable borrow rate\r\n    **/\r\n\r\n    function getReserveCurrentVariableBorrowRate(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n\r\n        if (reserve.currentVariableBorrowRate == 0) {\r\n            return\r\n                IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)\r\n                .getBaseVariableBorrowRate();\r\n        }\r\n        return reserve.currentVariableBorrowRate;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve current stable borrow rate. Is the market rate if the reserve is empty\r\n    * @param _reserve the reserve address\r\n    * @return the reserve current stable borrow rate\r\n    **/\r\n\r\n    function getReserveCurrentStableBorrowRate(address _reserve) public view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        ILendingRateOracle oracle = ILendingRateOracle(addressesProvider.getLendingRateOracle());\r\n\r\n        if (reserve.currentStableBorrowRate == 0) {\r\n            //no stable rate borrows yet\r\n            return oracle.getMarketBorrowRate(_reserve);\r\n        }\r\n\r\n        return reserve.currentStableBorrowRate;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve average stable borrow rate. The average stable rate is the weighted average\r\n    * of all the loans taken at stable rate.\r\n    * @param _reserve the reserve address\r\n    * @return the reserve current average borrow rate\r\n    **/\r\n    function getReserveCurrentAverageStableBorrowRate(address _reserve)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.currentAverageStableBorrowRate;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve liquidity rate\r\n    * @param _reserve the reserve address\r\n    * @return the reserve liquidity rate\r\n    **/\r\n    function getReserveCurrentLiquidityRate(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.currentLiquidityRate;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve liquidity cumulative index\r\n    * @param _reserve the reserve address\r\n    * @return the reserve liquidity cumulative index\r\n    **/\r\n    function getReserveLiquidityCumulativeIndex(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.lastLiquidityCumulativeIndex;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve variable borrow index\r\n    * @param _reserve the reserve address\r\n    * @return the reserve variable borrow index\r\n    **/\r\n    function getReserveVariableBorrowsCumulativeIndex(address _reserve)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.lastVariableBorrowCumulativeIndex;\r\n    }\r\n\r\n    /**\r\n    * @dev this function aggregates the configuration parameters of the reserve.\r\n    * It's used in the LendingPoolDataProvider specifically to save gas, and avoid\r\n    * multiple external contract calls to fetch the same data.\r\n    * @param _reserve the reserve address\r\n    * @return the reserve decimals\r\n    * @return the base ltv as collateral\r\n    * @return the liquidation threshold\r\n    * @return if the reserve is used as collateral or not\r\n    **/\r\n    function getReserveConfiguration(address _reserve)\r\n        external\r\n        view\r\n        returns (uint256, uint256, uint256, bool)\r\n    {\r\n        uint256 decimals;\r\n        uint256 baseLTVasCollateral;\r\n        uint256 liquidationThreshold;\r\n        bool usageAsCollateralEnabled;\r\n\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        decimals = reserve.decimals;\r\n        baseLTVasCollateral = reserve.baseLTVasCollateral;\r\n        liquidationThreshold = reserve.liquidationThreshold;\r\n        usageAsCollateralEnabled = reserve.usageAsCollateralEnabled;\r\n\r\n        return (decimals, baseLTVasCollateral, liquidationThreshold, usageAsCollateralEnabled);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the decimals of the reserve\r\n    * @param _reserve the reserve address\r\n    * @return the reserve decimals\r\n    **/\r\n    function getReserveDecimals(address _reserve) external view returns (uint256) {\r\n        return reserves[_reserve].decimals;\r\n    }\r\n\r\n    /**\r\n    * @dev returns true if the reserve is enabled for borrowing\r\n    * @param _reserve the reserve address\r\n    * @return true if the reserve is enabled for borrowing, false otherwise\r\n    **/\r\n\r\n    function isReserveBorrowingEnabled(address _reserve) external view returns (bool) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.borrowingEnabled;\r\n    }\r\n\r\n    /**\r\n    * @dev returns true if the reserve is enabled as collateral\r\n    * @param _reserve the reserve address\r\n    * @return true if the reserve is enabled as collateral, false otherwise\r\n    **/\r\n\r\n    function isReserveUsageAsCollateralEnabled(address _reserve) external view returns (bool) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.usageAsCollateralEnabled;\r\n    }\r\n\r\n    /**\r\n    * @dev returns true if the stable rate is enabled on reserve\r\n    * @param _reserve the reserve address\r\n    * @return true if the stable rate is enabled on reserve, false otherwise\r\n    **/\r\n    function getReserveIsStableBorrowRateEnabled(address _reserve) external view returns (bool) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.isStableBorrowRateEnabled;\r\n    }\r\n\r\n    /**\r\n    * @dev returns true if the reserve is active\r\n    * @param _reserve the reserve address\r\n    * @return true if the reserve is active, false otherwise\r\n    **/\r\n    function getReserveIsActive(address _reserve) external view returns (bool) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.isActive;\r\n    }\r\n\r\n    /**\r\n    * @notice returns if a reserve is freezed\r\n    * @param _reserve the reserve for which the information is needed\r\n    * @return true if the reserve is freezed, false otherwise\r\n    **/\r\n\r\n    function getReserveIsFreezed(address _reserve) external view returns (bool) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.isFreezed;\r\n    }\r\n\r\n    /**\r\n    * @notice returns the timestamp of the last action on the reserve\r\n    * @param _reserve the reserve for which the information is needed\r\n    * @return the last updated timestamp of the reserve\r\n    **/\r\n\r\n    function getReserveLastUpdate(address _reserve) external view returns (uint40 timestamp) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        timestamp = reserve.lastUpdateTimestamp;\r\n    }\r\n\r\n    /**\r\n    * @dev returns the utilization rate U of a specific reserve\r\n    * @param _reserve the reserve for which the information is needed\r\n    * @return the utilization rate in ray\r\n    **/\r\n\r\n    function getReserveUtilizationRate(address _reserve) public view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n\r\n        uint256 totalBorrows = reserve.getTotalBorrows();\r\n\r\n        if (totalBorrows == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 availableLiquidity = getReserveAvailableLiquidity(_reserve);\r\n\r\n        return totalBorrows.rayDiv(availableLiquidity.add(totalBorrows));\r\n    }\r\n\r\n    /**\r\n    * @return the array of reserves configured on the core\r\n    **/\r\n    function getReserves() external view returns (address[] memory) {\r\n        return reservesList;\r\n    }\r\n\r\n    /**\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return true if the user has chosen to use the reserve as collateral, false otherwise\r\n    **/\r\n    function isUserUseReserveAsCollateralEnabled(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        return user.useAsCollateral;\r\n    }\r\n\r\n    /**\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return the origination fee for the user\r\n    **/\r\n    function getUserOriginationFee(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        return user.originationFee;\r\n    }\r\n\r\n    /**\r\n    * @dev users with no loans in progress have NONE as borrow rate mode\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return the borrow rate mode for the user,\r\n    **/\r\n\r\n    function getUserCurrentBorrowRateMode(address _reserve, address _user)\r\n        public\r\n        view\r\n        returns (CoreLibrary.InterestRateMode)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        if (user.principalBorrowBalance == 0) {\r\n            return CoreLibrary.InterestRateMode.NONE;\r\n        }\r\n\r\n        return\r\n            user.stableBorrowRate > 0\r\n            ? CoreLibrary.InterestRateMode.STABLE\r\n            : CoreLibrary.InterestRateMode.VARIABLE;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the current borrow rate of the user\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return the borrow rate for the user,\r\n    **/\r\n    function getUserCurrentBorrowRate(address _reserve, address _user)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CoreLibrary.InterestRateMode rateMode = getUserCurrentBorrowRateMode(_reserve, _user);\r\n\r\n        if (rateMode == CoreLibrary.InterestRateMode.NONE) {\r\n            return 0;\r\n        }\r\n\r\n        return\r\n            rateMode == CoreLibrary.InterestRateMode.STABLE\r\n            ? usersReserveData[_user][_reserve].stableBorrowRate\r\n            : reserves[_reserve].currentVariableBorrowRate;\r\n    }\r\n\r\n    /**\r\n    * @dev the stable rate returned is 0 if the user is borrowing at variable or not borrowing at all\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return the user stable rate\r\n    **/\r\n    function getUserCurrentStableBorrowRate(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        return user.stableBorrowRate;\r\n    }\r\n\r\n    /**\r\n    * @dev calculates and returns the borrow balances of the user\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user\r\n    * @return the principal borrow balance, the compounded balance and the balance increase since the last borrow/repay/swap/rebalance\r\n    **/\r\n\r\n    function getUserBorrowBalances(address _reserve, address _user)\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        if (user.principalBorrowBalance == 0) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        uint256 principal = user.principalBorrowBalance;\r\n        uint256 compoundedBalance = CoreLibrary.getCompoundedBorrowBalance(\r\n            user,\r\n            reserves[_reserve]\r\n        );\r\n        return (principal, compoundedBalance, compoundedBalance.sub(principal));\r\n    }\r\n\r\n    /**\r\n    * @dev the variable borrow index of the user is 0 if the user is not borrowing or borrowing at stable\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return the variable borrow index for the user\r\n    **/\r\n\r\n    function getUserVariableBorrowCumulativeIndex(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        return user.lastVariableBorrowCumulativeIndex;\r\n    }\r\n\r\n    /**\r\n    * @dev the variable borrow index of the user is 0 if the user is not borrowing or borrowing at stable\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return the variable borrow index for the user\r\n    **/\r\n\r\n    function getUserLastUpdate(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (uint256 timestamp)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        timestamp = user.lastUpdateTimestamp;\r\n    }\r\n\r\n    /**\r\n    * @dev updates the lending pool core configuration\r\n    **/\r\n    function refreshConfiguration() external onlyLendingPoolConfigurator {\r\n        refreshConfigInternal();\r\n    }\r\n\r\n    /**\r\n    * @dev initializes a reserve\r\n    * @param _reserve the address of the reserve\r\n    * @param _aTokenAddress the address of the overlying aToken contract\r\n    * @param _decimals the decimals of the reserve currency\r\n    * @param _interestRateStrategyAddress the address of the interest rate strategy contract\r\n    **/\r\n    function initReserve(\r\n        address _reserve,\r\n        address _aTokenAddress,\r\n        uint256 _decimals,\r\n        address _interestRateStrategyAddress\r\n    ) external onlyLendingPoolConfigurator {\r\n        reserves[_reserve].init(_aTokenAddress, _decimals, _interestRateStrategyAddress);\r\n        addReserveToListInternal(_reserve);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @dev removes the last added reserve in the reservesList array\r\n    * @param _reserveToRemove the address of the reserve\r\n    **/\r\n    function removeLastAddedReserve(address _reserveToRemove)\r\n     external onlyLendingPoolConfigurator {\r\n\r\n        address lastReserve = reservesList[reservesList.length-1];\r\n\r\n        require(lastReserve == _reserveToRemove, \"Reserve being removed is different than the reserve requested\");\r\n\r\n        //as we can't check if totalLiquidity is 0 (since the reserve added might not be an ERC20) we at least check that there is nothing borrowed\r\n        require(getReserveTotalBorrows(lastReserve) == 0, \"Cannot remove a reserve with liquidity deposited\");\r\n\r\n        reserves[lastReserve].isActive = false;\r\n        reserves[lastReserve].aTokenAddress = address(0);\r\n        reserves[lastReserve].decimals = 0;\r\n        reserves[lastReserve].lastLiquidityCumulativeIndex = 0;\r\n        reserves[lastReserve].lastVariableBorrowCumulativeIndex = 0;\r\n        reserves[lastReserve].borrowingEnabled = false;\r\n        reserves[lastReserve].usageAsCollateralEnabled = false;\r\n        reserves[lastReserve].baseLTVasCollateral = 0;\r\n        reserves[lastReserve].liquidationThreshold = 0;\r\n        reserves[lastReserve].liquidationBonus = 0;\r\n        reserves[lastReserve].interestRateStrategyAddress = address(0);\r\n\r\n        reservesList.pop();\r\n    }\r\n\r\n    /**\r\n    * @dev updates the address of the interest rate strategy contract\r\n    * @param _reserve the address of the reserve\r\n    * @param _rateStrategyAddress the address of the interest rate strategy contract\r\n    **/\r\n\r\n    function setReserveInterestRateStrategyAddress(address _reserve, address _rateStrategyAddress)\r\n        external\r\n        onlyLendingPoolConfigurator\r\n    {\r\n        reserves[_reserve].interestRateStrategyAddress = _rateStrategyAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev enables borrowing on a reserve. Also sets the stable rate borrowing\r\n    * @param _reserve the address of the reserve\r\n    * @param _stableBorrowRateEnabled true if the stable rate needs to be enabled, false otherwise\r\n    **/\r\n\r\n    function enableBorrowingOnReserve(address _reserve, bool _stableBorrowRateEnabled)\r\n        external\r\n        onlyLendingPoolConfigurator\r\n    {\r\n        reserves[_reserve].enableBorrowing(_stableBorrowRateEnabled);\r\n    }\r\n\r\n    /**\r\n    * @dev disables borrowing on a reserve\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n\r\n    function disableBorrowingOnReserve(address _reserve) external onlyLendingPoolConfigurator {\r\n        reserves[_reserve].disableBorrowing();\r\n    }\r\n\r\n    /**\r\n    * @dev enables a reserve to be used as collateral\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function enableReserveAsCollateral(\r\n        address _reserve,\r\n        uint256 _baseLTVasCollateral,\r\n        uint256 _liquidationThreshold,\r\n        uint256 _liquidationBonus\r\n    ) external onlyLendingPoolConfigurator {\r\n        reserves[_reserve].enableAsCollateral(\r\n            _baseLTVasCollateral,\r\n            _liquidationThreshold,\r\n            _liquidationBonus\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev disables a reserve to be used as collateral\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function disableReserveAsCollateral(address _reserve) external onlyLendingPoolConfigurator {\r\n        reserves[_reserve].disableAsCollateral();\r\n    }\r\n\r\n    /**\r\n    * @dev enable the stable borrow rate mode on a reserve\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function enableReserveStableBorrowRate(address _reserve) external onlyLendingPoolConfigurator {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.isStableBorrowRateEnabled = true;\r\n    }\r\n\r\n    /**\r\n    * @dev disable the stable borrow rate mode on a reserve\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function disableReserveStableBorrowRate(address _reserve) external onlyLendingPoolConfigurator {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.isStableBorrowRateEnabled = false;\r\n    }\r\n\r\n    /**\r\n    * @dev activates a reserve\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function activateReserve(address _reserve) external onlyLendingPoolConfigurator {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n\r\n        require(\r\n            reserve.lastLiquidityCumulativeIndex > 0 &&\r\n                reserve.lastVariableBorrowCumulativeIndex > 0,\r\n            \"Reserve has not been initialized yet\"\r\n        );\r\n        reserve.isActive = true;\r\n    }\r\n\r\n    /**\r\n    * @dev deactivates a reserve\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function deactivateReserve(address _reserve) external onlyLendingPoolConfigurator {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.isActive = false;\r\n    }\r\n\r\n    /**\r\n    * @notice allows the configurator to freeze the reserve.\r\n    * A freezed reserve does not allow any action apart from repay, redeem, liquidationCall, rebalance.\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function freezeReserve(address _reserve) external onlyLendingPoolConfigurator {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.isFreezed = true;\r\n    }\r\n\r\n    /**\r\n    * @notice allows the configurator to unfreeze the reserve. A unfreezed reserve allows any action to be executed.\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function unfreezeReserve(address _reserve) external onlyLendingPoolConfigurator {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.isFreezed = false;\r\n    }\r\n\r\n    /**\r\n    * @notice allows the configurator to update the loan to value of a reserve\r\n    * @param _reserve the address of the reserve\r\n    * @param _ltv the new loan to value\r\n    **/\r\n    function setReserveBaseLTVasCollateral(address _reserve, uint256 _ltv)\r\n        external\r\n        onlyLendingPoolConfigurator\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.baseLTVasCollateral = _ltv;\r\n    }\r\n\r\n    /**\r\n    * @notice allows the configurator to update the liquidation threshold of a reserve\r\n    * @param _reserve the address of the reserve\r\n    * @param _threshold the new liquidation threshold\r\n    **/\r\n    function setReserveLiquidationThreshold(address _reserve, uint256 _threshold)\r\n        external\r\n        onlyLendingPoolConfigurator\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.liquidationThreshold = _threshold;\r\n    }\r\n\r\n    /**\r\n    * @notice allows the configurator to update the liquidation bonus of a reserve\r\n    * @param _reserve the address of the reserve\r\n    * @param _bonus the new liquidation bonus\r\n    **/\r\n    function setReserveLiquidationBonus(address _reserve, uint256 _bonus)\r\n        external\r\n        onlyLendingPoolConfigurator\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.liquidationBonus = _bonus;\r\n    }\r\n\r\n    /**\r\n    * @notice allows the configurator to update the reserve decimals\r\n    * @param _reserve the address of the reserve\r\n    * @param _decimals the decimals of the reserve\r\n    **/\r\n    function setReserveDecimals(address _reserve, uint256 _decimals)\r\n        external\r\n        onlyLendingPoolConfigurator\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.decimals = _decimals;\r\n    }\r\n\r\n    /**\r\n    * @notice internal functions\r\n    **/\r\n\r\n    /**\r\n    * @dev updates the state of a reserve as a consequence of a borrow action.\r\n    * @param _reserve the address of the reserve on which the user is borrowing\r\n    * @param _user the address of the borrower\r\n    * @param _principalBorrowBalance the previous borrow balance of the borrower before the action\r\n    * @param _balanceIncrease the accrued interest of the user on the previous borrowed amount\r\n    * @param _amountBorrowed the new amount borrowed\r\n    * @param _rateMode the borrow rate mode (stable, variable)\r\n    **/\r\n\r\n    function updateReserveStateOnBorrowInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _principalBorrowBalance,\r\n        uint256 _balanceIncrease,\r\n        uint256 _amountBorrowed,\r\n        CoreLibrary.InterestRateMode _rateMode\r\n    ) internal {\r\n        reserves[_reserve].updateCumulativeIndexes();\r\n\r\n        //increasing reserve total borrows to account for the new borrow balance of the user\r\n        //NOTE: Depending on the previous borrow mode, the borrows might need to be switched from variable to stable or vice versa\r\n\r\n        updateReserveTotalBorrowsByRateModeInternal(\r\n            _reserve,\r\n            _user,\r\n            _principalBorrowBalance,\r\n            _balanceIncrease,\r\n            _amountBorrowed,\r\n            _rateMode\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of a user as a consequence of a borrow action.\r\n    * @param _reserve the address of the reserve on which the user is borrowing\r\n    * @param _user the address of the borrower\r\n    * @param _amountBorrowed the amount borrowed\r\n    * @param _balanceIncrease the accrued interest of the user on the previous borrowed amount\r\n    * @param _rateMode the borrow rate mode (stable, variable)\r\n    * @return the final borrow rate for the user. Emitted by the borrow() event\r\n    **/\r\n\r\n    function updateUserStateOnBorrowInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _amountBorrowed,\r\n        uint256 _balanceIncrease,\r\n        uint256 _fee,\r\n        CoreLibrary.InterestRateMode _rateMode\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        if (_rateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            //stable\r\n            //reset the user variable index, and update the stable rate\r\n            user.stableBorrowRate = reserve.currentStableBorrowRate;\r\n            user.lastVariableBorrowCumulativeIndex = 0;\r\n        } else if (_rateMode == CoreLibrary.InterestRateMode.VARIABLE) {\r\n            //variable\r\n            //reset the user stable rate, and store the new borrow index\r\n            user.stableBorrowRate = 0;\r\n            user.lastVariableBorrowCumulativeIndex = reserve.lastVariableBorrowCumulativeIndex;\r\n        } else {\r\n            revert(\"Invalid borrow rate mode\");\r\n        }\r\n        //increase the principal borrows and the origination fee\r\n        user.principalBorrowBalance = user.principalBorrowBalance.add(_amountBorrowed).add(\r\n            _balanceIncrease\r\n        );\r\n        user.originationFee = user.originationFee.add(_fee);\r\n\r\n        //solium-disable-next-line\r\n        user.lastUpdateTimestamp = uint40(block.timestamp);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the reserve as a consequence of a repay action.\r\n    * @param _reserve the address of the reserve on which the user is repaying\r\n    * @param _user the address of the borrower\r\n    * @param _paybackAmountMinusFees the amount being paid back minus fees\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    **/\r\n\r\n    function updateReserveStateOnRepayInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _paybackAmountMinusFees,\r\n        uint256 _balanceIncrease\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_reserve][_user];\r\n\r\n        CoreLibrary.InterestRateMode borrowRateMode = getUserCurrentBorrowRateMode(_reserve, _user);\r\n\r\n        //update the indexes\r\n        reserves[_reserve].updateCumulativeIndexes();\r\n\r\n        //compound the cumulated interest to the borrow balance and then subtracting the payback amount\r\n        if (borrowRateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            reserve.increaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _balanceIncrease,\r\n                user.stableBorrowRate\r\n            );\r\n            reserve.decreaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _paybackAmountMinusFees,\r\n                user.stableBorrowRate\r\n            );\r\n        } else {\r\n            reserve.increaseTotalBorrowsVariable(_balanceIncrease);\r\n            reserve.decreaseTotalBorrowsVariable(_paybackAmountMinusFees);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the user as a consequence of a repay action.\r\n    * @param _reserve the address of the reserve on which the user is repaying\r\n    * @param _user the address of the borrower\r\n    * @param _paybackAmountMinusFees the amount being paid back minus fees\r\n    * @param _originationFeeRepaid the fee on the amount that is being repaid\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @param _repaidWholeLoan true if the user is repaying the whole loan\r\n    **/\r\n    function updateUserStateOnRepayInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _paybackAmountMinusFees,\r\n        uint256 _originationFeeRepaid,\r\n        uint256 _balanceIncrease,\r\n        bool _repaidWholeLoan\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        //update the user principal borrow balance, adding the cumulated interest and then subtracting the payback amount\r\n        user.principalBorrowBalance = user.principalBorrowBalance.add(_balanceIncrease).sub(\r\n            _paybackAmountMinusFees\r\n        );\r\n        user.lastVariableBorrowCumulativeIndex = reserve.lastVariableBorrowCumulativeIndex;\r\n\r\n        //if the balance decrease is equal to the previous principal (user is repaying the whole loan)\r\n        //and the rate mode is stable, we reset the interest rate mode of the user\r\n        if (_repaidWholeLoan) {\r\n            user.stableBorrowRate = 0;\r\n            user.lastVariableBorrowCumulativeIndex = 0;\r\n        }\r\n        user.originationFee = user.originationFee.sub(_originationFeeRepaid);\r\n\r\n        //solium-disable-next-line\r\n        user.lastUpdateTimestamp = uint40(block.timestamp);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the user as a consequence of a swap rate action.\r\n    * @param _reserve the address of the reserve on which the user is performing the rate swap\r\n    * @param _user the address of the borrower\r\n    * @param _principalBorrowBalance the the principal amount borrowed by the user\r\n    * @param _compoundedBorrowBalance the principal amount plus the accrued interest\r\n    * @param _currentRateMode the rate mode at which the user borrowed\r\n    **/\r\n    function updateReserveStateOnSwapRateInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _principalBorrowBalance,\r\n        uint256 _compoundedBorrowBalance,\r\n        CoreLibrary.InterestRateMode _currentRateMode\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        //compounding reserve indexes\r\n        reserve.updateCumulativeIndexes();\r\n\r\n        if (_currentRateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            uint256 userCurrentStableRate = user.stableBorrowRate;\r\n\r\n            //swap to variable\r\n            reserve.decreaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _principalBorrowBalance,\r\n                userCurrentStableRate\r\n            ); //decreasing stable from old principal balance\r\n            reserve.increaseTotalBorrowsVariable(_compoundedBorrowBalance); //increase variable borrows\r\n        } else if (_currentRateMode == CoreLibrary.InterestRateMode.VARIABLE) {\r\n            //swap to stable\r\n            uint256 currentStableRate = reserve.currentStableBorrowRate;\r\n            reserve.decreaseTotalBorrowsVariable(_principalBorrowBalance);\r\n            reserve.increaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _compoundedBorrowBalance,\r\n                currentStableRate\r\n            );\r\n\r\n        } else {\r\n            revert(\"Invalid rate mode received\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the user as a consequence of a swap rate action.\r\n    * @param _reserve the address of the reserve on which the user is performing the swap\r\n    * @param _user the address of the borrower\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @param _currentRateMode the current rate mode of the user\r\n    **/\r\n\r\n    function updateUserStateOnSwapRateInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _balanceIncrease,\r\n        CoreLibrary.InterestRateMode _currentRateMode\r\n    ) internal returns (CoreLibrary.InterestRateMode) {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n\r\n        CoreLibrary.InterestRateMode newMode = CoreLibrary.InterestRateMode.NONE;\r\n\r\n        if (_currentRateMode == CoreLibrary.InterestRateMode.VARIABLE) {\r\n            //switch to stable\r\n            newMode = CoreLibrary.InterestRateMode.STABLE;\r\n            user.stableBorrowRate = reserve.currentStableBorrowRate;\r\n            user.lastVariableBorrowCumulativeIndex = 0;\r\n        } else if (_currentRateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            newMode = CoreLibrary.InterestRateMode.VARIABLE;\r\n            user.stableBorrowRate = 0;\r\n            user.lastVariableBorrowCumulativeIndex = reserve.lastVariableBorrowCumulativeIndex;\r\n        } else {\r\n            revert(\"Invalid interest rate mode received\");\r\n        }\r\n        //compounding cumulated interest\r\n        user.principalBorrowBalance = user.principalBorrowBalance.add(_balanceIncrease);\r\n        //solium-disable-next-line\r\n        user.lastUpdateTimestamp = uint40(block.timestamp);\r\n\r\n        return newMode;\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the principal reserve as a consequence of a liquidation action.\r\n    * @param _principalReserve the address of the principal reserve that is being repaid\r\n    * @param _user the address of the borrower\r\n    * @param _amountToLiquidate the amount being repaid by the liquidator\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    **/\r\n\r\n    function updatePrincipalReserveStateOnLiquidationInternal(\r\n        address _principalReserve,\r\n        address _user,\r\n        uint256 _amountToLiquidate,\r\n        uint256 _balanceIncrease\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_principalReserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_principalReserve];\r\n\r\n        //update principal reserve data\r\n        reserve.updateCumulativeIndexes();\r\n\r\n        CoreLibrary.InterestRateMode borrowRateMode = getUserCurrentBorrowRateMode(\r\n            _principalReserve,\r\n            _user\r\n        );\r\n\r\n        if (borrowRateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            //increase the total borrows by the compounded interest\r\n            reserve.increaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _balanceIncrease,\r\n                user.stableBorrowRate\r\n            );\r\n\r\n            //decrease by the actual amount to liquidate\r\n            reserve.decreaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _amountToLiquidate,\r\n                user.stableBorrowRate\r\n            );\r\n\r\n        } else {\r\n            //increase the total borrows by the compounded interest\r\n            reserve.increaseTotalBorrowsVariable(_balanceIncrease);\r\n\r\n            //decrease by the actual amount to liquidate\r\n            reserve.decreaseTotalBorrowsVariable(_amountToLiquidate);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the collateral reserve as a consequence of a liquidation action.\r\n    * @param _collateralReserve the address of the collateral reserve that is being liquidated\r\n    **/\r\n    function updateCollateralReserveStateOnLiquidationInternal(\r\n        address _collateralReserve\r\n    ) internal {\r\n        //update collateral reserve\r\n        reserves[_collateralReserve].updateCumulativeIndexes();\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the user being liquidated as a consequence of a liquidation action.\r\n    * @param _reserve the address of the principal reserve that is being repaid\r\n    * @param _user the address of the borrower\r\n    * @param _amountToLiquidate the amount being repaid by the liquidator\r\n    * @param _feeLiquidated the amount of origination fee being liquidated\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    **/\r\n    function updateUserStateOnLiquidationInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _amountToLiquidate,\r\n        uint256 _feeLiquidated,\r\n        uint256 _balanceIncrease\r\n    ) internal {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        //first increase by the compounded interest, then decrease by the liquidated amount\r\n        user.principalBorrowBalance = user.principalBorrowBalance.add(_balanceIncrease).sub(\r\n            _amountToLiquidate\r\n        );\r\n\r\n        if (\r\n            getUserCurrentBorrowRateMode(_reserve, _user) == CoreLibrary.InterestRateMode.VARIABLE\r\n        ) {\r\n            user.lastVariableBorrowCumulativeIndex = reserve.lastVariableBorrowCumulativeIndex;\r\n        }\r\n\r\n        if(_feeLiquidated > 0){\r\n            user.originationFee = user.originationFee.sub(_feeLiquidated);\r\n        }\r\n\r\n        //solium-disable-next-line\r\n        user.lastUpdateTimestamp = uint40(block.timestamp);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the reserve as a consequence of a stable rate rebalance\r\n    * @param _reserve the address of the principal reserve where the user borrowed\r\n    * @param _user the address of the borrower\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    **/\r\n\r\n    function updateReserveStateOnRebalanceInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _balanceIncrease\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        reserve.updateCumulativeIndexes();\r\n\r\n        reserve.increaseTotalBorrowsStableAndUpdateAverageRate(\r\n            _balanceIncrease,\r\n            user.stableBorrowRate\r\n        );\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the user as a consequence of a stable rate rebalance\r\n    * @param _reserve the address of the principal reserve where the user borrowed\r\n    * @param _user the address of the borrower\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    **/\r\n\r\n    function updateUserStateOnRebalanceInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _balanceIncrease\r\n    ) internal {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n\r\n        user.principalBorrowBalance = user.principalBorrowBalance.add(_balanceIncrease);\r\n        user.stableBorrowRate = reserve.currentStableBorrowRate;\r\n\r\n        //solium-disable-next-line\r\n        user.lastUpdateTimestamp = uint40(block.timestamp);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the user as a consequence of a stable rate rebalance\r\n    * @param _reserve the address of the principal reserve where the user borrowed\r\n    * @param _user the address of the borrower\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @param _amountBorrowed the accrued interest on the borrowed amount\r\n    **/\r\n    function updateReserveTotalBorrowsByRateModeInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _principalBalance,\r\n        uint256 _balanceIncrease,\r\n        uint256 _amountBorrowed,\r\n        CoreLibrary.InterestRateMode _newBorrowRateMode\r\n    ) internal {\r\n        CoreLibrary.InterestRateMode previousRateMode = getUserCurrentBorrowRateMode(\r\n            _reserve,\r\n            _user\r\n        );\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n\r\n        if (previousRateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n            reserve.decreaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _principalBalance,\r\n                user.stableBorrowRate\r\n            );\r\n        } else if (previousRateMode == CoreLibrary.InterestRateMode.VARIABLE) {\r\n            reserve.decreaseTotalBorrowsVariable(_principalBalance);\r\n        }\r\n\r\n        uint256 newPrincipalAmount = _principalBalance.add(_balanceIncrease).add(_amountBorrowed);\r\n        if (_newBorrowRateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            reserve.increaseTotalBorrowsStableAndUpdateAverageRate(\r\n                newPrincipalAmount,\r\n                reserve.currentStableBorrowRate\r\n            );\r\n        } else if (_newBorrowRateMode == CoreLibrary.InterestRateMode.VARIABLE) {\r\n            reserve.increaseTotalBorrowsVariable(newPrincipalAmount);\r\n        } else {\r\n            revert(\"Invalid new borrow rate mode\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Updates the reserve current stable borrow rate Rf, the current variable borrow rate Rv and the current liquidity rate Rl.\r\n    * Also updates the lastUpdateTimestamp value. Please refer to the whitepaper for further information.\r\n    * @param _reserve the address of the reserve to be updated\r\n    * @param _liquidityAdded the amount of liquidity added to the protocol (deposit or repay) in the previous action\r\n    * @param _liquidityTaken the amount of liquidity taken from the protocol (redeem or borrow)\r\n    **/\r\n\r\n    function updateReserveInterestRatesAndTimestampInternal(\r\n        address _reserve,\r\n        uint256 _liquidityAdded,\r\n        uint256 _liquidityTaken\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        (uint256 newLiquidityRate, uint256 newStableRate, uint256 newVariableRate) = IReserveInterestRateStrategy(\r\n            reserve\r\n                .interestRateStrategyAddress\r\n        )\r\n            .calculateInterestRates(\r\n            _reserve,\r\n            getReserveAvailableLiquidity(_reserve).add(_liquidityAdded).sub(_liquidityTaken),\r\n            reserve.totalBorrowsStable,\r\n            reserve.totalBorrowsVariable,\r\n            reserve.currentAverageStableBorrowRate\r\n        );\r\n\r\n        reserve.currentLiquidityRate = newLiquidityRate;\r\n        reserve.currentStableBorrowRate = newStableRate;\r\n        reserve.currentVariableBorrowRate = newVariableRate;\r\n\r\n        //solium-disable-next-line\r\n        reserve.lastUpdateTimestamp = uint40(block.timestamp);\r\n\r\n        emit ReserveUpdated(\r\n            _reserve,\r\n            newLiquidityRate,\r\n            newStableRate,\r\n            newVariableRate,\r\n            reserve.lastLiquidityCumulativeIndex,\r\n            reserve.lastVariableBorrowCumulativeIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev transfers to the protocol fees of a flashloan to the fees collection address\r\n    * @param _token the address of the token being transferred\r\n    * @param _amount the amount being transferred\r\n    **/\r\n\r\n    function transferFlashLoanProtocolFeeInternal(address _token, uint256 _amount) internal {\r\n        address payable receiver = address(uint160(addressesProvider.getTokenDistributor()));\r\n\r\n        if (_token != EthAddressLib.ethAddress()) {\r\n            ERC20(_token).safeTransfer(receiver, _amount);\r\n        } else {\r\n            receiver.transfer(_amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev updates the internal configuration of the core\r\n    **/\r\n    function refreshConfigInternal() internal {\r\n        lendingPoolAddress = addressesProvider.getLendingPool();\r\n    }\r\n\r\n    /**\r\n    * @dev adds a reserve to the array of the reserves address\r\n    **/\r\n    function addReserveToListInternal(address _reserve) internal {\r\n        bool reserveAlreadyAdded = false;\r\n        for (uint256 i = 0; i < reservesList.length; i++)\r\n            if (reservesList[i] == _reserve) {\r\n                reserveAlreadyAdded = true;\r\n            }\r\n        if (!reserveAlreadyAdded) reservesList.push(_reserve);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n* @title LendingPool contract\r\n* @notice Implements the actions of the LendingPool, and exposes accessory methods to fetch the users and reserve data\r\n* @author Aave\r\n **/\r\n\r\ncontract LendingPool is ReentrancyGuard, VersionedInitializable {\r\n    using SafeMath for uint256;\r\n    using WadRayMath for uint256;\r\n    using Address for address;\r\n\r\n    LendingPoolAddressesProvider public addressesProvider;\r\n    LendingPoolCore public core;\r\n    LendingPoolDataProvider public dataProvider;\r\n    LendingPoolParametersProvider public parametersProvider;\r\n    IFeeProvider feeProvider;\r\n\r\n    /**\r\n    * @dev emitted on deposit\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user\r\n    * @param _amount the amount to be deposited\r\n    * @param _referral the referral number of the action\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event Deposit(\r\n        address indexed _reserve,\r\n        address indexed _user,\r\n        uint256 _amount,\r\n        uint16 indexed _referral,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    /**\r\n    * @dev emitted during a redeem action.\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user\r\n    * @param _amount the amount to be deposited\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event RedeemUnderlying(\r\n        address indexed _reserve,\r\n        address indexed _user,\r\n        uint256 _amount,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    /**\r\n    * @dev emitted on borrow\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user\r\n    * @param _amount the amount to be deposited\r\n    * @param _borrowRateMode the rate mode, can be either 1-stable or 2-variable\r\n    * @param _borrowRate the rate at which the user has borrowed\r\n    * @param _originationFee the origination fee to be paid by the user\r\n    * @param _borrowBalanceIncrease the balance increase since the last borrow, 0 if it's the first time borrowing\r\n    * @param _referral the referral number of the action\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event Borrow(\r\n        address indexed _reserve,\r\n        address indexed _user,\r\n        uint256 _amount,\r\n        uint256 _borrowRateMode,\r\n        uint256 _borrowRate,\r\n        uint256 _originationFee,\r\n        uint256 _borrowBalanceIncrease,\r\n        uint16 indexed _referral,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    /**\r\n    * @dev emitted on repay\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user for which the repay has been executed\r\n    * @param _repayer the address of the user that has performed the repay action\r\n    * @param _amountMinusFees the amount repaid minus fees\r\n    * @param _fees the fees repaid\r\n    * @param _borrowBalanceIncrease the balance increase since the last action\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event Repay(\r\n        address indexed _reserve,\r\n        address indexed _user,\r\n        address indexed _repayer,\r\n        uint256 _amountMinusFees,\r\n        uint256 _fees,\r\n        uint256 _borrowBalanceIncrease,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    /**\r\n    * @dev emitted when a user performs a rate swap\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user executing the swap\r\n    * @param _newRateMode the new interest rate mode\r\n    * @param _newRate the new borrow rate\r\n    * @param _borrowBalanceIncrease the balance increase since the last action\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event Swap(\r\n        address indexed _reserve,\r\n        address indexed _user,\r\n        uint256 _newRateMode,\r\n        uint256 _newRate,\r\n        uint256 _borrowBalanceIncrease,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    /**\r\n    * @dev emitted when a user enables a reserve as collateral\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user\r\n    **/\r\n    event ReserveUsedAsCollateralEnabled(address indexed _reserve, address indexed _user);\r\n\r\n    /**\r\n    * @dev emitted when a user disables a reserve as collateral\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user\r\n    **/\r\n    event ReserveUsedAsCollateralDisabled(address indexed _reserve, address indexed _user);\r\n\r\n    /**\r\n    * @dev emitted when the stable rate of a user gets rebalanced\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user for which the rebalance has been executed\r\n    * @param _newStableRate the new stable borrow rate after the rebalance\r\n    * @param _borrowBalanceIncrease the balance increase since the last action\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event RebalanceStableBorrowRate(\r\n        address indexed _reserve,\r\n        address indexed _user,\r\n        uint256 _newStableRate,\r\n        uint256 _borrowBalanceIncrease,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    /**\r\n    * @dev emitted when a flashloan is executed\r\n    * @param _target the address of the flashLoanReceiver\r\n    * @param _reserve the address of the reserve\r\n    * @param _amount the amount requested\r\n    * @param _totalFee the total fee on the amount\r\n    * @param _protocolFee the part of the fee for the protocol\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event FlashLoan(\r\n        address indexed _target,\r\n        address indexed _reserve,\r\n        uint256 _amount,\r\n        uint256 _totalFee,\r\n        uint256 _protocolFee,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    /**\r\n    * @dev these events are not emitted directly by the LendingPool\r\n    * but they are declared here as the LendingPoolLiquidationManager\r\n    * is executed using a delegateCall().\r\n    * This allows to have the events in the generated ABI for LendingPool.\r\n    **/\r\n\r\n    /**\r\n    * @dev emitted when a borrow fee is liquidated\r\n    * @param _collateral the address of the collateral being liquidated\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user being liquidated\r\n    * @param _feeLiquidated the total fee liquidated\r\n    * @param _liquidatedCollateralForFee the amount of collateral received by the protocol in exchange for the fee\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event OriginationFeeLiquidated(\r\n        address indexed _collateral,\r\n        address indexed _reserve,\r\n        address indexed _user,\r\n        uint256 _feeLiquidated,\r\n        uint256 _liquidatedCollateralForFee,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    /**\r\n    * @dev emitted when a borrower is liquidated\r\n    * @param _collateral the address of the collateral being liquidated\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user being liquidated\r\n    * @param _purchaseAmount the total amount liquidated\r\n    * @param _liquidatedCollateralAmount the amount of collateral being liquidated\r\n    * @param _accruedBorrowInterest the amount of interest accrued by the borrower since the last action\r\n    * @param _liquidator the address of the liquidator\r\n    * @param _receiveAToken true if the liquidator wants to receive aTokens, false otherwise\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event LiquidationCall(\r\n        address indexed _collateral,\r\n        address indexed _reserve,\r\n        address indexed _user,\r\n        uint256 _purchaseAmount,\r\n        uint256 _liquidatedCollateralAmount,\r\n        uint256 _accruedBorrowInterest,\r\n        address _liquidator,\r\n        bool _receiveAToken,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    /**\r\n    * @dev functions affected by this modifier can only be invoked by the\r\n    * aToken.sol contract\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    modifier onlyOverlyingAToken(address _reserve) {\r\n        require(\r\n            msg.sender == core.getReserveATokenAddress(_reserve),\r\n            \"The caller of this function can only be the aToken contract of this reserve\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev functions affected by this modifier can only be invoked if the reserve is active\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    modifier onlyActiveReserve(address _reserve) {\r\n        requireReserveActiveInternal(_reserve);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev functions affected by this modifier can only be invoked if the reserve is not freezed.\r\n    * A freezed reserve only allows redeems, repays, rebalances and liquidations.\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    modifier onlyUnfreezedReserve(address _reserve) {\r\n        requireReserveNotFreezedInternal(_reserve);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev functions affected by this modifier can only be invoked if the provided _amount input parameter\r\n    * is not zero.\r\n    * @param _amount the amount provided\r\n    **/\r\n    modifier onlyAmountGreaterThanZero(uint256 _amount) {\r\n        requireAmountGreaterThanZeroInternal(_amount);\r\n        _;\r\n    }\r\n\r\n    uint256 public constant UINT_MAX_VALUE = uint256(-1);\r\n\r\n    uint256 public constant LENDINGPOOL_REVISION = 0x2;\r\n\r\n    function getRevision() internal pure returns (uint256) {\r\n        return LENDINGPOOL_REVISION;\r\n    }\r\n\r\n    /**\r\n    * @dev this function is invoked by the proxy contract when the LendingPool contract is added to the\r\n    * AddressesProvider.\r\n    * @param _addressesProvider the address of the LendingPoolAddressesProvider registry\r\n    **/\r\n    function initialize(LendingPoolAddressesProvider _addressesProvider) public initializer {\r\n        addressesProvider = _addressesProvider;\r\n        core = LendingPoolCore(addressesProvider.getLendingPoolCore());\r\n        dataProvider = LendingPoolDataProvider(addressesProvider.getLendingPoolDataProvider());\r\n        parametersProvider = LendingPoolParametersProvider(\r\n            addressesProvider.getLendingPoolParametersProvider()\r\n        );\r\n        feeProvider = IFeeProvider(addressesProvider.getFeeProvider());\r\n    }\r\n\r\n    /**\r\n    * @dev deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens)\r\n    * is minted.\r\n    * @param _reserve the address of the reserve\r\n    * @param _amount the amount to be deposited\r\n    * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.\r\n    **/\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        onlyActiveReserve(_reserve)\r\n        onlyUnfreezedReserve(_reserve)\r\n        onlyAmountGreaterThanZero(_amount)\r\n    {\r\n        AToken aToken = AToken(core.getReserveATokenAddress(_reserve));\r\n\r\n        bool isFirstDeposit = aToken.balanceOf(msg.sender) == 0;\r\n\r\n        core.updateStateOnDeposit(_reserve, msg.sender, _amount, isFirstDeposit);\r\n\r\n        //minting AToken to user 1:1 with the specific exchange rate\r\n        aToken.mintOnDeposit(msg.sender, _amount);\r\n\r\n        //transfer to the core contract\r\n        core.transferToReserve.value(msg.value)(_reserve, msg.sender, _amount);\r\n\r\n        //solium-disable-next-line\r\n        emit Deposit(_reserve, msg.sender, _amount, _referralCode, block.timestamp);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Redeems the underlying amount of assets requested by _user.\r\n    * This function is executed by the overlying aToken contract in response to a redeem action.\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user performing the action\r\n    * @param _amount the underlying amount to be redeemed\r\n    **/\r\n    function redeemUnderlying(\r\n        address _reserve,\r\n        address payable _user,\r\n        uint256 _amount,\r\n        uint256 _aTokenBalanceAfterRedeem\r\n    )\r\n        external\r\n        nonReentrant\r\n        onlyOverlyingAToken(_reserve)\r\n        onlyActiveReserve(_reserve)\r\n        onlyAmountGreaterThanZero(_amount)\r\n    {\r\n        uint256 currentAvailableLiquidity = core.getReserveAvailableLiquidity(_reserve);\r\n        require(\r\n            currentAvailableLiquidity >= _amount,\r\n            \"There is not enough liquidity available to redeem\"\r\n        );\r\n\r\n        core.updateStateOnRedeem(_reserve, _user, _amount, _aTokenBalanceAfterRedeem == 0);\r\n\r\n        core.transferToUser(_reserve, _user, _amount);\r\n\r\n        //solium-disable-next-line\r\n        emit RedeemUnderlying(_reserve, _user, _amount, block.timestamp);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev data structures for local computations in the borrow() method.\r\n    */\r\n\r\n    struct BorrowLocalVars {\r\n        uint256 principalBorrowBalance;\r\n        uint256 currentLtv;\r\n        uint256 currentLiquidationThreshold;\r\n        uint256 borrowFee;\r\n        uint256 requestedBorrowAmountETH;\r\n        uint256 amountOfCollateralNeededETH;\r\n        uint256 userCollateralBalanceETH;\r\n        uint256 userBorrowBalanceETH;\r\n        uint256 userTotalFeesETH;\r\n        uint256 borrowBalanceIncrease;\r\n        uint256 currentReserveStableRate;\r\n        uint256 availableLiquidity;\r\n        uint256 reserveDecimals;\r\n        uint256 finalUserBorrowRate;\r\n        CoreLibrary.InterestRateMode rateMode;\r\n        bool healthFactorBelowThreshold;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows users to borrow a specific amount of the reserve currency, provided that the borrower\r\n    * already deposited enough collateral.\r\n    * @param _reserve the address of the reserve\r\n    * @param _amount the amount to be borrowed\r\n    * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)\r\n    **/\r\n    function borrow(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _interestRateMode,\r\n        uint16 _referralCode\r\n    )\r\n        external\r\n        nonReentrant\r\n        onlyActiveReserve(_reserve)\r\n        onlyUnfreezedReserve(_reserve)\r\n        onlyAmountGreaterThanZero(_amount)\r\n    {\r\n        // Usage of a memory struct of vars to avoid \"Stack too deep\" errors due to local variables\r\n        BorrowLocalVars memory vars;\r\n\r\n        //check that the reserve is enabled for borrowing\r\n        require(core.isReserveBorrowingEnabled(_reserve), \"Reserve is not enabled for borrowing\");\r\n        //validate interest rate mode\r\n        require(\r\n            uint256(CoreLibrary.InterestRateMode.VARIABLE) == _interestRateMode ||\r\n                uint256(CoreLibrary.InterestRateMode.STABLE) == _interestRateMode,\r\n            \"Invalid interest rate mode selected\"\r\n        );\r\n\r\n        //cast the rateMode to coreLibrary.interestRateMode\r\n        vars.rateMode = CoreLibrary.InterestRateMode(_interestRateMode);\r\n\r\n        //check that the amount is available in the reserve\r\n        vars.availableLiquidity = core.getReserveAvailableLiquidity(_reserve);\r\n\r\n        require(\r\n            vars.availableLiquidity >= _amount,\r\n            \"There is not enough liquidity available in the reserve\"\r\n        );\r\n\r\n        (\r\n            ,\r\n            vars.userCollateralBalanceETH,\r\n            vars.userBorrowBalanceETH,\r\n            vars.userTotalFeesETH,\r\n            vars.currentLtv,\r\n            vars.currentLiquidationThreshold,\r\n            ,\r\n            vars.healthFactorBelowThreshold\r\n        ) = dataProvider.calculateUserGlobalData(msg.sender);\r\n\r\n        require(vars.userCollateralBalanceETH > 0, \"The collateral balance is 0\");\r\n\r\n        require(\r\n            !vars.healthFactorBelowThreshold,\r\n            \"The borrower can already be liquidated so he cannot borrow more\"\r\n        );\r\n\r\n        //calculating fees\r\n        vars.borrowFee = feeProvider.calculateLoanOriginationFee(msg.sender, _amount);\r\n\r\n        require(vars.borrowFee > 0, \"The amount to borrow is too small\");\r\n\r\n        vars.amountOfCollateralNeededETH = dataProvider.calculateCollateralNeededInETH(\r\n            _reserve,\r\n            _amount,\r\n            vars.borrowFee,\r\n            vars.userBorrowBalanceETH,\r\n            vars.userTotalFeesETH,\r\n            vars.currentLtv\r\n        );\r\n\r\n        require(\r\n            vars.amountOfCollateralNeededETH <= vars.userCollateralBalanceETH,\r\n            \"There is not enough collateral to cover a new borrow\"\r\n        );\r\n\r\n        /**\r\n        * Following conditions need to be met if the user is borrowing at a stable rate:\r\n        * 1. Reserve must be enabled for stable rate borrowing\r\n        * 2. Users cannot borrow from the reserve if their collateral is (mostly) the same currency\r\n        *    they are borrowing, to prevent abuses.\r\n        * 3. Users will be able to borrow only a relatively small, configurable amount of the total\r\n        *    liquidity\r\n        **/\r\n\r\n        if (vars.rateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            //check if the borrow mode is stable and if stable rate borrowing is enabled on this reserve\r\n            require(\r\n                core.isUserAllowedToBorrowAtStable(_reserve, msg.sender, _amount),\r\n                \"User cannot borrow the selected amount with a stable rate\"\r\n            );\r\n\r\n            //calculate the max available loan size in stable rate mode as a percentage of the\r\n            //available liquidity\r\n            uint256 maxLoanPercent = parametersProvider.getMaxStableRateBorrowSizePercent();\r\n            uint256 maxLoanSizeStable = vars.availableLiquidity.mul(maxLoanPercent).div(100);\r\n\r\n            require(\r\n                _amount <= maxLoanSizeStable,\r\n                \"User is trying to borrow too much liquidity at a stable rate\"\r\n            );\r\n        }\r\n\r\n        //all conditions passed - borrow is accepted\r\n        (vars.finalUserBorrowRate, vars.borrowBalanceIncrease) = core.updateStateOnBorrow(\r\n            _reserve,\r\n            msg.sender,\r\n            _amount,\r\n            vars.borrowFee,\r\n            vars.rateMode\r\n        );\r\n\r\n        //if we reached this point, we can transfer\r\n        core.transferToUser(_reserve, msg.sender, _amount);\r\n\r\n        emit Borrow(\r\n            _reserve,\r\n            msg.sender,\r\n            _amount,\r\n            _interestRateMode,\r\n            vars.finalUserBorrowRate,\r\n            vars.borrowFee,\r\n            vars.borrowBalanceIncrease,\r\n            _referralCode,\r\n            //solium-disable-next-line\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @notice repays a borrow on the specific reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).\r\n    * @dev the target user is defined by _onBehalfOf. If there is no repayment on behalf of another account,\r\n    * _onBehalfOf must be equal to msg.sender.\r\n    * @param _reserve the address of the reserve on which the user borrowed\r\n    * @param _amount the amount to repay, or uint256(-1) if the user wants to repay everything\r\n    * @param _onBehalfOf the address for which msg.sender is repaying.\r\n    **/\r\n\r\n    struct RepayLocalVars {\r\n        uint256 principalBorrowBalance;\r\n        uint256 compoundedBorrowBalance;\r\n        uint256 borrowBalanceIncrease;\r\n        bool isETH;\r\n        uint256 paybackAmount;\r\n        uint256 paybackAmountMinusFees;\r\n        uint256 currentStableRate;\r\n        uint256 originationFee;\r\n    }\r\n\r\n    function repay(address _reserve, uint256 _amount, address payable _onBehalfOf)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        onlyActiveReserve(_reserve)\r\n        onlyAmountGreaterThanZero(_amount)\r\n    {\r\n        // Usage of a memory struct of vars to avoid \"Stack too deep\" errors due to local variables\r\n        RepayLocalVars memory vars;\r\n\r\n        (\r\n            vars.principalBorrowBalance,\r\n            vars.compoundedBorrowBalance,\r\n            vars.borrowBalanceIncrease\r\n        ) = core.getUserBorrowBalances(_reserve, _onBehalfOf);\r\n\r\n        vars.originationFee = core.getUserOriginationFee(_reserve, _onBehalfOf);\r\n        vars.isETH = EthAddressLib.ethAddress() == _reserve;\r\n\r\n        require(vars.compoundedBorrowBalance > 0, \"The user does not have any borrow pending\");\r\n\r\n        require(\r\n            _amount != UINT_MAX_VALUE || msg.sender == _onBehalfOf,\r\n            \"To repay on behalf of an user an explicit amount to repay is needed.\"\r\n        );\r\n\r\n        //default to max amount\r\n        vars.paybackAmount = vars.compoundedBorrowBalance.add(vars.originationFee);\r\n\r\n        if (_amount != UINT_MAX_VALUE && _amount < vars.paybackAmount) {\r\n            vars.paybackAmount = _amount;\r\n        }\r\n\r\n        require(\r\n            !vars.isETH || msg.value >= vars.paybackAmount,\r\n            \"Invalid msg.value sent for the repayment\"\r\n        );\r\n\r\n        //if the amount is smaller than the origination fee, just transfer the amount to the fee destination address\r\n        if (vars.paybackAmount <= vars.originationFee) {\r\n            core.updateStateOnRepay(\r\n                _reserve,\r\n                _onBehalfOf,\r\n                0,\r\n                vars.paybackAmount,\r\n                vars.borrowBalanceIncrease,\r\n                false\r\n            );\r\n\r\n            core.transferToFeeCollectionAddress.value(vars.isETH ? vars.paybackAmount : 0)(\r\n                _reserve,\r\n                _onBehalfOf,\r\n                vars.paybackAmount,\r\n                addressesProvider.getTokenDistributor()\r\n            );\r\n\r\n            emit Repay(\r\n                _reserve,\r\n                _onBehalfOf,\r\n                msg.sender,\r\n                0,\r\n                vars.paybackAmount,\r\n                vars.borrowBalanceIncrease,\r\n                //solium-disable-next-line\r\n                block.timestamp\r\n            );\r\n            return;\r\n        }\r\n\r\n        vars.paybackAmountMinusFees = vars.paybackAmount.sub(vars.originationFee);\r\n\r\n        core.updateStateOnRepay(\r\n            _reserve,\r\n            _onBehalfOf,\r\n            vars.paybackAmountMinusFees,\r\n            vars.originationFee,\r\n            vars.borrowBalanceIncrease,\r\n            vars.compoundedBorrowBalance == vars.paybackAmountMinusFees\r\n        );\r\n\r\n        //if the user didn't repay the origination fee, transfer the fee to the fee collection address\r\n        if(vars.originationFee > 0) {\r\n            core.transferToFeeCollectionAddress.value(vars.isETH ? vars.originationFee : 0)(\r\n                _reserve,\r\n                _onBehalfOf,\r\n                vars.originationFee,\r\n                addressesProvider.getTokenDistributor()\r\n            );\r\n        }\r\n\r\n        //sending the total msg.value if the transfer is ETH.\r\n        //the transferToReserve() function will take care of sending the\r\n        //excess ETH back to the caller\r\n        core.transferToReserve.value(vars.isETH ? msg.value.sub(vars.originationFee) : 0)(\r\n            _reserve,\r\n            msg.sender,\r\n            vars.paybackAmountMinusFees\r\n        );\r\n\r\n        emit Repay(\r\n            _reserve,\r\n            _onBehalfOf,\r\n            msg.sender,\r\n            vars.paybackAmountMinusFees,\r\n            vars.originationFee,\r\n            vars.borrowBalanceIncrease,\r\n            //solium-disable-next-line\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev borrowers can user this function to swap between stable and variable borrow rate modes.\r\n    * @param _reserve the address of the reserve on which the user borrowed\r\n    **/\r\n    function swapBorrowRateMode(address _reserve)\r\n        external\r\n        nonReentrant\r\n        onlyActiveReserve(_reserve)\r\n        onlyUnfreezedReserve(_reserve)\r\n    {\r\n        (uint256 principalBorrowBalance, uint256 compoundedBorrowBalance, uint256 borrowBalanceIncrease) = core\r\n            .getUserBorrowBalances(_reserve, msg.sender);\r\n\r\n        require(\r\n            compoundedBorrowBalance > 0,\r\n            \"User does not have a borrow in progress on this reserve\"\r\n        );\r\n\r\n        CoreLibrary.InterestRateMode currentRateMode = core.getUserCurrentBorrowRateMode(\r\n            _reserve,\r\n            msg.sender\r\n        );\r\n\r\n        if (currentRateMode == CoreLibrary.InterestRateMode.VARIABLE) {\r\n            /**\r\n            * user wants to swap to stable, before swapping we need to ensure that\r\n            * 1. stable borrow rate is enabled on the reserve\r\n            * 2. user is not trying to abuse the reserve by depositing\r\n            * more collateral than he is borrowing, artificially lowering\r\n            * the interest rate, borrowing at variable, and switching to stable\r\n            **/\r\n            require(\r\n                core.isUserAllowedToBorrowAtStable(_reserve, msg.sender, compoundedBorrowBalance),\r\n                \"User cannot borrow the selected amount at stable\"\r\n            );\r\n        }\r\n\r\n        (CoreLibrary.InterestRateMode newRateMode, uint256 newBorrowRate) = core\r\n            .updateStateOnSwapRate(\r\n            _reserve,\r\n            msg.sender,\r\n            principalBorrowBalance,\r\n            compoundedBorrowBalance,\r\n            borrowBalanceIncrease,\r\n            currentRateMode\r\n        );\r\n\r\n        emit Swap(\r\n            _reserve,\r\n            msg.sender,\r\n            uint256(newRateMode),\r\n            newBorrowRate,\r\n            borrowBalanceIncrease,\r\n            //solium-disable-next-line\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev rebalances the stable interest rate of a user if current liquidity rate > user stable rate.\r\n    * this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair\r\n    * rate. Anyone can call this function though.\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user to be rebalanced\r\n    **/\r\n    function rebalanceStableBorrowRate(address _reserve, address _user)\r\n        external\r\n        nonReentrant\r\n        onlyActiveReserve(_reserve)\r\n    {\r\n        (, uint256 compoundedBalance, uint256 borrowBalanceIncrease) = core.getUserBorrowBalances(\r\n            _reserve,\r\n            _user\r\n        );\r\n\r\n        //step 1: user must be borrowing on _reserve at a stable rate\r\n        require(compoundedBalance > 0, \"User does not have any borrow for this reserve\");\r\n\r\n        require(\r\n            core.getUserCurrentBorrowRateMode(_reserve, _user) ==\r\n                CoreLibrary.InterestRateMode.STABLE,\r\n            \"The user borrow is variable and cannot be rebalanced\"\r\n        );\r\n\r\n        uint256 userCurrentStableRate = core.getUserCurrentStableBorrowRate(_reserve, _user);\r\n        uint256 liquidityRate = core.getReserveCurrentLiquidityRate(_reserve);\r\n        uint256 reserveCurrentStableRate = core.getReserveCurrentStableBorrowRate(_reserve);\r\n        uint256 rebalanceDownRateThreshold = reserveCurrentStableRate.rayMul(\r\n            WadRayMath.ray().add(parametersProvider.getRebalanceDownRateDelta())\r\n        );\r\n\r\n        //step 2: we have two possible situations to rebalance:\r\n\r\n        //1. user stable borrow rate is below the current liquidity rate. The loan needs to be rebalanced,\r\n        //as this situation can be abused (user putting back the borrowed liquidity in the same reserve to earn on it)\r\n        //2. user stable rate is above the market avg borrow rate of a certain delta, and utilization rate is low.\r\n        //In this case, the user is paying an interest that is too high, and needs to be rescaled down.\r\n        if (\r\n            userCurrentStableRate < liquidityRate ||\r\n            userCurrentStableRate > rebalanceDownRateThreshold\r\n        ) {\r\n            uint256 newStableRate = core.updateStateOnRebalance(\r\n                _reserve,\r\n                _user,\r\n                borrowBalanceIncrease\r\n            );\r\n\r\n            emit RebalanceStableBorrowRate(\r\n                _reserve,\r\n                _user,\r\n                newStableRate,\r\n                borrowBalanceIncrease,\r\n                //solium-disable-next-line\r\n                block.timestamp\r\n            );\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        revert(\"Interest rate rebalance conditions were not met\");\r\n    }\r\n\r\n    /**\r\n    * @dev allows depositors to enable or disable a specific deposit as collateral.\r\n    * @param _reserve the address of the reserve\r\n    * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.\r\n    **/\r\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral)\r\n        external\r\n        nonReentrant\r\n        onlyActiveReserve(_reserve)\r\n        onlyUnfreezedReserve(_reserve)\r\n    {\r\n        uint256 underlyingBalance = core.getUserUnderlyingAssetBalance(_reserve, msg.sender);\r\n\r\n        require(underlyingBalance > 0, \"User does not have any liquidity deposited\");\r\n\r\n        require(\r\n            dataProvider.balanceDecreaseAllowed(_reserve, msg.sender, underlyingBalance),\r\n            \"User deposit is already being used as collateral\"\r\n        );\r\n\r\n        core.setUserUseReserveAsCollateral(_reserve, msg.sender, _useAsCollateral);\r\n\r\n        if (_useAsCollateral) {\r\n            emit ReserveUsedAsCollateralEnabled(_reserve, msg.sender);\r\n        } else {\r\n            emit ReserveUsedAsCollateralDisabled(_reserve, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev users can invoke this function to liquidate an undercollateralized position.\r\n    * @param _reserve the address of the collateral to liquidated\r\n    * @param _reserve the address of the principal reserve\r\n    * @param _user the address of the borrower\r\n    * @param _purchaseAmount the amount of principal that the liquidator wants to repay\r\n    * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if\r\n    * he wants to receive the underlying asset directly\r\n    **/\r\n    function liquidationCall(\r\n        address _collateral,\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _purchaseAmount,\r\n        bool _receiveAToken\r\n    ) external payable nonReentrant onlyActiveReserve(_reserve) onlyActiveReserve(_collateral) {\r\n        address liquidationManager = addressesProvider.getLendingPoolLiquidationManager();\r\n\r\n        //solium-disable-next-line\r\n        (bool success, bytes memory result) = liquidationManager.delegatecall(\r\n            abi.encodeWithSignature(\r\n                \"liquidationCall(address,address,address,uint256,bool)\",\r\n                _collateral,\r\n                _reserve,\r\n                _user,\r\n                _purchaseAmount,\r\n                _receiveAToken\r\n            )\r\n        );\r\n        require(success, \"Liquidation call failed\");\r\n\r\n        (uint256 returnCode, string memory returnMessage) = abi.decode(result, (uint256, string));\r\n\r\n        if (returnCode != 0) {\r\n            //error found\r\n            revert(string(abi.encodePacked(\"Liquidation failed: \", returnMessage)));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev allows smartcontracts to access the liquidity of the pool within one transaction,\r\n    * as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts\r\n    * that must be kept into consideration. For further details please visit https://developers.aave.com\r\n    * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.\r\n    * @param _reserve the address of the principal reserve\r\n    * @param _amount the amount requested for this flashloan\r\n    **/\r\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes memory _params)\r\n        public\r\n        nonReentrant\r\n        onlyActiveReserve(_reserve)\r\n        onlyAmountGreaterThanZero(_amount)\r\n    {\r\n        //check that the reserve has enough available liquidity\r\n        //we avoid using the getAvailableLiquidity() function in LendingPoolCore to save gas\r\n        uint256 availableLiquidityBefore = _reserve == EthAddressLib.ethAddress()\r\n            ? address(core).balance\r\n            : IERC20(_reserve).balanceOf(address(core));\r\n\r\n        require(\r\n            availableLiquidityBefore >= _amount,\r\n            \"There is not enough liquidity available to borrow\"\r\n        );\r\n\r\n        (uint256 totalFeeBips, uint256 protocolFeeBips) = parametersProvider\r\n            .getFlashLoanFeesInBips();\r\n        //calculate amount fee\r\n        uint256 amountFee = _amount.mul(totalFeeBips).div(10000);\r\n\r\n        //protocol fee is the part of the amountFee reserved for the protocol - the rest goes to depositors\r\n        uint256 protocolFee = amountFee.mul(protocolFeeBips).div(10000);\r\n        require(\r\n            amountFee > 0 && protocolFee > 0,\r\n            \"The requested amount is too small for a flashLoan.\"\r\n        );\r\n\r\n        //get the FlashLoanReceiver instance\r\n        IFlashLoanReceiver receiver = IFlashLoanReceiver(_receiver);\r\n\r\n        address payable userPayable = address(uint160(_receiver));\r\n\r\n        //transfer funds to the receiver\r\n        core.transferToUser(_reserve, userPayable, _amount);\r\n\r\n        //execute action of the receiver\r\n        receiver.executeOperation(_reserve, _amount, amountFee, _params);\r\n\r\n        //check that the actual balance of the core contract includes the returned amount\r\n        uint256 availableLiquidityAfter = _reserve == EthAddressLib.ethAddress()\r\n            ? address(core).balance\r\n            : IERC20(_reserve).balanceOf(address(core));\r\n\r\n        require(\r\n            availableLiquidityAfter == availableLiquidityBefore.add(amountFee),\r\n            \"The actual balance of the protocol is inconsistent\"\r\n        );\r\n\r\n        core.updateStateOnFlashLoan(\r\n            _reserve,\r\n            availableLiquidityBefore,\r\n            amountFee.sub(protocolFee),\r\n            protocolFee\r\n        );\r\n\r\n        //solium-disable-next-line\r\n        emit FlashLoan(_receiver, _reserve, _amount, amountFee, protocolFee, block.timestamp);\r\n    }\r\n\r\n    /**\r\n    * @dev accessory functions to fetch data from the core contract\r\n    **/\r\n\r\n    function getReserveConfigurationData(address _reserve)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 ltv,\r\n            uint256 liquidationThreshold,\r\n            uint256 liquidationBonus,\r\n            address interestRateStrategyAddress,\r\n            bool usageAsCollateralEnabled,\r\n            bool borrowingEnabled,\r\n            bool stableBorrowRateEnabled,\r\n            bool isActive\r\n        )\r\n    {\r\n        return dataProvider.getReserveConfigurationData(_reserve);\r\n    }\r\n\r\n    function getReserveData(address _reserve)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalLiquidity,\r\n            uint256 availableLiquidity,\r\n            uint256 totalBorrowsStable,\r\n            uint256 totalBorrowsVariable,\r\n            uint256 liquidityRate,\r\n            uint256 variableBorrowRate,\r\n            uint256 stableBorrowRate,\r\n            uint256 averageStableBorrowRate,\r\n            uint256 utilizationRate,\r\n            uint256 liquidityIndex,\r\n            uint256 variableBorrowIndex,\r\n            address aTokenAddress,\r\n            uint40 lastUpdateTimestamp\r\n        )\r\n    {\r\n        return dataProvider.getReserveData(_reserve);\r\n    }\r\n\r\n    function getUserAccountData(address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityETH,\r\n            uint256 totalCollateralETH,\r\n            uint256 totalBorrowsETH,\r\n            uint256 totalFeesETH,\r\n            uint256 availableBorrowsETH,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 ltv,\r\n            uint256 healthFactor\r\n        )\r\n    {\r\n        return dataProvider.getUserAccountData(_user);\r\n    }\r\n\r\n    function getUserReserveData(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 currentATokenBalance,\r\n            uint256 currentBorrowBalance,\r\n            uint256 principalBorrowBalance,\r\n            uint256 borrowRateMode,\r\n            uint256 borrowRate,\r\n            uint256 liquidityRate,\r\n            uint256 originationFee,\r\n            uint256 variableBorrowIndex,\r\n            uint256 lastUpdateTimestamp,\r\n            bool usageAsCollateralEnabled\r\n        )\r\n    {\r\n        return dataProvider.getUserReserveData(_reserve, _user);\r\n    }\r\n\r\n    function getReserves() external view returns (address[] memory) {\r\n        return core.getReserves();\r\n    }\r\n\r\n    /**\r\n    * @dev internal function to save on code size for the onlyActiveReserve modifier\r\n    **/\r\n    function requireReserveActiveInternal(address _reserve) internal view {\r\n        require(core.getReserveIsActive(_reserve), \"Action requires an active reserve\");\r\n    }\r\n\r\n    /**\r\n    * @notice internal function to save on code size for the onlyUnfreezedReserve modifier\r\n    **/\r\n    function requireReserveNotFreezedInternal(address _reserve) internal view {\r\n        require(!core.getReserveIsFreezed(_reserve), \"Action requires an unfreezed reserve\");\r\n    }\r\n\r\n    /**\r\n    * @notice internal function to save on code size for the onlyAmountGreaterThanZero modifier\r\n    **/\r\n    function requireAmountGreaterThanZeroInternal(uint256 _amount) internal pure {\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n    }\r\n}\r\n\r\n/**\r\n* @title LendingPoolLiquidationManager contract\r\n* @author Aave\r\n* @notice Implements the liquidation function.\r\n**/\r\ncontract LendingPoolLiquidationManager is ReentrancyGuard, VersionedInitializable {\r\n    using SafeMath for uint256;\r\n    using WadRayMath for uint256;\r\n    using Address for address;\r\n\r\n    LendingPoolAddressesProvider public addressesProvider;\r\n    LendingPoolCore core;\r\n    LendingPoolDataProvider dataProvider;\r\n    LendingPoolParametersProvider parametersProvider;\r\n    IFeeProvider feeProvider;\r\n    address ethereumAddress;\r\n\r\n    uint256 constant LIQUIDATION_CLOSE_FACTOR_PERCENT = 50;\r\n\r\n    /**\r\n    * @dev emitted when a borrow fee is liquidated\r\n    * @param _collateral the address of the collateral being liquidated\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user being liquidated\r\n    * @param _feeLiquidated the total fee liquidated\r\n    * @param _liquidatedCollateralForFee the amount of collateral received by the protocol in exchange for the fee\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event OriginationFeeLiquidated(\r\n        address indexed _collateral,\r\n        address indexed _reserve,\r\n        address indexed _user,\r\n        uint256 _feeLiquidated,\r\n        uint256 _liquidatedCollateralForFee,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    /**\r\n    * @dev emitted when a borrower is liquidated\r\n    * @param _collateral the address of the collateral being liquidated\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user being liquidated\r\n    * @param _purchaseAmount the total amount liquidated\r\n    * @param _liquidatedCollateralAmount the amount of collateral being liquidated\r\n    * @param _accruedBorrowInterest the amount of interest accrued by the borrower since the last action\r\n    * @param _liquidator the address of the liquidator\r\n    * @param _receiveAToken true if the liquidator wants to receive aTokens, false otherwise\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event LiquidationCall(\r\n        address indexed _collateral,\r\n        address indexed _reserve,\r\n        address indexed _user,\r\n        uint256 _purchaseAmount,\r\n        uint256 _liquidatedCollateralAmount,\r\n        uint256 _accruedBorrowInterest,\r\n        address _liquidator,\r\n        bool _receiveAToken,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    enum LiquidationErrors {\r\n        NO_ERROR,\r\n        NO_COLLATERAL_AVAILABLE,\r\n        COLLATERAL_CANNOT_BE_LIQUIDATED,\r\n        CURRRENCY_NOT_BORROWED,\r\n        HEALTH_FACTOR_ABOVE_THRESHOLD,\r\n        NOT_ENOUGH_LIQUIDITY\r\n    }\r\n\r\n    struct LiquidationCallLocalVars {\r\n        uint256 userCollateralBalance;\r\n        uint256 userCompoundedBorrowBalance;\r\n        uint256 borrowBalanceIncrease;\r\n        uint256 maxPrincipalAmountToLiquidate;\r\n        uint256 actualAmountToLiquidate;\r\n        uint256 liquidationRatio;\r\n        uint256 collateralPrice;\r\n        uint256 principalCurrencyPrice;\r\n        uint256 maxAmountCollateralToLiquidate;\r\n        uint256 originationFee;\r\n        uint256 feeLiquidated;\r\n        uint256 liquidatedCollateralForFee;\r\n        CoreLibrary.InterestRateMode borrowRateMode;\r\n        uint256 userStableRate;\r\n        bool isCollateralEnabled;\r\n        bool healthFactorBelowThreshold;\r\n    }\r\n\r\n    /**\r\n    * @dev as the contract extends the VersionedInitializable contract to match the state\r\n    * of the LendingPool contract, the getRevision() function is needed.\r\n    */\r\n    function getRevision() internal pure returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n    * @dev users can invoke this function to liquidate an undercollateralized position.\r\n    * @param _reserve the address of the collateral to liquidated\r\n    * @param _reserve the address of the principal reserve\r\n    * @param _user the address of the borrower\r\n    * @param _purchaseAmount the amount of principal that the liquidator wants to repay\r\n    * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if\r\n    * he wants to receive the underlying asset directly\r\n    **/\r\n    function liquidationCall(\r\n        address _collateral,\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _purchaseAmount,\r\n        bool _receiveAToken\r\n    ) external payable returns (uint256, string memory) {\r\n        // Usage of a memory struct of vars to avoid \"Stack too deep\" errors due to local variables\r\n        LiquidationCallLocalVars memory vars;\r\n\r\n        (, , , , , , , vars.healthFactorBelowThreshold) = dataProvider.calculateUserGlobalData(\r\n            _user\r\n        );\r\n\r\n        if (!vars.healthFactorBelowThreshold) {\r\n            return (\r\n                uint256(LiquidationErrors.HEALTH_FACTOR_ABOVE_THRESHOLD),\r\n                \"Health factor is not below the threshold\"\r\n            );\r\n        }\r\n\r\n        vars.userCollateralBalance = core.getUserUnderlyingAssetBalance(_collateral, _user);\r\n\r\n        //if _user hasn't deposited this specific collateral, nothing can be liquidated\r\n        if (vars.userCollateralBalance == 0) {\r\n            return (\r\n                uint256(LiquidationErrors.NO_COLLATERAL_AVAILABLE),\r\n                \"Invalid collateral to liquidate\"\r\n            );\r\n        }\r\n\r\n        vars.isCollateralEnabled =\r\n            core.isReserveUsageAsCollateralEnabled(_collateral) &&\r\n            core.isUserUseReserveAsCollateralEnabled(_collateral, _user);\r\n\r\n        //if _collateral isn't enabled as collateral by _user, it cannot be liquidated\r\n        if (!vars.isCollateralEnabled) {\r\n            return (\r\n                uint256(LiquidationErrors.COLLATERAL_CANNOT_BE_LIQUIDATED),\r\n                \"The collateral chosen cannot be liquidated\"\r\n            );\r\n        }\r\n\r\n        //if the user hasn't borrowed the specific currency defined by _reserve, it cannot be liquidated\r\n        (, vars.userCompoundedBorrowBalance, vars.borrowBalanceIncrease) = core\r\n            .getUserBorrowBalances(_reserve, _user);\r\n\r\n        if (vars.userCompoundedBorrowBalance == 0) {\r\n            return (\r\n                uint256(LiquidationErrors.CURRRENCY_NOT_BORROWED),\r\n                \"User did not borrow the specified currency\"\r\n            );\r\n        }\r\n\r\n        //all clear - calculate the max principal amount that can be liquidated\r\n        vars.maxPrincipalAmountToLiquidate = vars\r\n            .userCompoundedBorrowBalance\r\n            .mul(LIQUIDATION_CLOSE_FACTOR_PERCENT)\r\n            .div(100);\r\n\r\n        vars.actualAmountToLiquidate = _purchaseAmount > vars.maxPrincipalAmountToLiquidate\r\n            ? vars.maxPrincipalAmountToLiquidate\r\n            : _purchaseAmount;\r\n\r\n        (uint256 maxCollateralToLiquidate, uint256 principalAmountNeeded) = calculateAvailableCollateralToLiquidate(\r\n            _collateral,\r\n            _reserve,\r\n            vars.actualAmountToLiquidate,\r\n            vars.userCollateralBalance\r\n        );\r\n\r\n        vars.originationFee = core.getUserOriginationFee(_reserve, _user);\r\n\r\n        //if there is a fee to liquidate, calculate the maximum amount of fee that can be liquidated\r\n        if (vars.originationFee > 0) {\r\n            (\r\n                vars.liquidatedCollateralForFee,\r\n                vars.feeLiquidated\r\n            ) = calculateAvailableCollateralToLiquidate(\r\n                _collateral,\r\n                _reserve,\r\n                vars.originationFee,\r\n                vars.userCollateralBalance.sub(maxCollateralToLiquidate)\r\n            );\r\n        }\r\n\r\n        //if principalAmountNeeded < vars.ActualAmountToLiquidate, there isn't enough\r\n        //of _collateral to cover the actual amount that is being liquidated, hence we liquidate\r\n        //a smaller amount\r\n\r\n        if (principalAmountNeeded < vars.actualAmountToLiquidate) {\r\n            vars.actualAmountToLiquidate = principalAmountNeeded;\r\n        }\r\n\r\n        //if liquidator reclaims the underlying asset, we make sure there is enough available collateral in the reserve\r\n        if (!_receiveAToken) {\r\n            uint256 currentAvailableCollateral = core.getReserveAvailableLiquidity(_collateral);\r\n            if (currentAvailableCollateral < maxCollateralToLiquidate) {\r\n                return (\r\n                    uint256(LiquidationErrors.NOT_ENOUGH_LIQUIDITY),\r\n                    \"There isn't enough liquidity available to liquidate\"\r\n                );\r\n            }\r\n        }\r\n\r\n        core.updateStateOnLiquidation(\r\n            _reserve,\r\n            _collateral,\r\n            _user,\r\n            vars.actualAmountToLiquidate,\r\n            maxCollateralToLiquidate,\r\n            vars.feeLiquidated,\r\n            vars.liquidatedCollateralForFee,\r\n            vars.borrowBalanceIncrease,\r\n            _receiveAToken\r\n        );\r\n\r\n        AToken collateralAtoken = AToken(core.getReserveATokenAddress(_collateral));\r\n\r\n        //if liquidator reclaims the aToken, he receives the equivalent atoken amount\r\n        if (_receiveAToken) {\r\n            collateralAtoken.transferOnLiquidation(_user, msg.sender, maxCollateralToLiquidate);\r\n        } else {\r\n            //otherwise receives the underlying asset\r\n            //burn the equivalent amount of atoken\r\n            collateralAtoken.burnOnLiquidation(_user, maxCollateralToLiquidate);\r\n            core.transferToUser(_collateral, msg.sender, maxCollateralToLiquidate);\r\n        }\r\n\r\n        //transfers the principal currency to the pool\r\n        core.transferToReserve.value(msg.value)(_reserve, msg.sender, vars.actualAmountToLiquidate);\r\n\r\n        if (vars.feeLiquidated > 0) {\r\n            //if there is enough collateral to liquidate the fee, first transfer burn an equivalent amount of\r\n            //aTokens of the user\r\n            collateralAtoken.burnOnLiquidation(_user, vars.liquidatedCollateralForFee);\r\n\r\n            //then liquidate the fee by transferring it to the fee collection address\r\n            core.liquidateFee(\r\n                _collateral,\r\n                vars.liquidatedCollateralForFee,\r\n                addressesProvider.getTokenDistributor()\r\n            );\r\n\r\n            emit OriginationFeeLiquidated(\r\n                _collateral,\r\n                _reserve,\r\n                _user,\r\n                vars.feeLiquidated,\r\n                vars.liquidatedCollateralForFee,\r\n                //solium-disable-next-line\r\n                block.timestamp\r\n            );\r\n\r\n        }\r\n        emit LiquidationCall(\r\n            _collateral,\r\n            _reserve,\r\n            _user,\r\n            vars.actualAmountToLiquidate,\r\n            maxCollateralToLiquidate,\r\n            vars.borrowBalanceIncrease,\r\n            msg.sender,\r\n            _receiveAToken,\r\n            //solium-disable-next-line\r\n            block.timestamp\r\n        );\r\n\r\n        return (uint256(LiquidationErrors.NO_ERROR), \"No errors\");\r\n    }\r\n\r\n    struct AvailableCollateralToLiquidateLocalVars {\r\n        uint256 userCompoundedBorrowBalance;\r\n        uint256 liquidationBonus;\r\n        uint256 collateralPrice;\r\n        uint256 principalCurrencyPrice;\r\n        uint256 maxAmountCollateralToLiquidate;\r\n    }\r\n\r\n    /**\r\n    * @dev calculates how much of a specific collateral can be liquidated, given\r\n    * a certain amount of principal currency. This function needs to be called after\r\n    * all the checks to validate the liquidation have been performed, otherwise it might fail.\r\n    * @param _collateral the collateral to be liquidated\r\n    * @param _principal the principal currency to be liquidated\r\n    * @param _purchaseAmount the amount of principal being liquidated\r\n    * @param _userCollateralBalance the collatera balance for the specific _collateral asset of the user being liquidated\r\n    * @return the maximum amount that is possible to liquidated given all the liquidation constraints (user balance, close factor) and\r\n    * the purchase amount\r\n    **/\r\n    function calculateAvailableCollateralToLiquidate(\r\n        address _collateral,\r\n        address _principal,\r\n        uint256 _purchaseAmount,\r\n        uint256 _userCollateralBalance\r\n    ) internal view returns (uint256 collateralAmount, uint256 principalAmountNeeded) {\r\n        collateralAmount = 0;\r\n        principalAmountNeeded = 0;\r\n        IPriceOracleGetter oracle = IPriceOracleGetter(addressesProvider.getPriceOracle());\r\n\r\n        // Usage of a memory struct of vars to avoid \"Stack too deep\" errors due to local variables\r\n        AvailableCollateralToLiquidateLocalVars memory vars;\r\n\r\n        vars.collateralPrice = oracle.getAssetPrice(_collateral);\r\n        vars.principalCurrencyPrice = oracle.getAssetPrice(_principal);\r\n        vars.liquidationBonus = core.getReserveLiquidationBonus(_collateral);\r\n\r\n        //this is the maximum possible amount of the selected collateral that can be liquidated, given the\r\n        //max amount of principal currency that is available for liquidation.\r\n        vars.maxAmountCollateralToLiquidate = vars\r\n            .principalCurrencyPrice\r\n            .mul(_purchaseAmount)\r\n            .div(vars.collateralPrice)\r\n            .mul(vars.liquidationBonus)\r\n            .div(100);\r\n\r\n        if (vars.maxAmountCollateralToLiquidate > _userCollateralBalance) {\r\n            collateralAmount = _userCollateralBalance;\r\n            principalAmountNeeded = vars\r\n                .collateralPrice\r\n                .mul(collateralAmount)\r\n                .div(vars.principalCurrencyPrice)\r\n                .mul(100)\r\n                .div(vars.liquidationBonus);\r\n        } else {\r\n            collateralAmount = vars.maxAmountCollateralToLiquidate;\r\n            principalAmountNeeded = _purchaseAmount;\r\n        }\r\n\r\n        return (collateralAmount, principalAmountNeeded);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "InitializableAdminUpgradeabilityProxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "1", "Implementation": "0x2847a5d7ce69790cb40471d454feb21a0be1f2e3", "SwarmSource": "bzzr://629faf9dcda9b39f83f569b349f535c0c74ed00db40c8bd00c3bd4e4bbc441c2"}, {"Rank": 508, "Address": "0xfdd86a96f47015d9c457c841e1d52d06ede16a92", "NameTag": "", "Balance": 23674.807261, "Percentage": 0.02010235, "TxCount": 12, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 510, "Address": "0xf326e4de8f66a0bdc0970b79e0924e33c79f1915", "NameTag": "MetaMask: DS Proxy", "Balance": 23579.94628745, "Percentage": 0.0200218, "TxCount": 43, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 521, "Address": "0xfc91c862dbed337369015f5b244bee027fb135e4", "NameTag": "", "Balance": 22492.34886061, "Percentage": 0.01909832, "TxCount": 10, "SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.3;\r\npragma experimental SMTChecker;\r\n\r\n\r\ninterface ERC20If {\r\n  function balanceOf(address _who) external view returns (uint256);\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n}\r\n\r\ncontract MultiSig{\r\n    receive() external payable {}\r\n\r\n    uint256 public nonce = 0;\r\n\r\n    int private withdrawFlag1 = 0;\r\n    int private withdrawFlag2 = 0;\r\n    int private withdrawFlag3 = 0;\r\n\r\n    int private closeFlag1 = 0;\r\n    int private closeFlag2 = 0;\r\n    int private closeFlag3 = 0;\r\n\r\n    address[] private owners=new address[](3);\r\n\r\n    constructor(address _owner1,address _owner2,address _owner3)\r\n    {\r\n        require(_owner1!=_owner2);\r\n        require(_owner1!=_owner3);\r\n        require(_owner2!=_owner3);\r\n\r\n        owners[0] = _owner1;\r\n        owners[1] = _owner2;\r\n        owners[2] = _owner3;\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    function getMessageToSignature(address payable[] memory dests, uint256[] memory values) private view returns (bytes memory) {\r\n        return abi.encode(nonce, dests, values, this);\r\n    }\r\n\r\n//\u6d4b\u8bd5\u4f7f\u7528\r\n//    function testABIEncode(address[] memory dests, uint256[] memory values,\r\n  //                  uint8 v1, bytes32 r1, bytes32 s1,\r\n    //                uint8 v2, bytes32 r2, bytes32 s2) public view returns (bytes memory) {\r\n      //  return abi.encode(dests, values,v1,r1, s1, v2, r2, s2);\r\n    //}\r\n\r\n    function recoverAddress(bytes32 message, uint8 v, bytes32 r, bytes32 s) private pure returns (address) {\r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n    function hash(bytes memory data) private pure returns (bytes32) {\r\n        return sha256(data);\r\n    }\r\n\r\n    function _validAddress(address addr) private view returns (bool) {\r\n        return owners[0] == addr || owners[1] == addr || owners[2] == addr;\r\n    }\r\n\r\n    function spend(address payable[] memory dests, uint256[] memory values,\r\n                    uint8 v1, bytes32 r1, bytes32 s1,\r\n                    uint8 v2, bytes32 r2, bytes32 s2) public payable {\r\n        require(dests.length > 0 && dests.length == values.length);\r\n        uint256  value;\r\n        for (uint i = 0; i < values.length; ++i){\r\n            value += values[i];\r\n            assert(value >= values[i]);\r\n        }\r\n        require(address(this).balance >= value, \"insufficient funds\");\r\n\r\n        bytes32 h=hash((getMessageToSignature(dests, values)));\r\n        address addr1=recoverAddress(h, v1, r1, s1);\r\n        address addr2=recoverAddress(h, v2, r2, s2);\r\n        require(addr1 != addr2, \"failed to recover address\");\r\n        require(_validAddress(addr1), \"invalid address\");\r\n        require(_validAddress(addr2), \"invalid address\");\r\n        nonce = nonce + 1;\r\n\r\n        for (uint i = 0; i < dests.length; ++i) {\r\n            // dests[i].transfer(values[i]);\r\n            (bool success, ) =dests[i].call{value:values[i]}(\"\");\r\n            require(success, \"transfer failed.\");\r\n        }\r\n    }\r\n\r\n    function withdrawAll() public payable {\r\n        require(_validAddress(msg.sender), \"invalid address\");\r\n        if (msg.sender == owners[0]) {\r\n            withdrawFlag1 = 1;\r\n        }\r\n        else if (msg.sender == owners[1]) {\r\n            withdrawFlag2 = 1;\r\n        }\r\n        else if (msg.sender == owners[2]) {\r\n            withdrawFlag3 = 1;\r\n        }\r\n        else {\r\n                assert(false);\r\n        }\r\n\r\n        if ((withdrawFlag1+withdrawFlag2+withdrawFlag3)>=2) {\r\n            withdrawFlag1 = 0;\r\n            withdrawFlag2 = 0;\r\n            withdrawFlag3 = 0;\r\n            (bool success, ) = msg.sender.call{value:address(this).balance}(\"\");\r\n            if (!success) {\r\n               revert(\"withdraw all failed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function close() public payable {\r\n        require(_validAddress(msg.sender), \"invalid address\");\r\n        if (msg.sender == owners[0]) {\r\n            closeFlag1 = 1;\r\n        }\r\n        else if (msg.sender == owners[1]) {\r\n            closeFlag2 = 1;\r\n        }\r\n        else if (msg.sender == owners[2]) {\r\n            closeFlag3 = 1;\r\n        }\r\n        else {\r\n                assert(false);\r\n            }\r\n\r\n        if ((closeFlag1+closeFlag2+closeFlag3)>=2){\r\n            selfdestruct(msg.sender);\r\n        }\r\n    }\r\n\r\n    function transferERC20(address payable[] memory dests, uint256[] memory values,\r\n                    uint8 v1, bytes32 r1, bytes32 s1,\r\n                    uint8 v2, bytes32 r2, bytes32 s2, address erc20Token) public  {\r\n        require(dests.length > 0 && dests.length == values.length);\r\n        uint256  value;\r\n        for (uint i = 0; i < values.length; ++i){\r\n            value += values[i];\r\n            assert(value >= values[i]);\r\n        }\r\n        ERC20If _erc20=(ERC20If)(erc20Token);\r\n        require(_erc20.balanceOf(address(this)) >= value, \"insufficient ERC20 funds\");\r\n\r\n        require(\r\n            verifySignature4ERC20Token(dests,values,v1,r1,s1,v2,r2,s2,erc20Token),\r\n            \"invalid signature.\");\r\n\r\n        nonce = nonce + 1;\r\n\r\n        for (uint i = 0; i < dests.length; ++i) {\r\n            require(\r\n                (_erc20).transfer(dests[i],values[i]),\r\n                 \"transfer erc20Token failed\");\r\n        }\r\n    }\r\n\r\n    function verifySignature4ERC20Token(address payable[] memory dests, uint256[] memory values,\r\n                    uint8 v1, bytes32 r1, bytes32 s1,\r\n                    uint8 v2, bytes32 r2, bytes32 s2, address erc20) private view returns (bool) {\r\n        bytes32 h=hash(getMessageToSignature4ERC20Token(dests, values,erc20));\r\n        address addr1=recoverAddress(h, v1, r1, s1);\r\n        address addr2=recoverAddress(h, v2, r2, s2);\r\n        require(addr1 != addr2, \"failed to recover address\");\r\n        require(_validAddress(addr1), \"invalid address\");\r\n        require(_validAddress(addr2), \"invalid address\");\r\n        return true;\r\n    }\r\n\r\n    function getMessageToSignature4ERC20Token(address payable[] memory dests,\r\n    uint256[] memory values, address erc20) public view returns (bytes memory) {\r\n        return abi.encode(nonce, dests, values, erc20);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner3\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"dests\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"getMessageToSignature4ERC20Token\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"dests\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"spend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"dests\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MultiSig", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006190a856ac79a44874ffc0cb0f2b20e8fee7ce29000000000000000000000000bb8baaee0f8a686d7007f4acc187e6981eb0eda7000000000000000000000000e6b45be55fea86983f123ee99f38376cbae2f6bf", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://45fc22cba57fb12c98c55c2d785087bb029648fa923ff3ade0c7d76a2b2670c2"}, {"Rank": 524, "Address": "0xfe80804d2e3ab78a13ce90f45b2803cf9bbd1f51", "NameTag": "", "Balance": 22397.33973181, "Percentage": 0.01901764, "TxCount": 22, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 557, "Address": "0xbc9a9ac7dc36b1706732374bf632ef39fb6efbc3", "NameTag": "", "Balance": 20640.27459403, "Percentage": 0.01752572, "TxCount": 37, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 657, "Address": "0x6f3f68525e5edad6f06f8b0eae0dd7b9f695af13", "NameTag": "", "Balance": 18000.99989944, "Percentage": 0.0152847, "TxCount": 49, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 798, "Address": "0x46e9b06d8e683e28a9b1ca7ced0afe3a4f7f0b29", "NameTag": "", "Balance": 16000.63320871, "Percentage": 0.01358618, "TxCount": 12, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 811, "Address": "0x23ea10cc1e6ebdb499d24e45369a35f43627062f", "NameTag": "Digix: DGD ETH Refund", "Balance": 15908.79387756, "Percentage": 0.0135082, "TxCount": 1828, "SourceCode": "pragma solidity 0.5.16;\r\n\r\ncontract DGDInterface {\r\n\r\n  string public constant name = \"DigixDAO\";\r\n  string public constant symbol = \"DGD\";\r\n  uint8 public constant decimals = 9;\r\n\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  mapping(address => mapping (address => uint256)) allowed;\r\n\r\n  uint256 public totalSupply;\r\n\r\n  function balanceOf(address tokenOwner) public view returns (uint) {}\r\n\r\n  function transfer(address receiver, uint numTokens) public returns (bool) {}\r\n\r\n  function approve(address delegate, uint numTokens) public returns (bool) {}\r\n\r\n  function allowance(address owner, address delegate) public view returns (uint) {}\r\n\r\n  function transferFrom(address owner, address buyer, uint numTokens) public returns (bool _success) {}\r\n}\r\n\r\ncontract Acid {\r\n\r\n  event Refund(address indexed user, uint256 indexed dgds, uint256 refundAmount);\r\n\r\n  // wei refunded per 0.000000001 DGD burned\r\n  uint256 public weiPerNanoDGD;\r\n  bool public isInitialized;\r\n  address public dgdTokenContract;\r\n  address public owner;\r\n\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier unlessInitialized() {\r\n    require(!isInitialized, \"contract is already initialized\");\r\n    _;\r\n  }\r\n\r\n  modifier requireInitialized() {\r\n    require(isInitialized, \"contract is not initialized\");\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    isInitialized = false;\r\n  }\r\n\r\n  function () external payable {}\r\n\r\n  function init(uint256 _weiPerNanoDGD, address _dgdTokenContract) public onlyOwner() unlessInitialized() returns (bool _success) {\r\n    require(_weiPerNanoDGD > 0, \"rate cannot be zero\");\r\n    require(_dgdTokenContract != address(0), \"DGD token contract cannot be empty\");\r\n    weiPerNanoDGD = _weiPerNanoDGD;\r\n    dgdTokenContract = _dgdTokenContract;\r\n    isInitialized = true;\r\n    _success = true;\r\n  }\r\n\r\n  function burn() public requireInitialized() returns (bool _success) {\r\n    // Rate will be calculated based on the nearest decimal\r\n    uint256 _amount = DGDInterface(dgdTokenContract).balanceOf(msg.sender);\r\n    uint256 _wei = mul(_amount, weiPerNanoDGD);\r\n    require(address(this).balance >= _wei, \"Contract does not have enough funds\");\r\n    require(DGDInterface(dgdTokenContract).transferFrom(msg.sender, 0x0000000000000000000000000000000000000000, _amount), \"No DGDs or DGD account not authorized\");\r\n    address _user = msg.sender;\r\n    (_success,) = _user.call.value(_wei)('');\r\n    require(_success, \"Transfer of Ether failed\");\r\n    emit Refund(_user, _amount, _wei);\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dgds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dgdTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiPerNanoDGD\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dgdTokenContract\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiPerNanoDGD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Acid", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://2885d2b0131e91bf0109fdf1877ed8084f13a91326eb7e39155748736c720f2c"}, {"Rank": 888, "Address": "0x674bdf20a0f284d710bc40872100128e2d66bd3f", "NameTag": "Loopring: Exchange v2 Deposit", "Balance": 14184.88340784, "Percentage": 0.01204442, "TxCount": 4, "SourceCode": "// SPDX-License-Identifier: Apache-2.0\r\n// Copyright 2017 Loopring Technology Limited.\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/// @title Ownable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev The Ownable contract has an owner address, and provides basic\r\n///      authorization control functions, this simplifies the implementation of\r\n///      \"user permissions\".\r\ncontract Ownable\r\n{\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract\r\n    ///      to the sender.\r\n    constructor()\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a\r\n    ///      new owner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership()\r\n        public\r\n        onlyOwner\r\n    {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n/// @title Utility Functions for uint\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary MathUint\r\n{\r\n    using MathUint for uint;\r\n\r\n    function mul(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(b <= a, \"SUB_UNDERFLOW\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"ADD_OVERFLOW\");\r\n    }\r\n\r\n    function add64(\r\n        uint64 a,\r\n        uint64 b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint64 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"ADD_OVERFLOW\");\r\n    }\r\n}\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n/// @title ERC20 Token Interface\r\n/// @dev see https://github.com/ethereum/EIPs/issues/20\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nabstract contract ERC20\r\n{\r\n    function totalSupply()\r\n        public\r\n        virtual\r\n        view\r\n        returns (uint);\r\n\r\n    function balanceOf(\r\n        address who\r\n        )\r\n        public\r\n        virtual\r\n        view\r\n        returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n        )\r\n        public\r\n        virtual\r\n        view\r\n        returns (uint);\r\n\r\n    function transfer(\r\n        address to,\r\n        uint value\r\n        )\r\n        public\r\n        virtual\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint    value\r\n        )\r\n        public\r\n        virtual\r\n        returns (bool);\r\n\r\n    function approve(\r\n        address spender,\r\n        uint    value\r\n        )\r\n        public\r\n        virtual\r\n        returns (bool);\r\n}\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n/// @title Utility Functions for addresses\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\nlibrary AddressUtil\r\n{\r\n    using AddressUtil for *;\r\n\r\n    function isContract(\r\n        address addr\r\n        )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(addr) }\r\n        return (codehash != 0x0 &&\r\n                codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);\r\n    }\r\n\r\n    function toPayable(\r\n        address addr\r\n        )\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return payable(addr);\r\n    }\r\n\r\n    // Works like address.send but with a customizable gas limit\r\n    // Make sure your code is safe for reentrancy when using this function!\r\n    function sendETH(\r\n        address to,\r\n        uint    amount,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n        address payable recipient = to.toPayable();\r\n        /* solium-disable-next-line */\r\n        (success, ) = recipient.call{value: amount, gas: gasLimit}(\"\");\r\n    }\r\n\r\n    // Works like address.transfer but with a customizable gas limit\r\n    // Make sure your code is safe for reentrancy when using this function!\r\n    function sendETHAndVerify(\r\n        address to,\r\n        uint    amount,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        success = to.sendETH(amount, gasLimit);\r\n        require(success, \"TRANSFER_FAILURE\");\r\n    }\r\n\r\n    // Works like call but is slightly more efficient when data\r\n    // needs to be copied from memory to do the call.\r\n    function fastCall(\r\n        address to,\r\n        uint    gasLimit,\r\n        uint    value,\r\n        bytes   memory data\r\n        )\r\n        internal\r\n        returns (bool success, bytes memory returnData)\r\n    {\r\n        if (to != address(0)) {\r\n            assembly {\r\n                // Do the call\r\n                success := call(gasLimit, to, value, add(data, 32), mload(data), 0, 0)\r\n                // Copy the return data\r\n                let size := returndatasize()\r\n                returnData := mload(0x40)\r\n                mstore(returnData, size)\r\n                returndatacopy(add(returnData, 32), 0, size)\r\n                // Update free memory pointer\r\n                mstore(0x40, add(returnData, add(32, size)))\r\n            }\r\n        }\r\n    }\r\n\r\n    // Like fastCall, but throws when the call is unsuccessful.\r\n    function fastCallAndVerify(\r\n        address to,\r\n        uint    gasLimit,\r\n        uint    value,\r\n        bytes   memory data\r\n        )\r\n        internal\r\n        returns (bytes memory returnData)\r\n    {\r\n        bool success;\r\n        (success, returnData) = fastCall(to, gasLimit, value, data);\r\n        if (!success) {\r\n            assembly {\r\n                revert(add(returnData, 32), mload(returnData))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n\r\n\r\n/// @title Claimable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev Extension for the Ownable contract, where the ownership needs\r\n///      to be claimed. This allows the new owner to accept the transfer.\r\ncontract Claimable is Ownable\r\n{\r\n    address public pendingOwner;\r\n\r\n    /// @dev Modifier throws if called by any account other than the pendingOwner.\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to set the pendingOwner address.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0) && newOwner != owner, \"INVALID_ADDRESS\");\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /// @dev Allows the pendingOwner address to finalize the transfer.\r\n    function claimOwnership()\r\n        public\r\n        onlyPendingOwner\r\n    {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n/// @title ERC20 safe transfer\r\n/// @dev see https://github.com/sec-bit/badERC20Fix\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\nlibrary ERC20SafeTransfer\r\n{\r\n    function safeTransferAndVerify(\r\n        address token,\r\n        address to,\r\n        uint    value\r\n        )\r\n        internal\r\n    {\r\n        safeTransferWithGasLimitAndVerify(\r\n            token,\r\n            to,\r\n            value,\r\n            gasleft()\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint    value\r\n        )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return safeTransferWithGasLimit(\r\n            token,\r\n            to,\r\n            value,\r\n            gasleft()\r\n        );\r\n    }\r\n\r\n    function safeTransferWithGasLimitAndVerify(\r\n        address token,\r\n        address to,\r\n        uint    value,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n    {\r\n        require(\r\n            safeTransferWithGasLimit(token, to, value, gasLimit),\r\n            \"TRANSFER_FAILURE\"\r\n        );\r\n    }\r\n\r\n    function safeTransferWithGasLimit(\r\n        address token,\r\n        address to,\r\n        uint    value,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        // A transfer is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n\r\n        // bytes4(keccak256(\"transfer(address,uint256)\")) = 0xa9059cbb\r\n        bytes memory callData = abi.encodeWithSelector(\r\n            bytes4(0xa9059cbb),\r\n            to,\r\n            value\r\n        );\r\n        (bool success, ) = token.call{gas: gasLimit}(callData);\r\n        return checkReturnValue(success);\r\n    }\r\n\r\n    function safeTransferFromAndVerify(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint    value\r\n        )\r\n        internal\r\n    {\r\n        safeTransferFromWithGasLimitAndVerify(\r\n            token,\r\n            from,\r\n            to,\r\n            value,\r\n            gasleft()\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint    value\r\n        )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return safeTransferFromWithGasLimit(\r\n            token,\r\n            from,\r\n            to,\r\n            value,\r\n            gasleft()\r\n        );\r\n    }\r\n\r\n    function safeTransferFromWithGasLimitAndVerify(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint    value,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n    {\r\n        bool result = safeTransferFromWithGasLimit(\r\n            token,\r\n            from,\r\n            to,\r\n            value,\r\n            gasLimit\r\n        );\r\n        require(result, \"TRANSFER_FAILURE\");\r\n    }\r\n\r\n    function safeTransferFromWithGasLimit(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint    value,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        // A transferFrom is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n\r\n        // bytes4(keccak256(\"transferFrom(address,address,uint256)\")) = 0x23b872dd\r\n        bytes memory callData = abi.encodeWithSelector(\r\n            bytes4(0x23b872dd),\r\n            from,\r\n            to,\r\n            value\r\n        );\r\n        (bool success, ) = token.call{gas: gasLimit}(callData);\r\n        return checkReturnValue(success);\r\n    }\r\n\r\n    function checkReturnValue(\r\n        bool success\r\n        )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        // A transfer/transferFrom is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n        if (success) {\r\n            assembly {\r\n                switch returndatasize()\r\n                // Non-standard ERC20: nothing is returned so if 'call' was successful we assume the transfer succeeded\r\n                case 0 {\r\n                    success := 1\r\n                }\r\n                // Standard ERC20: a single boolean value is returned which needs to be true\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0)\r\n                }\r\n                // None of the above: not successful\r\n                default {\r\n                    success := 0\r\n                }\r\n            }\r\n        }\r\n        return success;\r\n    }\r\n}\r\n\r\n\r\n// Taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(value < 2**96, \"SafeCast: value doesn\\'t fit in 96 bits\");\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint40 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint40).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     */\r\n    function toUint40(uint256 value) internal pure returns (uint40) {\r\n        require(value < 2**40, \"SafeCast: value doesn\\'t fit in 40 bits\");\r\n        return uint40(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n/// @title IDepositContract.\r\n/// @dev   Contract storing and transferring funds for an exchange.\r\n///\r\n///        ERC1155 tokens can be supported by registering pseudo token addresses calculated\r\n///        as `address(keccak256(real_token_address, token_params))`. Then the custom\r\n///        deposit contract can look up the real token address and paramsters with the\r\n///        pseudo token address before doing the transfers.\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\ninterface IDepositContract\r\n{\r\n    /// @dev Returns if a token is suppoprted by this contract.\r\n    function isTokenSupported(address token)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /// @dev Transfers tokens from a user to the exchange. This function will\r\n    ///      be called when a user deposits funds to the exchange.\r\n    ///      In a simple implementation the funds are simply stored inside the\r\n    ///      deposit contract directly. More advanced implementations may store the funds\r\n    ///      in some DeFi application to earn interest, so this function could directly\r\n    ///      call the necessary functions to store the funds there.\r\n    ///\r\n    ///      This function needs to throw when an error occurred!\r\n    ///\r\n    ///      This function can only be called by the exchange.\r\n    ///\r\n    /// @param from The address of the account that sends the tokens.\r\n    /// @param token The address of the token to transfer (`0x0` for ETH).\r\n    /// @param amount The amount of tokens to transfer.\r\n    /// @param extraData Opaque data that can be used by the contract to handle the deposit\r\n    /// @return amountReceived The amount to deposit to the user's account in the Merkle tree\r\n    function deposit(\r\n        address from,\r\n        address token,\r\n        uint96  amount,\r\n        bytes   calldata extraData\r\n        )\r\n        external\r\n        payable\r\n        returns (uint96 amountReceived);\r\n\r\n    /// @dev Transfers tokens from the exchange to a user. This function will\r\n    ///      be called when a withdrawal is done for a user on the exchange.\r\n    ///      In the simplest implementation the funds are simply stored inside the\r\n    ///      deposit contract directly so this simply transfers the requested tokens back\r\n    ///      to the user. More advanced implementations may store the funds\r\n    ///      in some DeFi application to earn interest so the function would\r\n    ///      need to get those tokens back from the DeFi application first before they\r\n    ///      can be transferred to the user.\r\n    ///\r\n    ///      This function needs to throw when an error occurred!\r\n    ///\r\n    ///      This function can only be called by the exchange.\r\n    ///\r\n    /// @param from The address from which 'amount' tokens are transferred.\r\n    /// @param to The address to which 'amount' tokens are transferred.\r\n    /// @param token The address of the token to transfer (`0x0` for ETH).\r\n    /// @param amount The amount of tokens transferred.\r\n    /// @param extraData Opaque data that can be used by the contract to handle the withdrawal\r\n    function withdraw(\r\n        address from,\r\n        address to,\r\n        address token,\r\n        uint    amount,\r\n        bytes   calldata extraData\r\n        )\r\n        external\r\n        payable;\r\n\r\n    /// @dev Transfers tokens (ETH not supported) for a user using the allowance set\r\n    ///      for the exchange. This way the approval can be used for all functionality (and\r\n    ///      extended functionality) of the exchange.\r\n    ///      Should NOT be used to deposit/withdraw user funds, `deposit`/`withdraw`\r\n    ///      should be used for that as they will contain specialised logic for those operations.\r\n    ///      This function can be called by the exchange to transfer onchain funds of users\r\n    ///      necessary for Agent functionality.\r\n    ///\r\n    ///      This function needs to throw when an error occurred!\r\n    ///\r\n    ///      This function can only be called by the exchange.\r\n    ///\r\n    /// @param from The address of the account that sends the tokens.\r\n    /// @param to The address to which 'amount' tokens are transferred.\r\n    /// @param token The address of the token to transfer (ETH is and cannot be suppported).\r\n    /// @param amount The amount of tokens transferred.\r\n    function transfer(\r\n        address from,\r\n        address to,\r\n        address token,\r\n        uint    amount\r\n        )\r\n        external\r\n        payable;\r\n\r\n    /// @dev Checks if the given address is used for depositing ETH or not.\r\n    ///      Is used while depositing to send the correct ETH amount to the deposit contract.\r\n    ///\r\n    ///      Note that 0x0 is always registered for deposting ETH when the exchange is created!\r\n    ///      This function allows additional addresses to be used for depositing ETH, the deposit\r\n    ///      contract can implement different behaviour based on the address value.\r\n    ///\r\n    /// @param addr The address to check\r\n    /// @return True if the address is used for depositing ETH, else false.\r\n    function isETH(address addr)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n\r\n/// @title DefaultDepositContract\r\n/// @dev   Default implementation of IDepositContract that just stores\r\n///        all funds without doing anything with them.\r\n///\r\n///        Should be able to work with proxy contracts so the contract\r\n///        can be updated easily (but with great caution and transparency!)\r\n///        when necessary.\r\n///\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\ncontract DefaultDepositContract is IDepositContract, Claimable\r\n{\r\n    using AddressUtil       for address;\r\n    using ERC20SafeTransfer for address;\r\n    using MathUint          for uint;\r\n    using SafeCast          for uint;\r\n\r\n    address public exchange;\r\n\r\n    mapping (address => bool) needCheckBalance;\r\n\r\n    modifier onlyExchange()\r\n    {\r\n        require(msg.sender == exchange, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier ifNotZero(uint amount)\r\n    {\r\n        if (amount == 0) return;\r\n        else  _;\r\n    }\r\n\r\n    event CheckBalance(\r\n        address indexed token,\r\n        bool            checkBalance\r\n    );\r\n\r\n    function initialize(\r\n        address _exchange\r\n        )\r\n        external\r\n    {\r\n        require(\r\n            exchange == address(0) && _exchange != address(0),\r\n            \"INVALID_EXCHANGE\"\r\n        );\r\n        owner = msg.sender;\r\n        exchange = _exchange;\r\n    }\r\n\r\n    function setCheckBalance(\r\n        address token,\r\n        bool    checkBalance\r\n        )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(needCheckBalance[token] != checkBalance, \"INVALID_VALUE\");\r\n\r\n        needCheckBalance[token] = checkBalance;\r\n        emit CheckBalance(token, checkBalance);\r\n    }\r\n\r\n    function isTokenSupported(address /*token*/)\r\n        external\r\n        override\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    function deposit(\r\n        address from,\r\n        address token,\r\n        uint96  amount,\r\n        bytes   calldata /*extraData*/\r\n        )\r\n        external\r\n        override\r\n        payable\r\n        onlyExchange\r\n        ifNotZero(amount)\r\n        returns (uint96 amountReceived)\r\n    {\r\n        uint ethToReturn = 0;\r\n\r\n        if (isETHInternal(token)) {\r\n            require(msg.value >= amount, \"INVALID_ETH_DEPOSIT\");\r\n            amountReceived = amount;\r\n            ethToReturn = msg.value - amount;\r\n        } else {\r\n            bool checkBalance = needCheckBalance[token];\r\n            uint balanceBefore = checkBalance ? ERC20(token).balanceOf(address(this)) : 0;\r\n\r\n            token.safeTransferFromAndVerify(from, address(this), uint(amount));\r\n\r\n            uint balanceAfter = checkBalance ? ERC20(token).balanceOf(address(this)) : amount;\r\n            uint diff = balanceAfter.sub(balanceBefore);\r\n            amountReceived = diff.toUint96();\r\n\r\n            ethToReturn = msg.value;\r\n        }\r\n\r\n        if (ethToReturn > 0) {\r\n            from.sendETHAndVerify(ethToReturn, gasleft());\r\n        }\r\n    }\r\n\r\n    function withdraw(\r\n        address /*from*/,\r\n        address to,\r\n        address token,\r\n        uint    amount,\r\n        bytes   calldata /*extraData*/\r\n        )\r\n        external\r\n        override\r\n        payable\r\n        onlyExchange\r\n        ifNotZero(amount)\r\n    {\r\n        if (isETHInternal(token)) {\r\n            to.sendETHAndVerify(amount, gasleft());\r\n        } else {\r\n            if (!token.safeTransfer(to, amount)){\r\n                uint amountPaid = ERC20(token).balanceOf(address(this));\r\n                require(amountPaid < amount, \"UNEXPECTED\");\r\n                token.safeTransferAndVerify(to, amountPaid);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transfer(\r\n        address from,\r\n        address to,\r\n        address token,\r\n        uint    amount\r\n        )\r\n        external\r\n        override\r\n        payable\r\n        onlyExchange\r\n        ifNotZero(amount)\r\n    {\r\n        token.safeTransferFromAndVerify(from, to, amount);\r\n    }\r\n\r\n    function isETH(address addr)\r\n        external\r\n        override\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return isETHInternal(addr);\r\n    }\r\n\r\n    // -- Internal --\r\n\r\n    function isETHInternal(address addr)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return addr == address(0);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"checkBalance\",\"type\":\"bool\"}],\"name\":\"CheckBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"amountReceived\",\"type\":\"uint96\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"checkBalance\",\"type\":\"bool\"}],\"name\":\"setCheckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "DefaultDepositContract", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://979e966d3e3b93489b96051bd9dd18007a01182463cd93ae5ca1c1783041e36e"}, {"Rank": 961, "Address": "0x5add8a02141bf53a7c5bc6ad5483ca17552e9c52", "NameTag": "", "Balance": 12881.29832406, "Percentage": 0.01093755, "TxCount": 5, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 980, "Address": "0xc22fae86443aeed038a4ed887bba8f5035fd12f0", "NameTag": "", "Balance": 12500.4531973, "Percentage": 0.01061417, "TxCount": 146, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1013, "Address": "0xe8bfdf8f47b35418c73af2a2bc4d0d12488e93c5", "NameTag": "", "Balance": 12240.17023052, "Percentage": 0.01039316, "TxCount": 5, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1143, "Address": "0xd3621b7ea5062dbcf6daa333c24c651894c5d2ea", "NameTag": "", "Balance": 10881.89493117, "Percentage": 0.00923985, "TxCount": 231, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1186, "Address": "0x75a03ec24bf95f68a749d833a2efde50db7a6192", "NameTag": "", "Balance": 10227.84093936, "Percentage": 0.00868449, "TxCount": 8, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1193, "Address": "0x6e011e100c10ebaad634214523bcf3bf61dd22bd", "NameTag": "", "Balance": 10180.59358493, "Percentage": 0.00864437, "TxCount": 211, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1283, "Address": "0x47849c4321fe5efc1954c5749568d3f8c4481b3e", "NameTag": "", "Balance": 10000.0, "Percentage": 0.00849103, "TxCount": 0, "SourceCode": "pragma solidity 0.5.15;\r\n\r\ncontract Lock {\r\n    // address owner; slot #0\r\n    // address unlockTime; slot #1\r\n    constructor (address owner, uint256 unlockTime) public payable {\r\n        assembly {\r\n            sstore(0x00, owner)\r\n            sstore(0x01, unlockTime)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev        Withdraw function once timestamp has passed unlock time\r\n    */\r\n    function () external payable {\r\n        assembly {\r\n            switch gt(timestamp, sload(0x01))\r\n            case 0 { revert(0, 0) }\r\n            case 1 {\r\n                switch call(gas, sload(0x00), balance(address), 0, 0, 0, 0)\r\n                case 0 { revert(0, 0) }\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Lock", "CompilerVersion": "v0.5.15+commit.6a57276f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007f0d238412e75e45cb69b3cacd4b59f220da2442000000000000000000000000000000000000000000000000000000005ef2fda6", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://13876a131fb612745be13765f49451cc6f0f1d0f7b13e21ac2cf9c7d3aeca189"}, {"Rank": 1378, "Address": "0x74db79268e63302d3fc69fb5a7627f7454a41732", "NameTag": "", "Balance": 9519.5, "Percentage": 0.00808303, "TxCount": 122, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1523, "Address": "0x19c30ad5ea4f7f9f36a8662b5fa2cbc09e55fded", "NameTag": "", "Balance": 7887.6825, "Percentage": 0.00669745, "TxCount": 2, "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ninterface IProxy {\r\n    function masterCopy() external view returns (address);\r\n}\r\n\r\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract GnosisSafeProxy {\r\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal singleton;\r\n\r\n    /// @dev Constructor function sets address of singleton contract.\r\n    /// @param _singleton Singleton address.\r\n    constructor(address _singleton) {\r\n        require(_singleton != address(0), \"Invalid singleton address provided\");\r\n        singleton = _singleton;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    fallback() external payable {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, _singleton)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) {\r\n                revert(0, returndatasize())\r\n            }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract GnosisSafeProxyFactory {\r\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param singleton Address of singleton contract.\r\n    /// @param data Payload for message call sent to new proxy contract.\r\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\r\n        proxy = new GnosisSafeProxy(singleton);\r\n        if (data.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, singleton);\r\n    }\r\n\r\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\r\n    function proxyRuntimeCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).runtimeCode;\r\n    }\r\n\r\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\r\n    function proxyCreationCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).creationCode;\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\r\n    ///      This method is only meant as an utility to be called from other methods\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function deployProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) internal returns (GnosisSafeProxy proxy) {\r\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\r\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\r\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\r\n        }\r\n        require(address(proxy) != address(0), \"Create2 call failed\");\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function createProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        if (initializer.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, _singleton);\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\r\n    function createProxyWithCallback(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce,\r\n        IProxyCreationCallback callback\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\r\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\r\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\r\n    }\r\n\r\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\r\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\r\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function calculateCreateProxyWithNonceAddress(\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        revert(string(abi.encodePacked(proxy)));\r\n    }\r\n}\r\n\r\ninterface IProxyCreationCallback {\r\n    function proxyCreated(\r\n        GnosisSafeProxy proxy,\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "GnosisSafeProxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9Db270c1B5E3Bd161E8c8503c55cEABeE709552", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1429297349653a4918076d650332de1a1068c5f3e07c5c82360c277770b9552"}, {"Rank": 1539, "Address": "0xab0b0e235eb4637de1783d117532398f9b0b1740", "NameTag": "", "Balance": 7740.38514907, "Percentage": 0.00657238, "TxCount": 21, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1542, "Address": "0xd7c810f6316f6b83ae3eeda44583e4a8a0ae95c4", "NameTag": "", "Balance": 7700.0, "Percentage": 0.00653809, "TxCount": 23, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1661, "Address": "0xf5c27c6fe782cbb5c85989ea3e75754748153459", "NameTag": "", "Balance": 6790.12815054, "Percentage": 0.00576552, "TxCount": 175, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1675, "Address": "0x069a3f90b0129e22c5c4a4e10ed667ad2578ef40", "NameTag": "", "Balance": 6673.681, "Percentage": 0.00566664, "TxCount": 5, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1731, "Address": "0x67df244584b67e8c51b10ad610aaffa9a402fdb6", "NameTag": "Foundation: Treasury", "Balance": 6170.09270913, "Percentage": 0.00523904, "TxCount": 5, "SourceCode": "/*\r\n  \uff65\r\n   *\u3000\u2605\r\n      \uff65 \uff61\r\n        \u3000\uff65\u3000\uff9f\u2606 \uff61\r\n  \u3000\u3000\u3000 *\u3000\u2605 \uff9f\uff65\uff61 *  \uff61\r\n          \u3000\u3000* \u2606 \uff61\uff65\uff9f*.\uff61\r\n      \u3000\u3000\u3000\uff9f *.\uff61\u2606\uff61\u2605\u3000\uff65\r\n\u200b\r\n                      `                     .-:::::-.`              `-::---...```\r\n                     `-:`               .:+ssssoooo++//:.`       .-/+shhhhhhhhhhhhhyyyssooo:\r\n                    .--::.            .+ossso+/////++/:://-`   .////+shhhhhhhhhhhhhhhhhhhhhy\r\n                  `-----::.         `/+////+++///+++/:--:/+/-  -////+shhhhhhhhhhhhhhhhhhhhhy\r\n                 `------:::-`      `//-.``.-/+ooosso+:-.-/oso- -////+shhhhhhhhhhhhhhhhhhhhhy\r\n                .--------:::-`     :+:.`  .-/osyyyyyyso++syhyo.-////+shhhhhhhhhhhhhhhhhhhhhy\r\n              `-----------:::-.    +o+:-.-:/oyhhhhhhdhhhhhdddy:-////+shhhhhhhhhhhhhhhhhhhhhy\r\n             .------------::::--  `oys+/::/+shhhhhhhdddddddddy/-////+shhhhhhhhhhhhhhhhhhhhhy\r\n            .--------------:::::-` +ys+////+yhhhhhhhddddddddhy:-////+yhhhhhhhhhhhhhhhhhhhhhy\r\n          `----------------::::::-`.ss+/:::+oyhhhhhhhhhhhhhhho`-////+shhhhhhhhhhhhhhhhhhhhhy\r\n         .------------------:::::::.-so//::/+osyyyhhhhhhhhhys` -////+shhhhhhhhhhhhhhhhhhhhhy\r\n       `.-------------------::/:::::..+o+////+oosssyyyyyyys+`  .////+shhhhhhhhhhhhhhhhhhhhhy\r\n       .--------------------::/:::.`   -+o++++++oooosssss/.     `-//+shhhhhhhhhhhhhhhhhhhhyo\r\n     .-------   ``````.......--`        `-/+ooooosso+/-`          `./++++///:::--...``hhhhyo\r\n                                              `````\r\n   *\u3000\r\n      \uff65 \uff61\r\n\u3000\u3000\u3000\u3000\uff65\u3000\u3000\uff9f\u2606 \uff61\r\n  \u3000\u3000\u3000 *\u3000\u2605 \uff9f\uff65\uff61 *  \uff61\r\n          \u3000\u3000* \u2606 \uff61\uff65\uff9f*.\uff61\r\n      \u3000\u3000\u3000\uff9f *.\uff61\u2606\uff61\u2605\u3000\uff65\r\n    *\u3000\u3000\uff9f\uff61\u00b7*\uff65\uff61 \uff9f*\r\n  \u3000\u3000\u3000\u2606\uff9f\uff65\uff61\u00b0*. \uff9f\r\n\u3000 \uff65 \uff9f*\uff61\uff65\uff9f\u2605\uff61\r\n\u3000\u3000\uff65 *\uff9f\uff61\u3000\u3000 *\r\n\u3000\uff65\uff9f*\uff61\u2605\uff65\r\n \u2606\u2234\uff61\u3000*\r\n\uff65 \uff61\r\n*/\r\n\r\n// File: ../proxy-contracts/Proxy.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\nabstract contract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  fallback () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @dev Receive function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  receive () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal virtual view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal virtual {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: ../proxy-contracts/UpgradeabilityProxy.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) public payable {\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return impl Address of the current implementation\r\n   */\r\n  function _implementation() internal override view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n// File: ../proxy-contracts/AdminUpgradeabilityProxy.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    _setAdmin(_admin);\r\n  }\r\n\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return adm The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() internal override virtual {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    super._willFallback();\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AdminUpgradeabilityProxy", "CompilerVersion": "v0.6.8+commit.0bbfe453", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a428bc0b619af0bbe7af05fe5a3ec87a2f8eba7700000000000000000000000072de36c8ebeacb6100c36249552e35feff0ee09900000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000024c4d66de800000000000000000000000095271d54d6e0d88b3825f89a766f97b8b7e8af8200000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x1c0df262a40f99d7d6145faba04db75d1126f93d", "SwarmSource": "ipfs://b0503c23d64d00872f309af6ebc439401f4a3a5289bbb698fa4e5aabd7476426"}, {"Rank": 1732, "Address": "0xd08c3a59725e81485fd70c44f6cb0bf03ee9a1ac", "NameTag": "", "Balance": 6166.63729737, "Percentage": 0.00523611, "TxCount": 45, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1742, "Address": "0x8ca24021e3ee3b5c241bbfcee0712554d7dc38a1", "NameTag": "", "Balance": 6057.73628391, "Percentage": 0.00514364, "TxCount": 248, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1760, "Address": "0x61fa1ec0a0ce383ae6d60f2dc6257881cf5e7a61", "NameTag": "", "Balance": 6000.8, "Percentage": 0.0050953, "TxCount": 4, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1917, "Address": "0x12267aefd8bb461817df348ce16c933e76c1aa0d", "NameTag": "", "Balance": 5187.21763746, "Percentage": 0.00440448, "TxCount": 72, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 1991, "Address": "0xf20b338752976878754518183873602902360704", "NameTag": "F2Pool", "Balance": 5000.0, "Percentage": 0.00424551, "TxCount": 108, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x6851d6fdfafd08c0295c392436245e5bc78b0185", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2107, "Address": "0x0cb1d4a24292bb89862f599ac5b10f42b6de07e4", "NameTag": "", "Balance": 4595.14732565, "Percentage": 0.00390175, "TxCount": 9, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2109, "Address": "0xb9cae3a1b5b204a83f34efdee17d0354d11d0d9c", "NameTag": "", "Balance": 4579.88155504, "Percentage": 0.00388879, "TxCount": 24, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2156, "Address": "0x32d16878415bb29a3dc11b426e77450eba6ad2a5", "NameTag": "", "Balance": 4451.37814163, "Percentage": 0.00377968, "TxCount": 4, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2225, "Address": "0x1f3621d2d57ee42d3e0cc0aa42156d0c3f7744a5", "NameTag": "", "Balance": 4173.63163025, "Percentage": 0.00354384, "TxCount": 28, "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ninterface IProxy {\r\n    function masterCopy() external view returns (address);\r\n}\r\n\r\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract GnosisSafeProxy {\r\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal singleton;\r\n\r\n    /// @dev Constructor function sets address of singleton contract.\r\n    /// @param _singleton Singleton address.\r\n    constructor(address _singleton) {\r\n        require(_singleton != address(0), \"Invalid singleton address provided\");\r\n        singleton = _singleton;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    fallback() external payable {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, _singleton)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) {\r\n                revert(0, returndatasize())\r\n            }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract GnosisSafeProxyFactory {\r\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param singleton Address of singleton contract.\r\n    /// @param data Payload for message call sent to new proxy contract.\r\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\r\n        proxy = new GnosisSafeProxy(singleton);\r\n        if (data.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, singleton);\r\n    }\r\n\r\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\r\n    function proxyRuntimeCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).runtimeCode;\r\n    }\r\n\r\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\r\n    function proxyCreationCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).creationCode;\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\r\n    ///      This method is only meant as an utility to be called from other methods\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function deployProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) internal returns (GnosisSafeProxy proxy) {\r\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\r\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\r\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\r\n        }\r\n        require(address(proxy) != address(0), \"Create2 call failed\");\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function createProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        if (initializer.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, _singleton);\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\r\n    function createProxyWithCallback(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce,\r\n        IProxyCreationCallback callback\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\r\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\r\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\r\n    }\r\n\r\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\r\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\r\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function calculateCreateProxyWithNonceAddress(\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        revert(string(abi.encodePacked(proxy)));\r\n    }\r\n}\r\n\r\ninterface IProxyCreationCallback {\r\n    function proxyCreated(\r\n        GnosisSafeProxy proxy,\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "GnosisSafeProxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9Db270c1B5E3Bd161E8c8503c55cEABeE709552", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1429297349653a4918076d650332de1a1068c5f3e07c5c82360c277770b9552"}, {"Rank": 2226, "Address": "0x13000c4a215efe7e414bb329b2f11c39bcf92d78", "NameTag": "BiFi Finance: ETH Wallet", "Balance": 4171.72385899, "Percentage": 0.00354222, "TxCount": 2647, "SourceCode": "pragma solidity 0.6.12;\r\ninterface marketManagerInterface  {\r\n\tfunction setOracleProxy(address oracleProxyAddr) external returns (bool);\r\n\r\n\tfunction setBreakerTable(address _target, bool _status) external returns (bool);\r\n\r\n\tfunction getCircuitBreaker() external view returns (bool);\r\n\r\n\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\r\n\r\n\tfunction getTokenHandlerInfo(uint256 handlerID) external view returns (bool, address, string memory);\r\n\r\n\tfunction handlerRegister(uint256 handlerID, address tokenHandlerAddr) external returns (bool);\r\n\r\n\tfunction applyInterestHandlers(address payable userAddr, uint256 callerID, bool allFlag) external returns (uint256, uint256, uint256);\r\n\r\n\tfunction liquidationApplyInterestHandlers(address payable userAddr, uint256 callerID) external returns (uint256, uint256, uint256, uint256, uint256);\r\n\r\n\tfunction getTokenHandlerPrice(uint256 handlerID) external view returns (uint256);\r\n\r\n\tfunction getTokenHandlerBorrowLimit(uint256 handlerID) external view returns (uint256);\r\n\r\n\tfunction getTokenHandlerSupport(uint256 handlerID) external view returns (bool);\r\n\r\n\tfunction getTokenHandlersLength() external view returns (uint256);\r\n\r\n\tfunction setTokenHandlersLength(uint256 _tokenHandlerLength) external returns (bool);\r\n\r\n\tfunction getTokenHandlerID(uint256 index) external view returns (uint256);\r\n\r\n\tfunction getTokenHandlerMarginCallLimit(uint256 handlerID) external view returns (uint256);\r\n\r\n\tfunction getUserIntraHandlerAssetWithInterest(address payable userAddr, uint256 handlerID) external view returns (uint256, uint256);\r\n\r\n\tfunction getUserTotalIntraCreditAsset(address payable userAddr) external view returns (uint256, uint256);\r\n\r\n\tfunction getUserLimitIntraAsset(address payable userAddr) external view returns (uint256, uint256);\r\n\r\n\tfunction getUserCollateralizableAmount(address payable userAddr, uint256 handlerID) external view returns (uint256);\r\n\r\n\tfunction getUserExtraLiquidityAmount(address payable userAddr, uint256 handlerID) external view returns (uint256);\r\n\r\n\tfunction partialLiquidationUser(address payable delinquentBorrower, uint256 liquidateAmount, address payable liquidator, uint256 liquidateHandlerID, uint256 rewardHandlerID) external returns (uint256, uint256, uint256);\r\n\r\n\tfunction getMaxLiquidationReward(address payable delinquentBorrower, uint256 liquidateHandlerID, uint256 liquidateAmount, uint256 rewardHandlerID, uint256 rewardRatio) external view returns (uint256);\r\n\r\n\tfunction partialLiquidationUserReward(address payable delinquentBorrower, uint256 rewardAmount, address payable liquidator, uint256 handlerID) external returns (uint256);\r\n\r\n\tfunction setLiquidationManager(address liquidationManagerAddr) external returns (bool);\r\n\r\n\tfunction rewardClaimAll(address payable userAddr) external returns (bool);\r\n\r\n\tfunction rewardTransfer(uint256 _claimAmountSum) external returns (bool);\r\n\r\n\tfunction updateRewardParams(address payable userAddr) external returns (bool);\r\n\r\n\tfunction interestUpdateReward() external returns (bool);\r\n\r\n\tfunction getGlobalRewardInfo() external view returns (uint256, uint256, uint256);\r\n}\r\ninterface interestModelInterface  {\r\n\tfunction getInterestAmount(address handlerDataStorageAddr, address payable userAddr, bool isView) external view returns (bool, uint256, uint256, bool, uint256, uint256);\r\n\r\n\tfunction viewInterestAmount(address handlerDataStorageAddr, address payable userAddr) external view returns (bool, uint256, uint256, bool, uint256, uint256);\r\n\r\n\tfunction getSIRandBIR(address handlerDataStorageAddr, uint256 depositTotalAmount, uint256 borrowTotalAmount) external view returns (uint256, uint256);\r\n}\r\ninterface marketHandlerDataStorageInterface  {\r\n\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\r\n\r\n\tfunction setNewCustomer(address payable userAddr) external returns (bool);\r\n\r\n\tfunction getUserAccessed(address payable userAddr) external view returns (bool);\r\n\r\n\tfunction setUserAccessed(address payable userAddr, bool _accessed) external returns (bool);\r\n\r\n\tfunction getReservedAddr() external view returns (address payable);\r\n\r\n\tfunction setReservedAddr(address payable reservedAddress) external returns (bool);\r\n\r\n\tfunction getReservedAmount() external view returns (int256);\r\n\r\n\tfunction addReservedAmount(uint256 amount) external returns (int256);\r\n\r\n\tfunction subReservedAmount(uint256 amount) external returns (int256);\r\n\r\n\tfunction updateSignedReservedAmount(int256 amount) external returns (int256);\r\n\r\n\tfunction setTokenHandler(address _marketHandlerAddr, address _interestModelAddr) external returns (bool);\r\n\r\n\tfunction setCoinHandler(address _marketHandlerAddr, address _interestModelAddr) external returns (bool);\r\n\r\n\tfunction getDepositTotalAmount() external view returns (uint256);\r\n\r\n\tfunction addDepositTotalAmount(uint256 amount) external returns (uint256);\r\n\r\n\tfunction subDepositTotalAmount(uint256 amount) external returns (uint256);\r\n\r\n\tfunction getBorrowTotalAmount() external view returns (uint256);\r\n\r\n\tfunction addBorrowTotalAmount(uint256 amount) external returns (uint256);\r\n\r\n\tfunction subBorrowTotalAmount(uint256 amount) external returns (uint256);\r\n\r\n\tfunction getUserIntraDepositAmount(address payable userAddr) external view returns (uint256);\r\n\r\n\tfunction addUserIntraDepositAmount(address payable userAddr, uint256 amount) external returns (uint256);\r\n\r\n\tfunction subUserIntraDepositAmount(address payable userAddr, uint256 amount) external returns (uint256);\r\n\r\n\tfunction getUserIntraBorrowAmount(address payable userAddr) external view returns (uint256);\r\n\r\n\tfunction addUserIntraBorrowAmount(address payable userAddr, uint256 amount) external returns (uint256);\r\n\r\n\tfunction subUserIntraBorrowAmount(address payable userAddr, uint256 amount) external returns (uint256);\r\n\r\n\tfunction addDepositAmount(address payable userAddr, uint256 amount) external returns (bool);\r\n\r\n\tfunction addBorrowAmount(address payable userAddr, uint256 amount) external returns (bool);\r\n\r\n\tfunction subDepositAmount(address payable userAddr, uint256 amount) external returns (bool);\r\n\r\n\tfunction subBorrowAmount(address payable userAddr, uint256 amount) external returns (bool);\r\n\r\n\tfunction getUserAmount(address payable userAddr) external view returns (uint256, uint256);\r\n\r\n\tfunction getHandlerAmount() external view returns (uint256, uint256);\r\n\r\n\tfunction getAmount(address payable userAddr) external view returns (uint256, uint256, uint256, uint256);\r\n\r\n\tfunction setAmount(address payable userAddr, uint256 depositTotalAmount, uint256 borrowTotalAmount, uint256 depositAmount, uint256 borrowAmount) external returns (uint256);\r\n\r\n\tfunction setBlocks(uint256 lastUpdatedBlock, uint256 inactiveActionDelta) external returns (bool);\r\n\r\n\tfunction getLastUpdatedBlock() external view returns (uint256);\r\n\r\n\tfunction setLastUpdatedBlock(uint256 _lastUpdatedBlock) external returns (bool);\r\n\r\n\tfunction getInactiveActionDelta() external view returns (uint256);\r\n\r\n\tfunction setInactiveActionDelta(uint256 inactiveActionDelta) external returns (bool);\r\n\r\n\tfunction syncActionEXR() external returns (bool);\r\n\r\n\tfunction getActionEXR() external view returns (uint256, uint256);\r\n\r\n\tfunction setActionEXR(uint256 actionDepositExRate, uint256 actionBorrowExRate) external returns (bool);\r\n\r\n\tfunction getGlobalDepositEXR() external view returns (uint256);\r\n\r\n\tfunction getGlobalBorrowEXR() external view returns (uint256);\r\n\r\n\tfunction setEXR(address payable userAddr, uint256 globalDepositEXR, uint256 globalBorrowEXR) external returns (bool);\r\n\r\n\tfunction getUserEXR(address payable userAddr) external view returns (uint256, uint256);\r\n\r\n\tfunction setUserEXR(address payable userAddr, uint256 depositEXR, uint256 borrowEXR) external returns (bool);\r\n\r\n\tfunction getGlobalEXR() external view returns (uint256, uint256);\r\n\r\n\tfunction getMarketHandlerAddr() external view returns (address);\r\n\r\n\tfunction setMarketHandlerAddr(address marketHandlerAddr) external returns (bool);\r\n\r\n\tfunction getInterestModelAddr() external view returns (address);\r\n\r\n\tfunction setInterestModelAddr(address interestModelAddr) external returns (bool);\r\n\r\n\tfunction getLimit() external view returns (uint256, uint256);\r\n\r\n\tfunction getBorrowLimit() external view returns (uint256);\r\n\r\n\tfunction getMarginCallLimit() external view returns (uint256);\r\n\r\n\tfunction getMinimumInterestRate() external view returns (uint256);\r\n\r\n\tfunction getLiquiditySensitivity() external view returns (uint256);\r\n\r\n\tfunction setBorrowLimit(uint256 _borrowLimit) external returns (bool);\r\n\r\n\tfunction setMarginCallLimit(uint256 _marginCallLimit) external returns (bool);\r\n\r\n\tfunction setMinimumInterestRate(uint256 _minimumInterestRate) external returns (bool);\r\n\r\n\tfunction setLiquiditySensitivity(uint256 _liquiditySensitivity) external returns (bool);\r\n\r\n\tfunction getLimitOfAction() external view returns (uint256);\r\n\r\n\tfunction setLimitOfAction(uint256 limitOfAction) external returns (bool);\r\n\r\n\tfunction getLiquidityLimit() external view returns (uint256);\r\n\r\n\tfunction setLiquidityLimit(uint256 liquidityLimit) external returns (bool);\r\n}\r\ninterface marketSIHandlerDataStorageInterface  {\r\n\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\r\n\r\n\tfunction updateRewardPerBlockStorage(uint256 _rewardPerBlock) external returns (bool);\r\n\r\n\tfunction getRewardInfo(address userAddr) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\r\n\r\n\tfunction getMarketRewardInfo() external view returns (uint256, uint256, uint256);\r\n\r\n\tfunction setMarketRewardInfo(uint256 _rewardLane, uint256 _rewardLaneUpdateAt, uint256 _rewardPerBlock) external returns (bool);\r\n\r\n\tfunction getUserRewardInfo(address userAddr) external view returns (uint256, uint256, uint256);\r\n\r\n\tfunction setUserRewardInfo(address userAddr, uint256 _rewardLane, uint256 _rewardLaneUpdateAt, uint256 _rewardAmount) external returns (bool);\r\n\r\n\tfunction getBetaRate() external view returns (uint256);\r\n\r\n\tfunction setBetaRate(uint256 _betaRate) external returns (bool);\r\n}\r\ncontract proxy  {\r\n\taddress payable owner;\r\n\r\n\tuint256 handlerID;\r\n\r\n\tstring tokenName = \"ether\";\r\n\r\n\tuint256 constant unifiedPoint = 10 ** 18;\r\n\r\n\tmarketManagerInterface marketManager;\r\n\r\n\tinterestModelInterface interestModelInstance;\r\n\r\n\tmarketHandlerDataStorageInterface handlerDataStorage;\r\n\r\n\tmarketSIHandlerDataStorageInterface SIHandlerDataStorage;\r\n\r\n\taddress public handler;\r\n\r\n\taddress public SI;\r\n\r\n\tstring DEPOSIT = \"deposit(uint256,bool)\";\r\n\r\n\tstring REDEEM = \"withdraw(uint256,bool)\";\r\n\r\n\tstring BORROW = \"borrow(uint256,bool)\";\r\n\r\n\tstring REPAY = \"repay(uint256,bool)\";\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyMarketManager {\r\n\t\taddress msgSender = msg.sender;\r\n\t\trequire((msgSender == address(marketManager)) || (msgSender == owner), \"onlyMarketManager function\");\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor () public \r\n\t{\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tfunction ownershipTransfer(address _owner) onlyOwner external returns (bool)\r\n\t{\r\n\t\towner = address(uint160(_owner));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction initialize(uint256 _handlerID, address handlerAddr, address marketManagerAddr, address interestModelAddr, address marketDataStorageAddr, address siHandlerAddr, address SIHandlerDataStorageAddr) onlyOwner public returns (bool)\r\n\t{\r\n\t\thandlerID = _handlerID;\r\n\t\thandler = handlerAddr;\r\n\t\tSI = siHandlerAddr;\r\n\t\tmarketManager = marketManagerInterface(marketManagerAddr);\r\n\t\tinterestModelInstance = interestModelInterface(interestModelAddr);\r\n\t\thandlerDataStorage = marketHandlerDataStorageInterface(marketDataStorageAddr);\r\n\t\tSIHandlerDataStorage = marketSIHandlerDataStorageInterface(SIHandlerDataStorageAddr);\r\n\t}\r\n\r\n\tfunction setHandlerID(uint256 _handlerID) onlyOwner public returns (bool)\r\n\t{\r\n\t\thandlerID = _handlerID;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setHandlerAddr(address handlerAddr) onlyOwner public returns (bool)\r\n\t{\r\n\t\thandler = handlerAddr;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setSiHandlerAddr(address siHandlerAddr) onlyOwner public returns (bool)\r\n\t{\r\n\t\tSI = siHandlerAddr;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction getHandlerID() public view returns (uint256)\r\n\t{\r\n\t\treturn handlerID;\r\n\t}\r\n\r\n\tfunction getHandlerAddr() public view returns (address)\r\n\t{\r\n\t\treturn handler;\r\n\t}\r\n\r\n\tfunction getSiHandlerAddr() public view returns (address)\r\n\t{\r\n\t\treturn SI;\r\n\t}\r\n\r\n\tfunction migration(address payable target) onlyOwner public returns (bool)\r\n\t{\r\n\t\ttarget.transfer(address(this).balance);\r\n\t}\r\n\r\n\tfallback () external payable \r\n\t{\r\n\t\trequire(msg.value != 0, \"DEPOSIT use unifiedTokenAmount\");\r\n\t}\r\n\r\n\tfunction deposit(uint256 unifiedTokenAmount, bool flag) public payable returns (bool)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\tbytes memory data = abi.encodeWithSignature(DEPOSIT, unifiedTokenAmount, flag);\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction withdraw(uint256 unifiedTokenAmount, bool flag) public returns (bool)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\tbytes memory data = abi.encodeWithSignature(REDEEM, unifiedTokenAmount, flag);\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction borrow(uint256 unifiedTokenAmount, bool flag) public returns (bool)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\tbytes memory data = abi.encodeWithSignature(BORROW, unifiedTokenAmount, flag);\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction repay(uint256 unifiedTokenAmount, bool flag) public payable returns (bool)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\tbytes memory data = abi.encodeWithSignature(REPAY, unifiedTokenAmount, flag);\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction handlerProxy(bytes memory data) onlyMarketManager external returns (bool, bytes memory)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn (result, returnData);\r\n\t}\r\n\r\n\tfunction handlerViewProxy(bytes memory data) external returns (bool, bytes memory)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn (result, returnData);\r\n\t}\r\n\r\n\tfunction siProxy(bytes memory data) onlyMarketManager external returns (bool, bytes memory)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\t(result, returnData) = SI.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn (result, returnData);\r\n\t}\r\n\r\n\tfunction siViewProxy(bytes memory data) external returns (bool, bytes memory)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\t(result, returnData) = SI.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn (result, returnData);\r\n\t}\r\n}\r\ncontract CoinHandlerProxy is proxy {\r\n    constructor()\r\n    proxy() public {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"SI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unifiedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unifiedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHandlerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHandlerID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiHandlerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"handler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"handlerProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"handlerViewProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_handlerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"handlerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketManagerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestModelAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketDataStorageAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"siHandlerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"SIHandlerDataStorageAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"migration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ownershipTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unifiedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddr\",\"type\":\"address\"}],\"name\":\"setHandlerAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_handlerID\",\"type\":\"uint256\"}],\"name\":\"setHandlerID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"siHandlerAddr\",\"type\":\"address\"}],\"name\":\"setSiHandlerAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"siProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"siViewProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unifiedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoinHandlerProxy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "1", "Implementation": "0xfa56855934c1d19b9c2a52331e32a9a44546f92b", "SwarmSource": "ipfs://1c349a0f330a14f011c0f6edf3b87294a3cac639ce438e27909e403975e869f0"}, {"Rank": 2272, "Address": "0x8d15f64920dda38883b0bb44129c1f660392e167", "NameTag": "", "Balance": 4030.46898066, "Percentage": 0.00342228, "TxCount": 293, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2370, "Address": "0x2ad302574e58e263861c973618ba736d6b8fbc92", "NameTag": "", "Balance": 3873.48401147, "Percentage": 0.00328899, "TxCount": 93, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2394, "Address": "0x9a67f1940164d0318612b497e8e6038f902a00a4", "NameTag": "KeeperDAO: Treasury", "Balance": 3825.95561973, "Percentage": 0.00324863, "TxCount": 185, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2416, "Address": "0xf72f6fba7d55b00c25f2e5205e6bca9aaa470434", "NameTag": "", "Balance": 3750.0, "Percentage": 0.00318413, "TxCount": 2, "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ninterface IProxy {\r\n    function masterCopy() external view returns (address);\r\n}\r\n\r\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract GnosisSafeProxy {\r\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal singleton;\r\n\r\n    /// @dev Constructor function sets address of singleton contract.\r\n    /// @param _singleton Singleton address.\r\n    constructor(address _singleton) {\r\n        require(_singleton != address(0), \"Invalid singleton address provided\");\r\n        singleton = _singleton;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    fallback() external payable {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, _singleton)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) {\r\n                revert(0, returndatasize())\r\n            }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract GnosisSafeProxyFactory {\r\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param singleton Address of singleton contract.\r\n    /// @param data Payload for message call sent to new proxy contract.\r\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\r\n        proxy = new GnosisSafeProxy(singleton);\r\n        if (data.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, singleton);\r\n    }\r\n\r\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\r\n    function proxyRuntimeCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).runtimeCode;\r\n    }\r\n\r\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\r\n    function proxyCreationCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).creationCode;\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\r\n    ///      This method is only meant as an utility to be called from other methods\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function deployProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) internal returns (GnosisSafeProxy proxy) {\r\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\r\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\r\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\r\n        }\r\n        require(address(proxy) != address(0), \"Create2 call failed\");\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function createProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        if (initializer.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, _singleton);\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\r\n    function createProxyWithCallback(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce,\r\n        IProxyCreationCallback callback\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\r\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\r\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\r\n    }\r\n\r\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\r\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\r\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function calculateCreateProxyWithNonceAddress(\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        revert(string(abi.encodePacked(proxy)));\r\n    }\r\n}\r\n\r\ninterface IProxyCreationCallback {\r\n    function proxyCreated(\r\n        GnosisSafeProxy proxy,\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "GnosisSafeProxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9Db270c1B5E3Bd161E8c8503c55cEABeE709552", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1429297349653a4918076d650332de1a1068c5f3e07c5c82360c277770b9552"}, {"Rank": 2447, "Address": "0xbba4c8eb57df16c4cfabe4e9a3ab697a3e0c65d8", "NameTag": "", "Balance": 3627.53632488, "Percentage": 0.00308015, "TxCount": 1233, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2459, "Address": "0x283af0b28c62c092c9727f1ee09c02ca627eb7f5", "NameTag": "ENS: ETH Registrar Controller", "Balance": 3583.55765774, "Percentage": 0.00304281, "TxCount": 634483, "SourceCode": "// File: @ensdomains/ethregistrar/contracts/PriceOracle.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\ninterface PriceOracle {\r\n    /**\r\n     * @dev Returns the price to register or renew a name.\r\n     * @param name The name being registered or renewed.\r\n     * @param expires When the name presently expires (0 if this is a new registration).\r\n     * @param duration How long the name is being registered or extended for, in seconds.\r\n     * @return The price of this renewal or registration, in wei.\r\n     */\r\n    function price(string calldata name, uint expires, uint duration) external view returns(uint);\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/ENS.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\ninterface ENS {\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n    // Logged when an operator is added or removed.\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\r\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns(bytes32);\r\n    function setResolver(bytes32 node, address resolver) external;\r\n    function setOwner(bytes32 node, address owner) external;\r\n    function setTTL(bytes32 node, uint64 ttl) external;\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function owner(bytes32 node) external view returns (address);\r\n    function resolver(bytes32 node) external view returns (address);\r\n    function ttl(bytes32 node) external view returns (uint64);\r\n    function recordExists(bytes32 node) external view returns (bool);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @ensdomains/ethregistrar/contracts/BaseRegistrar.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\n\r\n\r\ncontract BaseRegistrar is IERC721, Ownable {\r\n    uint constant public GRACE_PERIOD = 90 days;\r\n\r\n    event ControllerAdded(address indexed controller);\r\n    event ControllerRemoved(address indexed controller);\r\n    event NameMigrated(uint256 indexed id, address indexed owner, uint expires);\r\n    event NameRegistered(uint256 indexed id, address indexed owner, uint expires);\r\n    event NameRenewed(uint256 indexed id, uint expires);\r\n\r\n    // The ENS registry\r\n    ENS public ens;\r\n\r\n    // The namehash of the TLD this registrar owns (eg, .eth)\r\n    bytes32 public baseNode;\r\n\r\n    // A map of addresses that are authorised to register and renew names.\r\n    mapping(address=>bool) public controllers;\r\n\r\n    // Authorises a controller, who can register and renew domains.\r\n    function addController(address controller) external;\r\n\r\n    // Revoke controller permission for an address.\r\n    function removeController(address controller) external;\r\n\r\n    // Set the resolver for the TLD this registrar manages.\r\n    function setResolver(address resolver) external;\r\n\r\n    // Returns the expiration timestamp of the specified label hash.\r\n    function nameExpires(uint256 id) external view returns(uint);\r\n\r\n    // Returns true iff the specified name is available for registration.\r\n    function available(uint256 id) public view returns(bool);\r\n\r\n    /**\r\n     * @dev Register a name.\r\n     */\r\n    function register(uint256 id, address owner, uint duration) external returns(uint);\r\n\r\n    function renew(uint256 id, uint duration) external returns(uint);\r\n\r\n    /**\r\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\r\n     */\r\n    function reclaim(uint256 id, address owner) external;\r\n}\r\n\r\n// File: @ensdomains/ethregistrar/contracts/StringUtils.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\nlibrary StringUtils {\r\n    /**\r\n     * @dev Returns the length of a given string\r\n     *\r\n     * @param s The string to measure the length of\r\n     * @return The length of the input string\r\n     */\r\n    function strlen(string memory s) internal pure returns (uint) {\r\n        uint len;\r\n        uint i = 0;\r\n        uint bytelength = bytes(s).length;\r\n        for(len = 0; i < bytelength; len++) {\r\n            byte b = bytes(s)[i];\r\n            if(b < 0x80) {\r\n                i += 1;\r\n            } else if (b < 0xE0) {\r\n                i += 2;\r\n            } else if (b < 0xF0) {\r\n                i += 3;\r\n            } else if (b < 0xF8) {\r\n                i += 4;\r\n            } else if (b < 0xFC) {\r\n                i += 5;\r\n            } else {\r\n                i += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n}\r\n\r\n// File: @ensdomains/resolver/contracts/Resolver.sol\r\n\r\npragma solidity >=0.4.25;\r\n\r\n/**\r\n * A generic resolver interface which includes all the functions including the ones deprecated\r\n */\r\ninterface Resolver{\r\n    event AddrChanged(bytes32 indexed node, address a);\r\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\r\n    event NameChanged(bytes32 indexed node, string name);\r\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\r\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\r\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\r\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\r\n    /* Deprecated events */\r\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\r\n\r\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\r\n    function addr(bytes32 node) external view returns (address);\r\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\r\n    function contenthash(bytes32 node) external view returns (bytes memory);\r\n    function dnsrr(bytes32 node) external view returns (bytes memory);\r\n    function name(bytes32 node) external view returns (string memory);\r\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\r\n    function text(bytes32 node, string calldata key) external view returns (string memory);\r\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\r\n\r\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\r\n    function setAddr(bytes32 node, address addr) external;\r\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\r\n    function setContenthash(bytes32 node, bytes calldata hash) external;\r\n    function setDnsrr(bytes32 node, bytes calldata data) external;\r\n    function setName(bytes32 node, string calldata _name) external;\r\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\r\n    function setText(bytes32 node, string calldata key, string calldata value) external;\r\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\r\n\r\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\r\n\r\n    /* Deprecated functions */\r\n    function content(bytes32 node) external view returns (bytes32);\r\n    function multihash(bytes32 node) external view returns (bytes memory);\r\n    function setContent(bytes32 node, bytes32 hash) external;\r\n    function setMultihash(bytes32 node, bytes calldata hash) external;\r\n}\r\n\r\n// File: @ensdomains/ethregistrar/contracts/ETHRegistrarController.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev A registrar controller for registering and renewing names at fixed cost.\r\n */\r\ncontract ETHRegistrarController is Ownable {\r\n    using StringUtils for *;\r\n\r\n    uint constant public MIN_REGISTRATION_DURATION = 28 days;\r\n\r\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n    bytes4 constant private COMMITMENT_CONTROLLER_ID = bytes4(\r\n        keccak256(\"rentPrice(string,uint256)\") ^\r\n        keccak256(\"available(string)\") ^\r\n        keccak256(\"makeCommitment(string,address,bytes32)\") ^\r\n        keccak256(\"commit(bytes32)\") ^\r\n        keccak256(\"register(string,address,uint256,bytes32)\") ^\r\n        keccak256(\"renew(string,uint256)\")\r\n    );\r\n\r\n    bytes4 constant private COMMITMENT_WITH_CONFIG_CONTROLLER_ID = bytes4(\r\n        keccak256(\"registerWithConfig(string,address,uint256,bytes32,address,address)\") ^\r\n        keccak256(\"makeCommitmentWithConfig(string,address,bytes32,address,address)\")\r\n    );\r\n\r\n    BaseRegistrar base;\r\n    PriceOracle prices;\r\n    uint public minCommitmentAge;\r\n    uint public maxCommitmentAge;\r\n\r\n    mapping(bytes32=>uint) public commitments;\r\n\r\n    event NameRegistered(string name, bytes32 indexed label, address indexed owner, uint cost, uint expires);\r\n    event NameRenewed(string name, bytes32 indexed label, uint cost, uint expires);\r\n    event NewPriceOracle(address indexed oracle);\r\n\r\n    constructor(BaseRegistrar _base, PriceOracle _prices, uint _minCommitmentAge, uint _maxCommitmentAge) public {\r\n        require(_maxCommitmentAge > _minCommitmentAge);\r\n\r\n        base = _base;\r\n        prices = _prices;\r\n        minCommitmentAge = _minCommitmentAge;\r\n        maxCommitmentAge = _maxCommitmentAge;\r\n    }\r\n\r\n    function rentPrice(string memory name, uint duration) view public returns(uint) {\r\n        bytes32 hash = keccak256(bytes(name));\r\n        return prices.price(name, base.nameExpires(uint256(hash)), duration);\r\n    }\r\n\r\n    function valid(string memory name) public pure returns(bool) {\r\n        return name.strlen() >= 3;\r\n    }\r\n\r\n    function available(string memory name) public view returns(bool) {\r\n        bytes32 label = keccak256(bytes(name));\r\n        return valid(name) && base.available(uint256(label));\r\n    }\r\n\r\n    function makeCommitment(string memory name, address owner, bytes32 secret) pure public returns(bytes32) {\r\n        return makeCommitmentWithConfig(name, owner, secret, address(0), address(0));\r\n    }\r\n\r\n    function makeCommitmentWithConfig(string memory name, address owner, bytes32 secret, address resolver, address addr) pure public returns(bytes32) {\r\n        bytes32 label = keccak256(bytes(name));\r\n        if (resolver == address(0) && addr == address(0)) {\r\n            return keccak256(abi.encodePacked(label, owner, secret));\r\n        }\r\n        require(resolver != address(0));\r\n        return keccak256(abi.encodePacked(label, owner, resolver, addr, secret));\r\n    }\r\n\r\n    function commit(bytes32 commitment) public {\r\n        require(commitments[commitment] + maxCommitmentAge < now);\r\n        commitments[commitment] = now;\r\n    }\r\n\r\n    function register(string calldata name, address owner, uint duration, bytes32 secret) external payable {\r\n      registerWithConfig(name, owner, duration, secret, address(0), address(0));\r\n    }\r\n\r\n    function registerWithConfig(string memory name, address owner, uint duration, bytes32 secret, address resolver, address addr) public payable {\r\n        bytes32 commitment = makeCommitmentWithConfig(name, owner, secret, resolver, addr);\r\n        uint cost = _consumeCommitment(name, duration, commitment);\r\n\r\n        bytes32 label = keccak256(bytes(name));\r\n        uint256 tokenId = uint256(label);\r\n\r\n        uint expires;\r\n        if(resolver != address(0)) {\r\n            // Set this contract as the (temporary) owner, giving it\r\n            // permission to set up the resolver.\r\n            expires = base.register(tokenId, address(this), duration);\r\n\r\n            // The nodehash of this label\r\n            bytes32 nodehash = keccak256(abi.encodePacked(base.baseNode(), label));\r\n\r\n            // Set the resolver\r\n            base.ens().setResolver(nodehash, resolver);\r\n\r\n            // Configure the resolver\r\n            if (addr != address(0)) {\r\n                Resolver(resolver).setAddr(nodehash, addr);\r\n            }\r\n\r\n            // Now transfer full ownership to the expeceted owner\r\n            base.reclaim(tokenId, owner);\r\n            base.transferFrom(address(this), owner, tokenId);\r\n        } else {\r\n            require(addr == address(0));\r\n            expires = base.register(tokenId, owner, duration);\r\n        }\r\n\r\n        emit NameRegistered(name, label, owner, cost, expires);\r\n\r\n        // Refund any extra payment\r\n        if(msg.value > cost) {\r\n            msg.sender.transfer(msg.value - cost);\r\n        }\r\n    }\r\n\r\n    function renew(string calldata name, uint duration) external payable {\r\n        uint cost = rentPrice(name, duration);\r\n        require(msg.value >= cost);\r\n\r\n        bytes32 label = keccak256(bytes(name));\r\n        uint expires = base.renew(uint256(label), duration);\r\n\r\n        if(msg.value > cost) {\r\n            msg.sender.transfer(msg.value - cost);\r\n        }\r\n\r\n        emit NameRenewed(name, label, cost, expires);\r\n    }\r\n\r\n    function setPriceOracle(PriceOracle _prices) public onlyOwner {\r\n        prices = _prices;\r\n        emit NewPriceOracle(address(prices));\r\n    }\r\n\r\n    function setCommitmentAges(uint _minCommitmentAge, uint _maxCommitmentAge) public onlyOwner {\r\n        minCommitmentAge = _minCommitmentAge;\r\n        maxCommitmentAge = _maxCommitmentAge;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\r\n        return interfaceID == INTERFACE_META_ID ||\r\n               interfaceID == COMMITMENT_CONTROLLER_ID ||\r\n               interfaceID == COMMITMENT_WITH_CONFIG_CONTROLLER_ID;\r\n    }\r\n\r\n    function _consumeCommitment(string memory name, uint duration, bytes32 commitment) internal returns (uint256) {\r\n        // Require a valid commitment\r\n        require(commitments[commitment] + minCommitmentAge <= now);\r\n\r\n        // If the commitment is too old, or the name is registered, stop\r\n        require(commitments[commitment] + maxCommitmentAge > now);\r\n        require(available(name));\r\n\r\n        delete(commitments[commitment]);\r\n\r\n        uint cost = rentPrice(name, duration);\r\n        require(duration >= MIN_REGISTRATION_DURATION);\r\n        require(msg.value >= cost);\r\n\r\n        return cost;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract BaseRegistrar\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"contract PriceOracle\",\"name\":\"_prices\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCommitmentAge\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_REGISTRATION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"makeCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"makeCommitmentWithConfig\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"registerWithConfig\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"rentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCommitmentAge\",\"type\":\"uint256\"}],\"name\":\"setCommitmentAges\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"_prices\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"valid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ETHRegistrarController", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000057f1887a8bf19b14fc0df6fd9b2acc9af147ea85000000000000000000000000b9d374d0fe3d8341155663fae31b7beae0ae233a000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000015180", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ae5aec11a7c9126de666c7630771a2e6e95d684de2539cfca1b14cb30a427a42"}, {"Rank": 2504, "Address": "0x2e6907a0ce523ccb5532ffea2e411df1eee26607", "NameTag": "", "Balance": 3497.39143069, "Percentage": 0.00296964, "TxCount": 15, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2530, "Address": "0xda12b368a93007ef2446717765917933cebc6080", "NameTag": "", "Balance": 3422.87663597, "Percentage": 0.00290637, "TxCount": 80, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2568, "Address": "0x98f0eccac8be6ca81565007e5f879a217fb1e316", "NameTag": "", "Balance": 3312.601, "Percentage": 0.00281274, "TxCount": 37, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2609, "Address": "0xb8689b7910954bf73431f63482d7dd155537ea7e", "NameTag": "Dopex: Multisig", "Balance": 3212.38277348, "Percentage": 0.00272764, "TxCount": 17, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2650, "Address": "0x1cf0df2a5a20cd61d68d4489eebbf85b8d39e18a", "NameTag": "Rarible: Treasury", "Balance": 3111.13382907, "Percentage": 0.00264167, "TxCount": 21, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2660, "Address": "0x5c8344bcdc38f1ab5eb5c1d4a35ddeea522b5dfa", "NameTag": "Synthetix: Collateral Eth", "Balance": 3098.91908228, "Percentage": 0.0026313, "TxCount": 971, "SourceCode": "/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n\n* Synthetix: CollateralEth.sol\n*\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/master/contracts/CollateralEth.sol\n* Docs: https://docs.synthetix.io/contracts/CollateralEth\n*\n* Contract Dependencies: \n*\t- Collateral\n*\t- IAddressResolver\n*\t- ICollateralEth\n*\t- ICollateralLoan\n*\t- MixinResolver\n*\t- MixinSystemSettings\n*\t- Owned\n*\t- ReentrancyGuard\n*\t- State\n* Libraries: \n*\t- SafeDecimalMath\n*\t- SafeMath\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2021 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n\n\npragma solidity ^0.5.16;\n\n\n// https://docs.synthetix.io/contracts/source/contracts/owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) public {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n\n    function getSynth(bytes32 key) external view returns (address);\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/isynth\ninterface ISynth {\n    // Views\n    function currencyKey() external view returns (bytes32);\n\n    function transferableSynths(address account) external view returns (uint);\n\n    // Mutative functions\n    function transferAndSettle(address to, uint value) external returns (bool);\n\n    function transferFromAndSettle(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Restricted: used internally to Synthetix\n    function burn(address account, uint amount) external;\n\n    function issue(address account, uint amount) external;\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/iissuer\ninterface IIssuer {\n    // Views\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\n\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\n\n    function availableSynthCount() external view returns (uint);\n\n    function availableSynths(uint index) external view returns (ISynth);\n\n    function canBurnSynths(address account) external view returns (bool);\n\n    function collateral(address account) external view returns (uint);\n\n    function collateralisationRatio(address issuer) external view returns (uint);\n\n    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\n        external\n        view\n        returns (uint cratio, bool anyRateIsInvalid);\n\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint debtBalance);\n\n    function issuanceRatio() external view returns (uint);\n\n    function lastIssueEvent(address account) external view returns (uint);\n\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\n\n    function minimumStakeTime() external view returns (uint);\n\n    function remainingIssuableSynths(address issuer)\n        external\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        );\n\n    function synths(bytes32 currencyKey) external view returns (ISynth);\n\n    function getSynths(bytes32[] calldata currencyKeys) external view returns (ISynth[] memory);\n\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\n\n    function totalIssuedSynths(bytes32 currencyKey, bool excludeEtherCollateral) external view returns (uint);\n\n    function transferableSynthetixAndAnyRateIsInvalid(address account, uint balance)\n        external\n        view\n        returns (uint transferable, bool anyRateIsInvalid);\n\n    // Restricted: used internally to Synthetix\n    function issueSynths(address from, uint amount) external;\n\n    function issueSynthsOnBehalf(\n        address issueFor,\n        address from,\n        uint amount\n    ) external;\n\n    function issueMaxSynths(address from) external;\n\n    function issueMaxSynthsOnBehalf(address issueFor, address from) external;\n\n    function burnSynths(address from, uint amount) external;\n\n    function burnSynthsOnBehalf(\n        address burnForAddress,\n        address from,\n        uint amount\n    ) external;\n\n    function burnSynthsToTarget(address from) external;\n\n    function burnSynthsToTargetOnBehalf(address burnForAddress, address from) external;\n\n    function liquidateDelinquentAccount(\n        address account,\n        uint susdAmount,\n        address liquidator\n    ) external returns (uint totalRedeemed, uint amountToLiquidate);\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.synthetix.io/contracts/source/contracts/addressresolver\ncontract AddressResolver is Owned, IAddressResolver {\n    mapping(bytes32 => address) public repository;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) external onlyOwner {\n        require(names.length == destinations.length, \"Input lengths must match\");\n\n        for (uint i = 0; i < names.length; i++) {\n            bytes32 name = names[i];\n            address destination = destinations[i];\n            repository[name] = destination;\n            emit AddressImported(name, destination);\n        }\n    }\n\n    /* ========= PUBLIC FUNCTIONS ========== */\n\n    function rebuildCaches(MixinResolver[] calldata destinations) external {\n        for (uint i = 0; i < destinations.length; i++) {\n            destinations[i].rebuildCache();\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function areAddressesImported(bytes32[] calldata names, address[] calldata destinations) external view returns (bool) {\n        for (uint i = 0; i < names.length; i++) {\n            if (repository[names[i]] != destinations[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function getAddress(bytes32 name) external view returns (address) {\n        return repository[name];\n    }\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {\n        address _foundAddress = repository[name];\n        require(_foundAddress != address(0), reason);\n        return _foundAddress;\n    }\n\n    function getSynth(bytes32 key) external view returns (address) {\n        IIssuer issuer = IIssuer(repository[\"Issuer\"]);\n        require(address(issuer) != address(0), \"Cannot find Issuer address\");\n        return address(issuer.synths(key));\n    }\n\n    /* ========== EVENTS ========== */\n\n    event AddressImported(bytes32 name, address destination);\n}\n\n\n// solhint-disable payable-fallback\n\n// https://docs.synthetix.io/contracts/source/contracts/readproxy\ncontract ReadProxy is Owned {\n    address public target;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    function setTarget(address _target) external onlyOwner {\n        target = _target;\n        emit TargetUpdated(target);\n    }\n\n    function() external {\n        // The basics of a proxy read call\n        // Note that msg.sender in the underlying will always be the address of this contract.\n        assembly {\n            calldatacopy(0, 0, calldatasize)\n\n            // Use of staticcall - this will revert if the underlying function mutates state\n            let result := staticcall(gas, sload(target_slot), 0, calldatasize, 0, 0)\n            returndatacopy(0, 0, returndatasize)\n\n            if iszero(result) {\n                revert(0, returndatasize)\n            }\n            return(0, returndatasize)\n        }\n    }\n\n    event TargetUpdated(address newTarget);\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.synthetix.io/contracts/source/contracts/mixinresolver\ncontract MixinResolver {\n    AddressResolver public resolver;\n\n    mapping(bytes32 => address) private addressCache;\n\n    constructor(address _resolver) internal {\n        resolver = AddressResolver(_resolver);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function combineArrays(bytes32[] memory first, bytes32[] memory second)\n        internal\n        pure\n        returns (bytes32[] memory combination)\n    {\n        combination = new bytes32[](first.length + second.length);\n\n        for (uint i = 0; i < first.length; i++) {\n            combination[i] = first[i];\n        }\n\n        for (uint j = 0; j < second.length; j++) {\n            combination[first.length + j] = second[j];\n        }\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    // Note: this function is public not external in order for it to be overridden and invoked via super in subclasses\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {}\n\n    function rebuildCache() public {\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\n        // The resolver must call this function whenver it updates its state\n        for (uint i = 0; i < requiredAddresses.length; i++) {\n            bytes32 name = requiredAddresses[i];\n            // Note: can only be invoked once the resolver has all the targets needed added\n            address destination = resolver.requireAndGetAddress(\n                name,\n                string(abi.encodePacked(\"Resolver missing target: \", name))\n            );\n            addressCache[name] = destination;\n            emit CacheUpdated(name, destination);\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function isResolverCached() external view returns (bool) {\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\n        for (uint i = 0; i < requiredAddresses.length; i++) {\n            bytes32 name = requiredAddresses[i];\n            // false if our cache is invalid or if the resolver doesn't have the required address\n            if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function requireAndGetAddress(bytes32 name) internal view returns (address) {\n        address _foundAddress = addressCache[name];\n        require(_foundAddress != address(0), string(abi.encodePacked(\"Missing address: \", name)));\n        return _foundAddress;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event CacheUpdated(bytes32 name, address destination);\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/iflexiblestorage\ninterface IFlexibleStorage {\n    // Views\n    function getUIntValue(bytes32 contractName, bytes32 record) external view returns (uint);\n\n    function getUIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (uint[] memory);\n\n    function getIntValue(bytes32 contractName, bytes32 record) external view returns (int);\n\n    function getIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (int[] memory);\n\n    function getAddressValue(bytes32 contractName, bytes32 record) external view returns (address);\n\n    function getAddressValues(bytes32 contractName, bytes32[] calldata records) external view returns (address[] memory);\n\n    function getBoolValue(bytes32 contractName, bytes32 record) external view returns (bool);\n\n    function getBoolValues(bytes32 contractName, bytes32[] calldata records) external view returns (bool[] memory);\n\n    function getBytes32Value(bytes32 contractName, bytes32 record) external view returns (bytes32);\n\n    function getBytes32Values(bytes32 contractName, bytes32[] calldata records) external view returns (bytes32[] memory);\n\n    // Mutative functions\n    function deleteUIntValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteIntValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteAddressValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteBoolValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteBytes32Value(bytes32 contractName, bytes32 record) external;\n\n    function setUIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        uint value\n    ) external;\n\n    function setUIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        uint[] calldata values\n    ) external;\n\n    function setIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        int value\n    ) external;\n\n    function setIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        int[] calldata values\n    ) external;\n\n    function setAddressValue(\n        bytes32 contractName,\n        bytes32 record,\n        address value\n    ) external;\n\n    function setAddressValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        address[] calldata values\n    ) external;\n\n    function setBoolValue(\n        bytes32 contractName,\n        bytes32 record,\n        bool value\n    ) external;\n\n    function setBoolValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bool[] calldata values\n    ) external;\n\n    function setBytes32Value(\n        bytes32 contractName,\n        bytes32 record,\n        bytes32 value\n    ) external;\n\n    function setBytes32Values(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bytes32[] calldata values\n    ) external;\n}\n\n\n// Internal references\n\n\n// https://docs.synthetix.io/contracts/source/contracts/mixinsystemsettings\ncontract MixinSystemSettings is MixinResolver {\n    bytes32 internal constant SETTING_CONTRACT_NAME = \"SystemSettings\";\n\n    bytes32 internal constant SETTING_WAITING_PERIOD_SECS = \"waitingPeriodSecs\";\n    bytes32 internal constant SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR = \"priceDeviationThresholdFactor\";\n    bytes32 internal constant SETTING_ISSUANCE_RATIO = \"issuanceRatio\";\n    bytes32 internal constant SETTING_FEE_PERIOD_DURATION = \"feePeriodDuration\";\n    bytes32 internal constant SETTING_TARGET_THRESHOLD = \"targetThreshold\";\n    bytes32 internal constant SETTING_LIQUIDATION_DELAY = \"liquidationDelay\";\n    bytes32 internal constant SETTING_LIQUIDATION_RATIO = \"liquidationRatio\";\n    bytes32 internal constant SETTING_LIQUIDATION_PENALTY = \"liquidationPenalty\";\n    bytes32 internal constant SETTING_RATE_STALE_PERIOD = \"rateStalePeriod\";\n    bytes32 internal constant SETTING_EXCHANGE_FEE_RATE = \"exchangeFeeRate\";\n    bytes32 internal constant SETTING_MINIMUM_STAKE_TIME = \"minimumStakeTime\";\n    bytes32 internal constant SETTING_AGGREGATOR_WARNING_FLAGS = \"aggregatorWarningFlags\";\n    bytes32 internal constant SETTING_TRADING_REWARDS_ENABLED = \"tradingRewardsEnabled\";\n    bytes32 internal constant SETTING_DEBT_SNAPSHOT_STALE_TIME = \"debtSnapshotStaleTime\";\n    bytes32 internal constant SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT = \"crossDomainDepositGasLimit\";\n    bytes32 internal constant SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT = \"crossDomainEscrowGasLimit\";\n    bytes32 internal constant SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT = \"crossDomainRewardGasLimit\";\n    bytes32 internal constant SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT = \"crossDomainWithdrawalGasLimit\";\n\n    bytes32 internal constant CONTRACT_FLEXIBLESTORAGE = \"FlexibleStorage\";\n\n    enum CrossDomainMessageGasLimits {Deposit, Escrow, Reward, Withdrawal}\n\n    constructor(address _resolver) internal MixinResolver(_resolver) {}\n\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\n        addresses = new bytes32[](1);\n        addresses[0] = CONTRACT_FLEXIBLESTORAGE;\n    }\n\n    function flexibleStorage() internal view returns (IFlexibleStorage) {\n        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));\n    }\n\n    function _getGasLimitSetting(CrossDomainMessageGasLimits gasLimitType) internal pure returns (bytes32) {\n        if (gasLimitType == CrossDomainMessageGasLimits.Deposit) {\n            return SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT;\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Escrow) {\n            return SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT;\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Reward) {\n            return SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT;\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Withdrawal) {\n            return SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT;\n        } else {\n            revert(\"Unknown gas limit type\");\n        }\n    }\n\n    function getCrossDomainMessageGasLimit(CrossDomainMessageGasLimits gasLimitType) internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, _getGasLimitSetting(gasLimitType));\n    }\n\n    function getTradingRewardsEnabled() internal view returns (bool) {\n        return flexibleStorage().getBoolValue(SETTING_CONTRACT_NAME, SETTING_TRADING_REWARDS_ENABLED);\n    }\n\n    function getWaitingPeriodSecs() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_WAITING_PERIOD_SECS);\n    }\n\n    function getPriceDeviationThresholdFactor() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR);\n    }\n\n    function getIssuanceRatio() internal view returns (uint) {\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ISSUANCE_RATIO);\n    }\n\n    function getFeePeriodDuration() internal view returns (uint) {\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_FEE_PERIOD_DURATION);\n    }\n\n    function getTargetThreshold() internal view returns (uint) {\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_TARGET_THRESHOLD);\n    }\n\n    function getLiquidationDelay() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_DELAY);\n    }\n\n    function getLiquidationRatio() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_RATIO);\n    }\n\n    function getLiquidationPenalty() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_PENALTY);\n    }\n\n    function getRateStalePeriod() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_RATE_STALE_PERIOD);\n    }\n\n    function getExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {\n        return\n            flexibleStorage().getUIntValue(\n                SETTING_CONTRACT_NAME,\n                keccak256(abi.encodePacked(SETTING_EXCHANGE_FEE_RATE, currencyKey))\n            );\n    }\n\n    function getMinimumStakeTime() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MINIMUM_STAKE_TIME);\n    }\n\n    function getAggregatorWarningFlags() internal view returns (address) {\n        return flexibleStorage().getAddressValue(SETTING_CONTRACT_NAME, SETTING_AGGREGATOR_WARNING_FLAGS);\n    }\n\n    function getDebtSnapshotStaleTime() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_DEBT_SNAPSHOT_STALE_TIME);\n    }\n}\n\n\npragma experimental ABIEncoderV2;\n\n\ninterface ICollateralLoan {\n    struct Loan {\n        // ID for the loan\n        uint id;\n        //  Acccount that created the loan\n        address payable account;\n        //  Amount of collateral deposited\n        uint collateral;\n        // The synth that was borowed\n        bytes32 currency;\n        //  Amount of synths borrowed\n        uint amount;\n        // Indicates if the position was short sold\n        bool short;\n        // interest amounts accrued\n        uint accruedInterest;\n        // last interest index\n        uint interestIndex;\n        // time of last interaction.\n        uint lastInteraction;\n    }\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n// Libraries\n\n\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\nlibrary SafeDecimalMath {\n    using SafeMath for uint;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint public constant UNIT = 10**uint(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n}\n\n\n// Inheritance\n\n\n// https://docs.synthetix.io/contracts/source/contracts/state\ncontract State is Owned {\n    // the address of the contract that can modify variables\n    // this can only be changed by the owner of this contract\n    address public associatedContract;\n\n    constructor(address _associatedContract) internal {\n        // This contract is abstract, and thus cannot be instantiated directly\n        require(owner != address(0), \"Owner must be set\");\n\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== SETTERS ========== */\n\n    // Change the associated contract to a new address\n    function setAssociatedContract(address _associatedContract) external onlyOwner {\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyAssociatedContract {\n        require(msg.sender == associatedContract, \"Only the associated contract can perform this action\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event AssociatedContractUpdated(address associatedContract);\n}\n\n\n// Inheritance\n\n\n// Libraries\n\n\ncontract CollateralState is Owned, State, ICollateralLoan {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    mapping(address => Loan[]) public loans;\n\n    constructor(address _owner, address _associatedContract) public Owned(_owner) State(_associatedContract) {}\n\n    /* ========== VIEWS ========== */\n    // If we do not find the loan, this returns a struct with 0'd values.\n    function getLoan(address account, uint256 loanID) external view returns (Loan memory) {\n        Loan[] memory accountLoans = loans[account];\n        for (uint i = 0; i < accountLoans.length; i++) {\n            if (accountLoans[i].id == loanID) {\n                return (accountLoans[i]);\n            }\n        }\n    }\n\n    function getNumLoans(address account) external view returns (uint numLoans) {\n        return loans[account].length;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function createLoan(Loan memory loan) public onlyAssociatedContract {\n        loans[loan.account].push(loan);\n    }\n\n    function updateLoan(Loan memory loan) public onlyAssociatedContract {\n        Loan[] storage accountLoans = loans[loan.account];\n        for (uint i = 0; i < accountLoans.length; i++) {\n            if (accountLoans[i].id == loan.id) {\n                loans[loan.account][i] = loan;\n            }\n        }\n    }\n}\n\n\ninterface ICollateralManager {\n    // Manager information\n    function hasCollateral(address collateral) external view returns (bool);\n\n    function isSynthManaged(bytes32 currencyKey) external view returns (bool);\n\n    // State information\n    function long(bytes32 synth) external view returns (uint amount);\n\n    function short(bytes32 synth) external view returns (uint amount);\n\n    function totalLong() external view returns (uint susdValue, bool anyRateIsInvalid);\n\n    function totalShort() external view returns (uint susdValue, bool anyRateIsInvalid);\n\n    function getBorrowRate() external view returns (uint borrowRate, bool anyRateIsInvalid);\n\n    function getShortRate(bytes32 synth) external view returns (uint shortRate, bool rateIsInvalid);\n\n    function getRatesAndTime(uint index)\n        external\n        view\n        returns (\n            uint entryRate,\n            uint lastRate,\n            uint lastUpdated,\n            uint newIndex\n        );\n\n    function getShortRatesAndTime(bytes32 currency, uint index)\n        external\n        view\n        returns (\n            uint entryRate,\n            uint lastRate,\n            uint lastUpdated,\n            uint newIndex\n        );\n\n    function exceedsDebtLimit(uint amount, bytes32 currency) external view returns (bool canIssue, bool anyRateIsInvalid);\n\n    function areSynthsAndCurrenciesSet(bytes32[] calldata requiredSynthNamesInResolver, bytes32[] calldata synthKeys)\n        external\n        view\n        returns (bool);\n\n    function areShortableSynthsSet(bytes32[] calldata requiredSynthNamesInResolver, bytes32[] calldata synthKeys)\n        external\n        view\n        returns (bool);\n\n    // Loans\n    function getNewLoanId() external returns (uint id);\n\n    // Manager mutative\n    function addCollaterals(address[] calldata collaterals) external;\n\n    function removeCollaterals(address[] calldata collaterals) external;\n\n    function addSynths(bytes32[] calldata synthNamesInResolver, bytes32[] calldata synthKeys) external;\n\n    function removeSynths(bytes32[] calldata synths, bytes32[] calldata synthKeys) external;\n\n    function addShortableSynths(bytes32[2][] calldata requiredSynthAndInverseNamesInResolver, bytes32[] calldata synthKeys)\n        external;\n\n    function removeShortableSynths(bytes32[] calldata synths) external;\n\n    // State mutative\n    function updateBorrowRates(uint rate) external;\n\n    function updateShortRates(bytes32 currency, uint rate) external;\n\n    function incrementLongs(bytes32 synth, uint amount) external;\n\n    function decrementLongs(bytes32 synth, uint amount) external;\n\n    function incrementShorts(bytes32 synth, uint amount) external;\n\n    function decrementShorts(bytes32 synth, uint amount) external;\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/isystemstatus\ninterface ISystemStatus {\n    struct Status {\n        bool canSuspend;\n        bool canResume;\n    }\n\n    struct Suspension {\n        bool suspended;\n        // reason is an integer code,\n        // 0 => no reason, 1 => upgrading, 2+ => defined by system usage\n        uint248 reason;\n    }\n\n    // Views\n    function accessControl(bytes32 section, address account) external view returns (bool canSuspend, bool canResume);\n\n    function requireSystemActive() external view;\n\n    function requireIssuanceActive() external view;\n\n    function requireExchangeActive() external view;\n\n    function requireSynthActive(bytes32 currencyKey) external view;\n\n    function requireSynthsActive(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external view;\n\n    function synthSuspension(bytes32 currencyKey) external view returns (bool suspended, uint248 reason);\n\n    // Restricted functions\n    function suspendSynth(bytes32 currencyKey, uint256 reason) external;\n\n    function updateAccessControl(\n        bytes32 section,\n        address account,\n        bool canSuspend,\n        bool canResume\n    ) external;\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/ifeepool\ninterface IFeePool {\n    // Views\n\n    // solhint-disable-next-line func-name-mixedcase\n    function FEE_ADDRESS() external view returns (address);\n\n    function feesAvailable(address account) external view returns (uint, uint);\n\n    function feePeriodDuration() external view returns (uint);\n\n    function isFeesClaimable(address account) external view returns (bool);\n\n    function targetThreshold() external view returns (uint);\n\n    function totalFeesAvailable() external view returns (uint);\n\n    function totalRewardsAvailable() external view returns (uint);\n\n    // Mutative Functions\n    function claimFees() external returns (bool);\n\n    function claimOnBehalf(address claimingForAddress) external returns (bool);\n\n    function closeCurrentFeePeriod() external;\n\n    // Restricted: used internally to Synthetix\n    function appendAccountIssuanceRecord(\n        address account,\n        uint lockedAmount,\n        uint debtEntryIndex\n    ) external;\n\n    function recordFeePaid(uint sUSDAmount) external;\n\n    function setRewardsToDistribute(uint amount) external;\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/ierc20\ninterface IERC20 {\n    // ERC20 Optional Views\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    // Views\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    // Mutative functions\n    function transfer(address to, uint value) external returns (bool);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/iexchangerates\ninterface IExchangeRates {\n    // Structs\n    struct RateAndUpdatedTime {\n        uint216 rate;\n        uint40 time;\n    }\n\n    struct InversePricing {\n        uint entryPoint;\n        uint upperLimit;\n        uint lowerLimit;\n        bool frozenAtUpperLimit;\n        bool frozenAtLowerLimit;\n    }\n\n    // Views\n    function aggregators(bytes32 currencyKey) external view returns (address);\n\n    function aggregatorWarningFlags() external view returns (address);\n\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\n\n    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\n\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\n\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\n\n    function effectiveValue(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint value);\n\n    function effectiveValueAndRates(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint value,\n            uint sourceRate,\n            uint destinationRate\n        );\n\n    function effectiveValueAtRound(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        uint roundIdForSrc,\n        uint roundIdForDest\n    ) external view returns (uint value);\n\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\n\n    function getLastRoundIdBeforeElapsedSecs(\n        bytes32 currencyKey,\n        uint startingRoundId,\n        uint startingTimestamp,\n        uint timediff\n    ) external view returns (uint);\n\n    function inversePricing(bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint entryPoint,\n            uint upperLimit,\n            uint lowerLimit,\n            bool frozenAtUpperLimit,\n            bool frozenAtLowerLimit\n        );\n\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\n\n    function oracle() external view returns (address);\n\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\n\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\n\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\n\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\n\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\n\n    function rateStalePeriod() external view returns (uint);\n\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\n        external\n        view\n        returns (uint[] memory rates, uint[] memory times);\n\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\n        external\n        view\n        returns (uint[] memory rates, bool anyRateInvalid);\n\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\n\n    // Mutative functions\n    function freezeRate(bytes32 currencyKey) external;\n}\n\n\ninterface IVirtualSynth {\n    // Views\n    function balanceOfUnderlying(address account) external view returns (uint);\n\n    function rate() external view returns (uint);\n\n    function readyToSettle() external view returns (bool);\n\n    function secsLeftInWaitingPeriod() external view returns (uint);\n\n    function settled() external view returns (bool);\n\n    function synth() external view returns (ISynth);\n\n    // Mutative functions\n    function settle(address account) external;\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/iexchanger\ninterface IExchanger {\n    // Views\n    function calculateAmountAfterSettlement(\n        address from,\n        bytes32 currencyKey,\n        uint amount,\n        uint refunded\n    ) external view returns (uint amountAfterSettlement);\n\n    function isSynthRateInvalid(bytes32 currencyKey) external view returns (bool);\n\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\n\n    function settlementOwing(address account, bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint reclaimAmount,\n            uint rebateAmount,\n            uint numEntries\n        );\n\n    function hasWaitingPeriodOrSettlementOwing(address account, bytes32 currencyKey) external view returns (bool);\n\n    function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey)\n        external\n        view\n        returns (uint exchangeFeeRate);\n\n    function getAmountsForExchange(\n        uint sourceAmount,\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint amountReceived,\n            uint fee,\n            uint exchangeFeeRate\n        );\n\n    function priceDeviationThresholdFactor() external view returns (uint);\n\n    function waitingPeriodSecs() external view returns (uint);\n\n    // Mutative functions\n    function exchange(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function exchangeWithTracking(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalfWithTracking(\n        address exchangeForAddress,\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeWithVirtual(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived, IVirtualSynth vSynth);\n\n    function settle(address from, bytes32 currencyKey)\n        external\n        returns (\n            uint reclaimed,\n            uint refunded,\n            uint numEntries\n        );\n\n    function setLastExchangeRateForSynth(bytes32 currencyKey, uint rate) external;\n\n    function suspendSynthWithInvalidRate(bytes32 currencyKey) external;\n}\n\n\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\ninterface IShortingRewards {\n    // Views\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function getRewardForDuration() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    // Mutative\n\n    function enrol(address account, uint256 amount) external;\n\n    function withdraw(address account, uint256 amount) external;\n\n    function getReward(address account) external;\n\n    function exit(address account) external;\n}\n\n\n// Inheritance\n\n\n// Libraries\n\n\n// Internal references\n\n\ncontract Collateral is ICollateralLoan, Owned, MixinSystemSettings {\n    /* ========== LIBRARIES ========== */\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    /* ========== CONSTANTS ========== */\n\n    bytes32 private constant sUSD = \"sUSD\";\n\n    // ========== STATE VARIABLES ==========\n\n    // The synth corresponding to the collateral.\n    bytes32 public collateralKey;\n\n    // Stores loans\n    CollateralState public state;\n\n    address public manager;\n\n    // The synths that this contract can issue.\n    bytes32[] public synths;\n\n    // Map from currency key to synth contract name.\n    mapping(bytes32 => bytes32) public synthsByKey;\n\n    // Map from currency key to the shorting rewards contract\n    mapping(bytes32 => address) public shortingRewards;\n\n    // ========== SETTER STATE VARIABLES ==========\n\n    // The minimum collateral ratio required to avoid liquidation.\n    uint public minCratio;\n\n    // The minimum amount of collateral to create a loan.\n    uint public minCollateral;\n\n    // The fee charged for issuing a loan.\n    uint public issueFeeRate;\n\n    // The maximum number of loans that an account can create with this collateral.\n    uint public maxLoansPerAccount = 50;\n\n    // Time in seconds that a user must wait between interacting with a loan.\n    // Provides front running and flash loan protection.\n    uint public interactionDelay = 300;\n\n    bool public canOpenLoans = true;\n\n    /* ========== ADDRESS RESOLVER CONFIGURATION ========== */\n\n    bytes32 private constant CONTRACT_SYSTEMSTATUS = \"SystemStatus\";\n    bytes32 private constant CONTRACT_EXRATES = \"ExchangeRates\";\n    bytes32 private constant CONTRACT_EXCHANGER = \"Exchanger\";\n    bytes32 private constant CONTRACT_FEEPOOL = \"FeePool\";\n    bytes32 private constant CONTRACT_SYNTHSUSD = \"SynthsUSD\";\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        CollateralState _state,\n        address _owner,\n        address _manager,\n        address _resolver,\n        bytes32 _collateralKey,\n        uint _minCratio,\n        uint _minCollateral\n    ) public Owned(_owner) MixinSystemSettings(_resolver) {\n        manager = _manager;\n        state = _state;\n        collateralKey = _collateralKey;\n        minCratio = _minCratio;\n        minCollateral = _minCollateral;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\n        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();\n        bytes32[] memory newAddresses = new bytes32[](5);\n        newAddresses[0] = CONTRACT_FEEPOOL;\n        newAddresses[1] = CONTRACT_EXRATES;\n        newAddresses[2] = CONTRACT_EXCHANGER;\n        newAddresses[3] = CONTRACT_SYSTEMSTATUS;\n        newAddresses[4] = CONTRACT_SYNTHSUSD;\n\n        bytes32[] memory combined = combineArrays(existingAddresses, newAddresses);\n\n        addresses = combineArrays(combined, synths);\n    }\n\n    /* ---------- Related Contracts ---------- */\n\n    function _systemStatus() internal view returns (ISystemStatus) {\n        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));\n    }\n\n    function _synth(bytes32 synthName) internal view returns (ISynth) {\n        return ISynth(requireAndGetAddress(synthName));\n    }\n\n    function _synthsUSD() internal view returns (ISynth) {\n        return ISynth(requireAndGetAddress(CONTRACT_SYNTHSUSD));\n    }\n\n    function _exchangeRates() internal view returns (IExchangeRates) {\n        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));\n    }\n\n    function _exchanger() internal view returns (IExchanger) {\n        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));\n    }\n\n    function _feePool() internal view returns (IFeePool) {\n        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));\n    }\n\n    function _manager() internal view returns (ICollateralManager) {\n        return ICollateralManager(manager);\n    }\n\n    /* ---------- Public Views ---------- */\n\n    function collateralRatio(Loan memory loan) public view returns (uint cratio) {\n        uint cvalue = _exchangeRates().effectiveValue(collateralKey, loan.collateral, sUSD);\n        uint dvalue = _exchangeRates().effectiveValue(loan.currency, loan.amount.add(loan.accruedInterest), sUSD);\n        cratio = cvalue.divideDecimal(dvalue);\n    }\n\n    // The maximum number of synths issuable for this amount of collateral\n    function maxLoan(uint amount, bytes32 currency) public view returns (uint max) {\n        max = issuanceRatio().multiplyDecimal(_exchangeRates().effectiveValue(collateralKey, amount, currency));\n    }\n\n    /**\n     * r = target issuance ratio\n     * D = debt value in sUSD\n     * V = collateral value in sUSD\n     * P = liquidation penalty\n     * Calculates amount of synths = (D - V * r) / (1 - (1 + P) * r)\n     * Note: if you pass a loan in here that is not eligible for liquidation it will revert.\n     * We check the ratio first in liquidateInternal and only pass eligible loans in.\n     */\n    function liquidationAmount(Loan memory loan) public view returns (uint amount) {\n        uint liquidationPenalty = getLiquidationPenalty();\n        uint debtValue = _exchangeRates().effectiveValue(loan.currency, loan.amount.add(loan.accruedInterest), sUSD);\n        uint collateralValue = _exchangeRates().effectiveValue(collateralKey, loan.collateral, sUSD);\n        uint unit = SafeDecimalMath.unit();\n\n        uint dividend = debtValue.sub(collateralValue.divideDecimal(minCratio));\n        uint divisor = unit.sub(unit.add(liquidationPenalty).divideDecimal(minCratio));\n\n        uint sUSDamount = dividend.divideDecimal(divisor);\n\n        return _exchangeRates().effectiveValue(sUSD, sUSDamount, loan.currency);\n    }\n\n    // amount is the amount of synths we are liquidating\n    function collateralRedeemed(bytes32 currency, uint amount) public view returns (uint collateral) {\n        uint liquidationPenalty = getLiquidationPenalty();\n        collateral = _exchangeRates().effectiveValue(currency, amount, collateralKey);\n\n        collateral = collateral.multiplyDecimal(SafeDecimalMath.unit().add(liquidationPenalty));\n    }\n\n    function areSynthsAndCurrenciesSet(bytes32[] calldata _synthNamesInResolver, bytes32[] calldata _synthKeys)\n        external\n        view\n        returns (bool)\n    {\n        if (synths.length != _synthNamesInResolver.length) {\n            return false;\n        }\n\n        for (uint i = 0; i < _synthNamesInResolver.length; i++) {\n            bytes32 synthName = _synthNamesInResolver[i];\n            if (synths[i] != synthName) {\n                return false;\n            }\n            if (synthsByKey[_synthKeys[i]] != synths[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /* ---------- UTILITIES ---------- */\n\n    // Check the account has enough of the synth to make the payment\n    function _checkSynthBalance(\n        address payer,\n        bytes32 key,\n        uint amount\n    ) internal view {\n        require(IERC20(address(_synth(synthsByKey[key]))).balanceOf(payer) >= amount, \"Not enough synth balance\");\n    }\n\n    // We set the interest index to 0 to indicate the loan has been closed.\n    function _checkLoanAvailable(Loan memory _loan) internal view {\n        require(_loan.interestIndex > 0, \"Loan does not exist\");\n        require(_loan.lastInteraction.add(interactionDelay) <= block.timestamp, \"Loan recently interacted with\");\n    }\n\n    function issuanceRatio() internal view returns (uint ratio) {\n        ratio = SafeDecimalMath.unit().divideDecimalRound(minCratio);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /* ---------- Synths ---------- */\n\n    function addSynths(bytes32[] calldata _synthNamesInResolver, bytes32[] calldata _synthKeys) external onlyOwner {\n        require(_synthNamesInResolver.length == _synthKeys.length, \"Input array length mismatch\");\n\n        for (uint i = 0; i < _synthNamesInResolver.length; i++) {\n            bytes32 synthName = _synthNamesInResolver[i];\n            synths.push(synthName);\n            synthsByKey[_synthKeys[i]] = synthName;\n        }\n\n        // ensure cache has the latest\n        rebuildCache();\n    }\n\n    /* ---------- Rewards Contracts ---------- */\n\n    function addRewardsContracts(address rewardsContract, bytes32 synth) external onlyOwner {\n        shortingRewards[synth] = rewardsContract;\n    }\n\n    /* ---------- SETTERS ---------- */\n\n    function setMinCratio(uint _minCratio) external onlyOwner {\n        require(_minCratio > SafeDecimalMath.unit(), \"Must be greater than 1\");\n        minCratio = _minCratio;\n        emit MinCratioRatioUpdated(minCratio);\n    }\n\n    function setIssueFeeRate(uint _issueFeeRate) external onlyOwner {\n        issueFeeRate = _issueFeeRate;\n        emit IssueFeeRateUpdated(issueFeeRate);\n    }\n\n    function setInteractionDelay(uint _interactionDelay) external onlyOwner {\n        require(_interactionDelay <= SafeDecimalMath.unit() * 3600, \"Max 1 hour\");\n        interactionDelay = _interactionDelay;\n        emit InteractionDelayUpdated(interactionDelay);\n    }\n\n    function setManager(address _newManager) external onlyOwner {\n        manager = _newManager;\n        emit ManagerUpdated(manager);\n    }\n\n    function setCanOpenLoans(bool _canOpenLoans) external onlyOwner {\n        canOpenLoans = _canOpenLoans;\n        emit CanOpenLoansUpdated(canOpenLoans);\n    }\n\n    /* ---------- LOAN INTERACTIONS ---------- */\n\n    function openInternal(\n        uint collateral,\n        uint amount,\n        bytes32 currency,\n        bool short\n    ) internal returns (uint id) {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        require(canOpenLoans, \"Opening is disabled\");\n\n        // 1. Make sure the collateral rate is valid.\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. We can only issue certain synths.\n        require(synthsByKey[currency] > 0, \"Not allowed to issue this synth\");\n\n        // 3. Make sure the synth rate is not invalid.\n        require(!_exchangeRates().rateIsInvalid(currency), \"Currency rate is invalid\");\n\n        // 4. Collateral >= minimum collateral size.\n        require(collateral >= minCollateral, \"Not enough collateral to open\");\n\n        // 5. Cap the number of loans so that the array doesn't get too big.\n        require(state.getNumLoans(msg.sender) < maxLoansPerAccount, \"Max loans exceeded\");\n\n        // 6. Check we haven't hit the debt cap for non snx collateral.\n        (bool canIssue, bool anyRateIsInvalid) = _manager().exceedsDebtLimit(amount, currency);\n\n        require(canIssue && !anyRateIsInvalid, \"Debt limit or invalid rate\");\n\n        // 7. Require requested loan < max loan\n        require(amount <= maxLoan(collateral, currency), \"Exceeds max borrowing power\");\n\n        // 8. This fee is denominated in the currency of the loan\n        uint issueFee = amount.multiplyDecimalRound(issueFeeRate);\n\n        // 9. Calculate the minting fee and subtract it from the loan amount\n        uint loanAmountMinusFee = amount.sub(issueFee);\n\n        // 10. Get a Loan ID\n        id = _manager().getNewLoanId();\n\n        // 11. Create the loan struct.\n        Loan memory loan = Loan({\n            id: id,\n            account: msg.sender,\n            collateral: collateral,\n            currency: currency,\n            amount: amount,\n            short: short,\n            accruedInterest: 0,\n            interestIndex: 0,\n            lastInteraction: block.timestamp\n        });\n\n        // 12. Accrue interest on the loan.\n        loan = accrueInterest(loan);\n\n        // 13. Save the loan to storage\n        state.createLoan(loan);\n\n        // 14. Pay the minting fees to the fee pool\n        _payFees(issueFee, currency);\n\n        // 15. If its short, convert back to sUSD, otherwise issue the loan.\n        if (short) {\n            _synthsUSD().issue(msg.sender, _exchangeRates().effectiveValue(currency, loanAmountMinusFee, sUSD));\n            _manager().incrementShorts(currency, amount);\n\n            if (shortingRewards[currency] != address(0)) {\n                IShortingRewards(shortingRewards[currency]).enrol(msg.sender, amount);\n            }\n        } else {\n            _synth(synthsByKey[currency]).issue(msg.sender, loanAmountMinusFee);\n            _manager().incrementLongs(currency, amount);\n        }\n\n        // 16. Emit event\n        emit LoanCreated(msg.sender, id, amount, collateral, currency, issueFee);\n    }\n\n    function closeInternal(address borrower, uint id) internal returns (uint collateral) {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        // 1. Make sure the collateral rate is valid\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. Get the loan.\n        Loan memory loan = state.getLoan(borrower, id);\n\n        // 3. Check loan is open and the last interaction time.\n        _checkLoanAvailable(loan);\n\n        // 4. Accrue interest on the loan.\n        loan = accrueInterest(loan);\n\n        // 5. Work out the total amount owing on the loan.\n        uint total = loan.amount.add(loan.accruedInterest);\n\n        // 6. Check they have enough balance to close the loan.\n        _checkSynthBalance(loan.account, loan.currency, total);\n\n        // 7. Burn the synths\n        require(\n            !_exchanger().hasWaitingPeriodOrSettlementOwing(borrower, loan.currency),\n            \"Waiting secs or settlement owing\"\n        );\n        _synth(synthsByKey[loan.currency]).burn(borrower, total);\n\n        // 8. Tell the manager.\n        if (loan.short) {\n            _manager().decrementShorts(loan.currency, loan.amount);\n\n            if (shortingRewards[loan.currency] != address(0)) {\n                IShortingRewards(shortingRewards[loan.currency]).withdraw(borrower, loan.amount);\n            }\n        } else {\n            _manager().decrementLongs(loan.currency, loan.amount);\n        }\n\n        // 9. Assign the collateral to be returned.\n        collateral = loan.collateral;\n\n        // 10. Pay fees\n        _payFees(loan.accruedInterest, loan.currency);\n\n        // 11. Record loan as closed\n        loan.amount = 0;\n        loan.collateral = 0;\n        loan.accruedInterest = 0;\n        loan.interestIndex = 0;\n        loan.lastInteraction = block.timestamp;\n        state.updateLoan(loan);\n\n        // 12. Emit the event\n        emit LoanClosed(borrower, id);\n    }\n\n    function closeByLiquidationInternal(\n        address borrower,\n        address liquidator,\n        Loan memory loan\n    ) internal returns (uint collateral) {\n        // 1. Work out the total amount owing on the loan.\n        uint total = loan.amount.add(loan.accruedInterest);\n\n        // 2. Store this for the event.\n        uint amount = loan.amount;\n\n        // 3. Return collateral to the child class so it knows how much to transfer.\n        collateral = loan.collateral;\n\n        // 4. Burn the synths\n        require(!_exchanger().hasWaitingPeriodOrSettlementOwing(liquidator, loan.currency), \"Waiting or settlement owing\");\n        _synth(synthsByKey[loan.currency]).burn(liquidator, total);\n\n        // 5. Tell the manager.\n        if (loan.short) {\n            _manager().decrementShorts(loan.currency, loan.amount);\n\n            if (shortingRewards[loan.currency] != address(0)) {\n                IShortingRewards(shortingRewards[loan.currency]).withdraw(borrower, loan.amount);\n            }\n        } else {\n            _manager().decrementLongs(loan.currency, loan.amount);\n        }\n\n        // 6. Pay fees\n        _payFees(loan.accruedInterest, loan.currency);\n\n        // 7. Record loan as closed\n        loan.amount = 0;\n        loan.collateral = 0;\n        loan.accruedInterest = 0;\n        loan.interestIndex = 0;\n        loan.lastInteraction = block.timestamp;\n        state.updateLoan(loan);\n\n        // 8. Emit the event.\n        emit LoanClosedByLiquidation(borrower, loan.id, liquidator, amount, collateral);\n    }\n\n    function depositInternal(\n        address account,\n        uint id,\n        uint amount\n    ) internal {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        // 1. Make sure the collateral rate is valid.\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. They sent some value > 0\n        require(amount > 0, \"Deposit must be greater than 0\");\n\n        // 3. Get the loan\n        Loan memory loan = state.getLoan(account, id);\n\n        // 4. Check loan is open and last interaction time.\n        _checkLoanAvailable(loan);\n\n        // 5. Accrue interest\n        loan = accrueInterest(loan);\n\n        // 6. Add the collateral\n        loan.collateral = loan.collateral.add(amount);\n\n        // 7. Update the last interaction time.\n        loan.lastInteraction = block.timestamp;\n\n        // 8. Store the loan\n        state.updateLoan(loan);\n\n        // 9. Emit the event\n        emit CollateralDeposited(account, id, amount, loan.collateral);\n    }\n\n    function withdrawInternal(uint id, uint amount) internal returns (uint withdraw) {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        // 1. Make sure the collateral rate is valid.\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. Get the loan.\n        Loan memory loan = state.getLoan(msg.sender, id);\n\n        // 3. Check loan is open and last interaction time.\n        _checkLoanAvailable(loan);\n\n        // 4. Accrue interest.\n        loan = accrueInterest(loan);\n\n        // 5. Subtract the collateral.\n        loan.collateral = loan.collateral.sub(amount);\n\n        // 6. Update the last interaction time.\n        loan.lastInteraction = block.timestamp;\n\n        // 7. Check that the new amount does not put them under the minimum c ratio.\n        require(collateralRatio(loan) > minCratio, \"Cratio too low\");\n\n        // 8. Store the loan.\n        state.updateLoan(loan);\n\n        // 9. Assign the return variable.\n        withdraw = amount;\n\n        // 10. Emit the event.\n        emit CollateralWithdrawn(msg.sender, id, amount, loan.collateral);\n    }\n\n    function liquidateInternal(\n        address borrower,\n        uint id,\n        uint payment\n    ) internal returns (uint collateralLiquidated) {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        // 1. Make sure the collateral rate is valid.\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. Check the payment amount.\n        require(payment > 0, \"Payment must be greater than 0\");\n\n        // 3. Get the loan.\n        Loan memory loan = state.getLoan(borrower, id);\n\n        // 4. Check loan is open and last interaction time.\n        _checkLoanAvailable(loan);\n\n        // 5. Accrue interest.\n        loan = accrueInterest(loan);\n\n        // 6. Check they have enough balance to make the payment.\n        _checkSynthBalance(msg.sender, loan.currency, payment);\n\n        // 7. Check they are eligible for liquidation.\n        require(collateralRatio(loan) < minCratio, \"Cratio above liquidation ratio\");\n\n        // 8. Determine how much needs to be liquidated to fix their c ratio.\n        uint liqAmount = liquidationAmount(loan);\n\n        // 9. Only allow them to liquidate enough to fix the c ratio.\n        uint amountToLiquidate = liqAmount < payment ? liqAmount : payment;\n\n        // 10. Work out the total amount owing on the loan.\n        uint amountOwing = loan.amount.add(loan.accruedInterest);\n\n        // 11. If its greater than the amount owing, we need to close the loan.\n        if (amountToLiquidate >= amountOwing) {\n            return closeByLiquidationInternal(borrower, msg.sender, loan);\n        }\n\n        // 12. Process the payment to workout interest/principal split.\n        loan = _processPayment(loan, amountToLiquidate);\n\n        // 13. Work out how much collateral to redeem.\n        collateralLiquidated = collateralRedeemed(loan.currency, amountToLiquidate);\n        loan.collateral = loan.collateral.sub(collateralLiquidated);\n\n        // 14. Update the last interaction time.\n        loan.lastInteraction = block.timestamp;\n\n        // 15. Burn the synths from the liquidator.\n        require(!_exchanger().hasWaitingPeriodOrSettlementOwing(msg.sender, loan.currency), \"Waiting or settlement owing\");\n        _synth(synthsByKey[loan.currency]).burn(msg.sender, amountToLiquidate);\n\n        // 16. Store the loan.\n        state.updateLoan(loan);\n\n        // 17. Emit the event\n        emit LoanPartiallyLiquidated(borrower, id, msg.sender, amountToLiquidate, collateralLiquidated);\n    }\n\n    function repayInternal(\n        address borrower,\n        address repayer,\n        uint id,\n        uint payment\n    ) internal {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        // 1. Make sure the collateral rate is valid.\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. Check the payment amount.\n        require(payment > 0, \"Payment must be greater than 0\");\n\n        // 3. Get loan\n        Loan memory loan = state.getLoan(borrower, id);\n\n        // 4. Check loan is open and last interaction time.\n        _checkLoanAvailable(loan);\n\n        // 5. Accrue interest.\n        loan = accrueInterest(loan);\n\n        // 6. Check the spender has enough synths to make the repayment\n        _checkSynthBalance(repayer, loan.currency, payment);\n\n        // 7. Process the payment.\n        loan = _processPayment(loan, payment);\n\n        // 8. Update the last interaction time.\n        loan.lastInteraction = block.timestamp;\n\n        // 9. Burn synths from the payer\n        require(!_exchanger().hasWaitingPeriodOrSettlementOwing(repayer, loan.currency), \"Waiting or settlement owing\");\n        _synth(synthsByKey[loan.currency]).burn(repayer, payment);\n\n        // 10. Store the loan\n        state.updateLoan(loan);\n\n        // 11. Emit the event.\n        emit LoanRepaymentMade(borrower, repayer, id, payment, loan.amount);\n    }\n\n    function drawInternal(uint id, uint amount) internal {\n        // 0. Check the system is active.\n        _systemStatus().requireIssuanceActive();\n\n        // 1. Make sure the collateral rate is valid.\n        require(!_exchangeRates().rateIsInvalid(collateralKey), \"Collateral rate is invalid\");\n\n        // 2. Get loan.\n        Loan memory loan = state.getLoan(msg.sender, id);\n\n        // 3. Check loan is open and last interaction time.\n        _checkLoanAvailable(loan);\n\n        // 4. Accrue interest.\n        loan = accrueInterest(loan);\n\n        // 5. Add the requested amount.\n        loan.amount = loan.amount.add(amount);\n\n        // 6. If it is below the minimum, don't allow this draw.\n        require(collateralRatio(loan) > minCratio, \"Cannot draw this much\");\n\n        // 7. This fee is denominated in the currency of the loan\n        uint issueFee = amount.multiplyDecimalRound(issueFeeRate);\n\n        // 8. Calculate the minting fee and subtract it from the draw amount\n        uint amountMinusFee = amount.sub(issueFee);\n\n        // 9. If its short, let the child handle it, otherwise issue the synths.\n        if (loan.short) {\n            _manager().incrementShorts(loan.currency, amount);\n            _synthsUSD().issue(msg.sender, _exchangeRates().effectiveValue(loan.currency, amountMinusFee, sUSD));\n\n            if (shortingRewards[loan.currency] != address(0)) {\n                IShortingRewards(shortingRewards[loan.currency]).enrol(msg.sender, amount);\n            }\n        } else {\n            _manager().incrementLongs(loan.currency, amount);\n            _synth(synthsByKey[loan.currency]).issue(msg.sender, amountMinusFee);\n        }\n\n        // 10. Pay the minting fees to the fee pool\n        _payFees(issueFee, loan.currency);\n\n        // 11. Update the last interaction time.\n        loan.lastInteraction = block.timestamp;\n\n        // 12. Store the loan\n        state.updateLoan(loan);\n\n        // 13. Emit the event.\n        emit LoanDrawnDown(msg.sender, id, amount);\n    }\n\n    // Update the cumulative interest rate for the currency that was interacted with.\n    function accrueInterest(Loan memory loan) internal returns (Loan memory loanAfter) {\n        loanAfter = loan;\n\n        // 1. Get the rates we need.\n        (uint entryRate, uint lastRate, uint lastUpdated, uint newIndex) = loan.short\n            ? _manager().getShortRatesAndTime(loan.currency, loan.interestIndex)\n            : _manager().getRatesAndTime(loan.interestIndex);\n\n        // 2. Get the instantaneous rate.\n        (uint rate, bool invalid) = loan.short\n            ? _manager().getShortRate(synthsByKey[loan.currency])\n            : _manager().getBorrowRate();\n\n        require(!invalid, \"Rates are invalid\");\n\n        // 3. Get the time since we last updated the rate.\n        uint timeDelta = block.timestamp.sub(lastUpdated).mul(SafeDecimalMath.unit());\n\n        // 4. Get the latest cumulative rate. F_n+1 = F_n + F_last\n        uint latestCumulative = lastRate.add(rate.multiplyDecimal(timeDelta));\n\n        // 5. If the loan was just opened, don't record any interest. Otherwise multiple by the amount outstanding.\n        uint interest = loan.interestIndex == 0 ? 0 : loan.amount.multiplyDecimal(latestCumulative.sub(entryRate));\n\n        // 7. Update rates with the lastest cumulative rate. This also updates the time.\n        loan.short\n            ? _manager().updateShortRates(loan.currency, latestCumulative)\n            : _manager().updateBorrowRates(latestCumulative);\n\n        // 8. Update loan\n        loanAfter.accruedInterest = loan.accruedInterest.add(interest);\n        loanAfter.interestIndex = newIndex;\n        state.updateLoan(loanAfter);\n    }\n\n    // Works out the amount of interest and principal after a repayment is made.\n    function _processPayment(Loan memory loanBefore, uint payment) internal returns (Loan memory loanAfter) {\n        loanAfter = loanBefore;\n\n        if (payment > 0 && loanBefore.accruedInterest > 0) {\n            uint interestPaid = payment > loanBefore.accruedInterest ? loanBefore.accruedInterest : payment;\n            loanAfter.accruedInterest = loanBefore.accruedInterest.sub(interestPaid);\n            payment = payment.sub(interestPaid);\n\n            _payFees(interestPaid, loanBefore.currency);\n        }\n\n        // If there is more payment left after the interest, pay down the principal.\n        if (payment > 0) {\n            loanAfter.amount = loanBefore.amount.sub(payment);\n\n            // And get the manager to reduce the total long/short balance.\n            if (loanAfter.short) {\n                _manager().decrementShorts(loanAfter.currency, payment);\n\n                if (shortingRewards[loanAfter.currency] != address(0)) {\n                    IShortingRewards(shortingRewards[loanAfter.currency]).withdraw(loanAfter.account, payment);\n                }\n            } else {\n                _manager().decrementLongs(loanAfter.currency, payment);\n            }\n        }\n    }\n\n    // Take an amount of fees in a certain synth and convert it to sUSD before paying the fee pool.\n    function _payFees(uint amount, bytes32 synth) internal {\n        if (amount > 0) {\n            if (synth != sUSD) {\n                amount = _exchangeRates().effectiveValue(synth, amount, sUSD);\n            }\n            _synthsUSD().issue(_feePool().FEE_ADDRESS(), amount);\n            _feePool().recordFeePaid(amount);\n        }\n    }\n\n    // ========== EVENTS ==========\n    // Setters\n    event MinCratioRatioUpdated(uint minCratio);\n    event MinCollateralUpdated(uint minCollateral);\n    event IssueFeeRateUpdated(uint issueFeeRate);\n    event MaxLoansPerAccountUpdated(uint maxLoansPerAccount);\n    event InteractionDelayUpdated(uint interactionDelay);\n    event ManagerUpdated(address manager);\n    event CanOpenLoansUpdated(bool canOpenLoans);\n\n    // Loans\n    event LoanCreated(address indexed account, uint id, uint amount, uint collateral, bytes32 currency, uint issuanceFee);\n    event LoanClosed(address indexed account, uint id);\n    event CollateralDeposited(address indexed account, uint id, uint amountDeposited, uint collateralAfter);\n    event CollateralWithdrawn(address indexed account, uint id, uint amountWithdrawn, uint collateralAfter);\n    event LoanRepaymentMade(address indexed account, address indexed repayer, uint id, uint amountRepaid, uint amountAfter);\n    event LoanDrawnDown(address indexed account, uint id, uint amount);\n    event LoanPartiallyLiquidated(\n        address indexed account,\n        uint id,\n        address liquidator,\n        uint amountLiquidated,\n        uint collateralLiquidated\n    );\n    event LoanClosedByLiquidation(\n        address indexed account,\n        uint id,\n        address indexed liquidator,\n        uint amountLiquidated,\n        uint collateralLiquidated\n    );\n}\n\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\n * available, which can be aplied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n */\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n}\n\n\ninterface ICollateralEth {\n    function open(uint amount, bytes32 currency) external payable;\n\n    function close(uint id) external;\n\n    function deposit(address borrower, uint id) external payable;\n\n    function withdraw(uint id, uint amount) external;\n\n    function repay(\n        address borrower,\n        uint id,\n        uint amount\n    ) external;\n\n    function liquidate(\n        address borrower,\n        uint id,\n        uint amount\n    ) external;\n\n    function claim(uint amount) external;\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// This contract handles the payable aspects of eth loans.\ncontract CollateralEth is Collateral, ICollateralEth, ReentrancyGuard {\n    mapping(address => uint) public pendingWithdrawals;\n\n    constructor(\n        CollateralState _state,\n        address _owner,\n        address _manager,\n        address _resolver,\n        bytes32 _collateralKey,\n        uint _minCratio,\n        uint _minCollateral\n    ) public Collateral(_state, _owner, _manager, _resolver, _collateralKey, _minCratio, _minCollateral) {}\n\n    function open(uint amount, bytes32 currency) external payable {\n        openInternal(msg.value, amount, currency, false);\n    }\n\n    function close(uint id) external {\n        uint collateral = closeInternal(msg.sender, id);\n\n        pendingWithdrawals[msg.sender] = pendingWithdrawals[msg.sender].add(collateral);\n    }\n\n    function deposit(address borrower, uint id) external payable {\n        depositInternal(borrower, id, msg.value);\n    }\n\n    function withdraw(uint id, uint withdrawAmount) external {\n        uint amount = withdrawInternal(id, withdrawAmount);\n\n        pendingWithdrawals[msg.sender] = pendingWithdrawals[msg.sender].add(amount);\n    }\n\n    function repay(\n        address account,\n        uint id,\n        uint amount\n    ) external {\n        repayInternal(account, msg.sender, id, amount);\n    }\n\n    function draw(uint id, uint amount) external {\n        drawInternal(id, amount);\n    }\n\n    function liquidate(\n        address borrower,\n        uint id,\n        uint amount\n    ) external {\n        uint collateralLiquidated = liquidateInternal(borrower, id, amount);\n\n        pendingWithdrawals[msg.sender] = pendingWithdrawals[msg.sender].add(collateralLiquidated);\n    }\n\n    function claim(uint amount) external nonReentrant {\n        // If they try to withdraw more than their total balance, it will fail on the safe sub.\n        pendingWithdrawals[msg.sender] = pendingWithdrawals[msg.sender].sub(amount);\n\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success, \"Transfer failed\");\n    }\n}\n\n    ", "ABI": "[{\"inputs\":[{\"internalType\":\"contract CollateralState\",\"name\":\"_state\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_collateralKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_minCratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canOpenLoans\",\"type\":\"bool\"}],\"name\":\"CanOpenLoansUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAfter\",\"type\":\"uint256\"}],\"name\":\"CollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAfter\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interactionDelay\",\"type\":\"uint256\"}],\"name\":\"InteractionDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issueFeeRate\",\"type\":\"uint256\"}],\"name\":\"IssueFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LoanClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLiquidated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralLiquidated\",\"type\":\"uint256\"}],\"name\":\"LoanClosedByLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuanceFee\",\"type\":\"uint256\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoanDrawnDown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLiquidated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralLiquidated\",\"type\":\"uint256\"}],\"name\":\"LoanPartiallyLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAfter\",\"type\":\"uint256\"}],\"name\":\"LoanRepaymentMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLoansPerAccount\",\"type\":\"uint256\"}],\"name\":\"MaxLoansPerAccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minCollateral\",\"type\":\"uint256\"}],\"name\":\"MinCollateralUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minCratio\",\"type\":\"uint256\"}],\"name\":\"MinCratioRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardsContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"synth\",\"type\":\"bytes32\"}],\"name\":\"addRewardsContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_synthNamesInResolver\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_synthKeys\",\"type\":\"bytes32[]\"}],\"name\":\"addSynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_synthNamesInResolver\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_synthKeys\",\"type\":\"bytes32[]\"}],\"name\":\"areSynthsAndCurrenciesSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canOpenLoans\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"short\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accruedInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteraction\",\"type\":\"uint256\"}],\"internalType\":\"struct ICollateralLoan.Loan\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"collateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cratio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collateralRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interactionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issueFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"short\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accruedInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteraction\",\"type\":\"uint256\"}],\"internalType\":\"struct ICollateralLoan.Loan\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"liquidationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"maxLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLoansPerAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"open\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebuildCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolverAddressesRequired\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"addresses\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canOpenLoans\",\"type\":\"bool\"}],\"name\":\"setCanOpenLoans\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interactionDelay\",\"type\":\"uint256\"}],\"name\":\"setInteractionDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issueFeeRate\",\"type\":\"uint256\"}],\"name\":\"setIssueFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCratio\",\"type\":\"uint256\"}],\"name\":\"setMinCratio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"shortingRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"contract CollateralState\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"synths\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"synthsByKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CollateralEth", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000be5b5a7c198bc156474ed5c33cbf2f3f604f8ff8000000000000000000000000de910777c787903f78c89e7a0bf7f4c435cbb1fe000000000000000000000000067e398605e84f2d0aeec1806e62768c5110dcc60000000000000000000000004e3b31eb0e5cb73641ee1e65e7dcefe520ba3ef27345544800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120a871cc00200000000000000000000000000000000000000000000000000001bc16d674ec80000", "EVMVersion": "Default", "Library": "SafeDecimalMath:84d626b2bb4d0f064067e4bf80fce7055d8f3e7b", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}, {"Rank": 2680, "Address": "0x70fce97d671e81080ca3ab4cc7a59aac2e117137", "NameTag": "", "Balance": 3046.627823, "Percentage": 0.0025869, "TxCount": 63, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2744, "Address": "0xb3328e022586b768fa50914ee6509391c27ad636", "NameTag": "", "Balance": 3000.0, "Percentage": 0.00254731, "TxCount": 0, "SourceCode": "pragma solidity 0.5.15;\r\n\r\ncontract Lock {\r\n    // address owner; slot #0\r\n    // address unlockTime; slot #1\r\n    constructor (address owner, uint256 unlockTime) public payable {\r\n        assembly {\r\n            sstore(0x00, owner)\r\n            sstore(0x01, unlockTime)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev        Withdraw function once timestamp has passed unlock time\r\n    */\r\n    function () external payable {\r\n        assembly {\r\n            switch gt(timestamp, sload(0x01))\r\n            case 0 { revert(0, 0) }\r\n            case 1 {\r\n                switch call(gas, sload(0x00), balance(address), 0, 0, 0, 0)\r\n                case 0 { revert(0, 0) }\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Lock", "CompilerVersion": "v0.5.15+commit.6a57276f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007f0d238412e75e45cb69b3cacd4b59f220da2442000000000000000000000000000000000000000000000000000000005ef2fda6", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://13876a131fb612745be13765f49451cc6f0f1d0f7b13e21ac2cf9c7d3aeca189"}, {"Rank": 2745, "Address": "0x438ca770d0f79085fe7f21ba9e40a83e4feff77a", "NameTag": "", "Balance": 3000.0, "Percentage": 0.00254731, "TxCount": 0, "SourceCode": "pragma solidity 0.5.15;\r\n\r\ncontract Lock {\r\n    // address owner; slot #0\r\n    // address unlockTime; slot #1\r\n    constructor (address owner, uint256 unlockTime) public payable {\r\n        assembly {\r\n            sstore(0x00, owner)\r\n            sstore(0x01, unlockTime)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev        Withdraw function once timestamp has passed unlock time\r\n    */\r\n    function () external payable {\r\n        assembly {\r\n            switch gt(timestamp, sload(0x01))\r\n            case 0 { revert(0, 0) }\r\n            case 1 {\r\n                switch call(gas, sload(0x00), balance(address), 0, 0, 0, 0)\r\n                case 0 { revert(0, 0) }\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Lock", "CompilerVersion": "v0.5.15+commit.6a57276f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007f0d238412e75e45cb69b3cacd4b59f220da2442000000000000000000000000000000000000000000000000000000005ef2fda6", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://13876a131fb612745be13765f49451cc6f0f1d0f7b13e21ac2cf9c7d3aeca189"}, {"Rank": 2841, "Address": "0xe851048c101abbdac26615c44dcec4c051864125", "NameTag": "", "Balance": 2859.77402637, "Percentage": 0.00242824, "TxCount": 99, "SourceCode": "pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface BurnableToken {\r\n    function burnAndRetrieve(uint256 _tokensToBurn) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ncontract NectarTreasury is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    address necAddress;\r\n\r\n    constructor(address _token) public {\r\n        necAddress = _token;\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function necToken() public view returns (BurnableToken) {\r\n        return BurnableToken(necAddress);\r\n    }\r\n\r\n    function calculateEthPerNec(uint256 necAmount) public view returns (uint256) {\r\n        return treasurySize().mul(necAmount).div(necToken().totalSupply());\r\n    }\r\n\r\n    function treasurySize() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function burnTokensAndClaimeShareOfTreasury(uint256 necAmount) external {\r\n        require(\r\n            necToken().transferFrom(msg.sender, address(this), necAmount),\r\n            \"NEC transferFrom failed\"\r\n        );\r\n        uint ethToSend = calculateEthPerNec(necAmount);\r\n        require(ethToSend > 0, \"No ether to pay out\");\r\n        necToken().burnAndRetrieve(necAmount);\r\n        msg.sender.transfer(ethToSend);\r\n    }\r\n\r\n    function transferTreasuryFundsToDAO(uint256 ethAmount) onlyOwner public {\r\n        payable(owner()).transfer(ethAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"necAmount\",\"type\":\"uint256\"}],\"name\":\"burnTokensAndClaimeShareOfTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"necAmount\",\"type\":\"uint256\"}],\"name\":\"calculateEthPerNec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"necToken\",\"outputs\":[{\"internalType\":\"contract BurnableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"transferTreasuryFundsToDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasurySize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NectarTreasury", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cc80c051057b774cd75067dc48f8987c4eb97a5e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://44080131051ffb5431f5b9a9f4dab8821d2d8bcea73d7d7cd35fc0ee3de43cf3"}, {"Rank": 2900, "Address": "0x24d1adb297f2cb3e8bf487ac27cc5aea5ce88d0b", "NameTag": "", "Balance": 2761.9454939, "Percentage": 0.00234517, "TxCount": 5, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2924, "Address": "0xde21f729137c5af1b01d73af1dc21effa2b8a0d6", "NameTag": "Gitcoin: MultiSig", "Balance": 2712.02341522, "Percentage": 0.00230279, "TxCount": 129, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 2926, "Address": "0x55f4fd6c9062a9cd0110ead0b38b6080ee33c7fc", "NameTag": "", "Balance": 2709.39951329, "Percentage": 0.00230056, "TxCount": 5, "SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2020-12-10\r\n*/\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/shared/interfaces/IFunding.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title Grants Spec Abstract Contract.\r\n * @dev Grant request, funding, and management.\r\n * @author @NoahMarconi\r\n */\r\ninterface IFunding {\r\n\r\n    /*----------  Events  ----------*/\r\n\r\n    /**\r\n     * @dev Funding target reached event.\r\n     */\r\n    event LogFundingComplete();\r\n\r\n    /**\r\n     * @dev Grant received funding.\r\n     * @param donor Address funding the grant.\r\n     * @param value Amount in WEI or ATOMIC_UNITS funded.\r\n     */\r\n    event LogFunding(address indexed donor, uint256 value);\r\n\r\n\r\n    /*----------  Shared Getters  ----------*/\r\n\r\n    /**\r\n     * @dev Cumulative funding donated by donors.\r\n     */\r\n    function getTotalFunding()\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n\r\n}\r\n\r\n// File: contracts/shared/storage/Funding.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title Total Funding.\r\n * @dev Handles state for tracking contract total amount funded.\r\n * @author @NoahMarconi @ameensol @JFickel @ArnaudBrousseau\r\n */\r\nabstract contract Funding is IFunding {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    /*----------  Globals  ----------*/\r\n\r\n    /* solhint-disable max-line-length */\r\n    uint256 private totalFunding;                 // Cumulative funding donated by donors.\r\n    /* solhint-enable max-line-length */\r\n\r\n\r\n    /*----------  Shared Getters  ----------*/\r\n\r\n    /**\r\n     * @dev Cumulative funding donated by donors.\r\n     */\r\n    function getTotalFunding()\r\n        public\r\n        override\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return totalFunding;\r\n    }\r\n\r\n\r\n    /*----------  Shared Setters  ----------*/\r\n\r\n    /**\r\n     * @dev Increase cumulative funding donated by donors.\r\n     * @param value amount to increase total funding by.\r\n     */\r\n    function increaseTotalFundingBy(uint256 value)\r\n        internal\r\n    {\r\n        totalFunding = totalFunding.add(value);\r\n    }\r\n\r\n    function setTotalFunding(uint256 value)\r\n        internal\r\n    {\r\n        totalFunding = value;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/EtherVesting.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title EtherVesting\r\n * @dev An ether holder contract that can release its ether balance gradually like a\r\n * typical vesting scheme, with a vesting period. Optionally revocable by the\r\n * owner.\r\n * NOTE: anyone can send ETH to the contract but only the owner or the beneficiary can receive ETH from this contract.\r\n */\r\ncontract EtherVesting is Ownable, ReentrancyGuard, Funding {\r\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\r\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\r\n    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with\r\n    // a duration of four years, are safe to use.\r\n    // solhint-disable not-rely-on-time\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event LogReleased(uint256 amount);\r\n    event LogRevoked(bool releaseSuccessful);\r\n\r\n    // beneficiary of Ether after they are released\r\n    address private _beneficiary;\r\n\r\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\r\n    uint256 private _start;\r\n    uint256 private _duration;\r\n\r\n    bool private _revocable;\r\n\r\n    uint256 private _released;\r\n    bool private _revoked;\r\n\r\n    /**\r\n     * @dev Creates a vesting contract that vests its balance of Ether to the\r\n     * beneficiary, gradually in a linear fashion until start + duration. By then all\r\n     * of the balance will have vested.\r\n     * @param beneficiary address of the beneficiary to whom vested ether is transferred\r\n     * @param start the time (as Unix time) at which point vesting starts\r\n     * @param duration duration in seconds of the period in which the ether will vest\r\n     * @param revocable whether the vesting is revocable or not\r\n     */\r\n    constructor (address beneficiary, uint256 start, uint256 duration, bool revocable) {\r\n        require(beneficiary != address(0), \"EtherVesting: beneficiary is the zero address\");\r\n        // solhint-disable-next-line max-line-length\r\n        require(duration > 0, \"EtherVesting: duration is 0\");\r\n        // solhint-disable-next-line max-line-length\r\n        require(start.add(duration) > block.timestamp, \"EtherVesting: final time is before current time\");\r\n\r\n        _beneficiary = beneficiary;\r\n        _revocable = revocable;\r\n        _duration = duration;\r\n        _start = start;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the ether.\r\n     */\r\n    function beneficiary() public view returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @return the start time of the ether vesting.\r\n     */\r\n    function start() public view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @return the duration of the ether vesting.\r\n     */\r\n    function duration() public view returns (uint256) {\r\n        return _duration;\r\n    }\r\n\r\n    /**\r\n     * @return true if the vesting is revocable.\r\n     */\r\n    function revocable() public view returns (bool) {\r\n        return _revocable;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of the ether released.\r\n     */\r\n    function released() public view returns (uint256) {\r\n        return _released;\r\n    }\r\n\r\n    /**\r\n     * @return true if the ether is revoked.\r\n     */\r\n    function revoked() public view returns (bool) {\r\n        return _revoked;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested ether to beneficiary.\r\n     */\r\n    function release()\r\n        external\r\n        nonReentrant\r\n    {\r\n        uint256 unreleased = _releasableAmount();\r\n\r\n        require(unreleased > 0, \"EtherVesting: no ether are due\");\r\n\r\n        _released = _released.add(unreleased);\r\n\r\n\r\n        (bool success, ) = _beneficiary.call{ value: unreleased}(\"\");\r\n        require(\r\n            success,\r\n            \"EtherVesting::Transfer Error. Unable to send unreleased to _beneficiary.\"\r\n        );\r\n\r\n        emit LogReleased(unreleased);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to revoke the vesting. Ether already vested\r\n     * remain in the contract, the rest are returned to the owner.\r\n     */\r\n    function revoke()\r\n        external\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        require(_revocable, \"EtherVesting: cannot revoke\");\r\n        require(!_revoked, \"EtherVesting: ether already revoked\");\r\n\r\n\r\n        uint256 unreleased = _releasableAmount();\r\n\r\n        (bool releaseSuccessful, ) = _beneficiary.call{ value: unreleased }(\"\");\r\n        if (releaseSuccessful) {\r\n            _released = _released.add(unreleased);\r\n            emit LogReleased(unreleased);\r\n        }\r\n\r\n        uint256 refund = address(this).balance;\r\n\r\n        _revoked = true;\r\n\r\n        if (refund > 0) {\r\n            (bool success, ) = owner().call{ value: refund}(\"\");\r\n            require(\r\n                success,\r\n                \"EtherVesting::Transfer Error. Unable to send refund to owner.\"\r\n            );\r\n        }\r\n\r\n        emit LogRevoked(releaseSuccessful);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     */\r\n    function _releasableAmount() private view returns (uint256) {\r\n        return _vestedAmount().sub(_released);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     */\r\n    function _vestedAmount() private view returns (uint256) {\r\n        if (block.timestamp <= _start) return 0;\r\n\r\n        uint256 currentBalance = address(this).balance;\r\n        uint256 totalBalance = currentBalance.add(_released);\r\n\r\n        if (block.timestamp >= _start.add(_duration) || _revoked) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Receive ether transfers\r\n     */\r\n    receive()\r\n        external\r\n        payable\r\n        nonReentrant\r\n    {\r\n\r\n        require(\r\n            msg.value > 0,\r\n            \"fallback::Invalid Value. msg.value must be greater than 0.\"\r\n        );\r\n\r\n        increaseTotalFundingBy(msg.value);\r\n\r\n        emit LogFunding(msg.sender, msg.value);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogFunding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFundingComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"releaseSuccessful\",\"type\":\"bool\"}],\"name\":\"LogRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFunding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revocable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EtherVesting", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000053e7daa8e3aa23cd30c75b2f599c303bada17064000000000000000000000000000000000000000000000000000000005fd7b75900000000000000000000000000000000000000000000000000000000058fd4000000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://feb8811617b75552a87d1a890a3767317f20d0da00b75c382171b9e91c2b1d33"}, {"Rank": 3036, "Address": "0x2517c251c8edd3e6977051e6bb86cc7876d07667", "NameTag": "", "Balance": 2580.0, "Percentage": 0.00219068, "TxCount": 0, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 3037, "Address": "0x723afe263831bcb56da4061896b7489d47781877", "NameTag": "", "Balance": 2578.00565, "Percentage": 0.00218899, "TxCount": 8, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 3041, "Address": "0x6f38ba257f202ccfba9fc22c50d958508d8232a5", "NameTag": "", "Balance": 2573.97771854, "Percentage": 0.00218557, "TxCount": 28, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 3130, "Address": "0xa1d65e8fb6e87b60feccbc582f7f97804b725521", "NameTag": "DXDao: DXD Token", "Balance": 2499.54625422, "Percentage": 0.00212237, "TxCount": 15555, "SourceCode": "// File: @openzeppelin/upgrades/contracts/upgradeability/Proxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  function () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize)\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize)\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize) }\r\n      default { return(0, returndatasize) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\r\n */\r\nlibrary OpenZeppelinUpgradesAddress {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/upgradeability/BaseUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract BaseUpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/upgradeability/UpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\r\n * implementation and init data.\r\n */\r\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) public payable {\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title BaseAdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() internal {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    super._willFallback();\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/upgradeability/AdminUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    _setAdmin(_admin);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "AdminUpgradeabilityProxy", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002825f4ddaa5809da1af2a2d240c4ac4733016cfa000000000000000000000000c8451d5e10c952f713642be0afe5242abfd79cc600000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0x845856776d110a200cf41f35c9428c938e72e604", "SwarmSource": "bzzr://aca02c590a9645043b033306c1c571cdd473cae48db0c6a1573a615cd7d7aac8"}, {"Rank": 3146, "Address": "0x6decd32f5a2ab9b43bc6ad8923eb6d2395de145b", "NameTag": "", "Balance": 2473.61068436, "Percentage": 0.00210035, "TxCount": 568, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 3265, "Address": "0x860a80d33e85e97888f1f0c75c6e5bbd60b48da9", "NameTag": "SuperRare: Treasury", "Balance": 2325.7692006, "Percentage": 0.00197482, "TxCount": 8, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 3310, "Address": "0xe61dd9ca7364225afbfb79e15ad33864424e6ae4", "NameTag": "", "Balance": 2264.78460548, "Percentage": 0.00192303, "TxCount": 3148, "SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/Container.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract Container {\r\n    struct Item {\r\n        uint256 itemType;\r\n        uint256 status;\r\n        address[] addresses;\r\n    }\r\n\r\n    uint256 MaxItemAddressNum = 255;\r\n    mapping(bytes32 => Item) private container;\r\n\r\n    function itemAddressExists(bytes32 _id, address _oneAddress) internal view returns (bool) {\r\n        for (uint256 i = 0; i < container[_id].addresses.length; i++) {\r\n            if (container[_id].addresses[i] == _oneAddress)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getItemAddresses(bytes32 _id) internal view returns (address[] memory) {\r\n        return container[_id].addresses;\r\n    }\r\n\r\n    function getItemInfo(bytes32 _id) internal view returns (uint256, uint256, uint256) {\r\n        return (container[_id].itemType, container[_id].status, container[_id].addresses.length);\r\n    }\r\n\r\n    function getItemAddressCount(bytes32 _id) internal view returns (uint256) {\r\n        return container[_id].addresses.length;\r\n    }\r\n\r\n    function setItemInfo(bytes32 _id, uint256 _itemType, uint256 _status) internal {\r\n        container[_id].itemType = _itemType;\r\n        container[_id].status = _status;\r\n    }\r\n\r\n    function addItemAddress(bytes32 _id, address _oneAddress) internal {\r\n        require(!itemAddressExists(_id, _oneAddress), \"Container:dup address added\");\r\n        require(container[_id].addresses.length < MaxItemAddressNum, \"Container:too many addresses\");\r\n        container[_id].addresses.push(_oneAddress);\r\n    }\r\n\r\n    function removeItemAddresses(bytes32 _id) internal {\r\n        delete container[_id].addresses;\r\n    }\r\n\r\n    function removeOneItemAddress(bytes32 _id, address _oneAddress) internal {\r\n        for (uint256 i = 0; i < container[_id].addresses.length; i++) {\r\n            if (container[_id].addresses[i] == _oneAddress) {\r\n                container[_id].addresses[i] = container[_id].addresses[container[_id].addresses.length - 1];\r\n                container[_id].addresses.pop();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeItem(bytes32 _id) internal {\r\n        delete container[_id];\r\n    }\r\n\r\n    function replaceItemAddress(bytes32 _id, address _oneAddress, address _anotherAddress) internal {\r\n        for (uint256 i = 0; i < container[_id].addresses.length; i++) {\r\n            if (container[_id].addresses[i] == _oneAddress) {\r\n                container[_id].addresses[i] = _anotherAddress;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/BridgeAdmin.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\ncontract BridgeAdmin is Container {\r\n    bytes32 internal constant OWNERHASH = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0;\r\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\r\n    bytes32 internal constant PAUSERHASH = 0x0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f;\r\n    bytes32 internal constant STOREHASH = 0xe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd1680;\r\n    bytes32 internal constant LOGICHASH = 0x397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f182;\r\n    uint256 internal constant MAXUSERNUM = 255;\r\n    bytes32[] private classHashArray;\r\n\r\n    uint256 internal ownerRequireNum;\r\n    uint256 internal operatorRequireNum;\r\n\r\n    event AdminChanged(string TaskType, string class, address oldAddress, address newAddress);\r\n    event AdminRequiredNumChanged(string TaskType, string class, uint256 previousNum, uint256 requiredNum);\r\n    event AdminTaskDropped(bytes32 taskHash);\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        require(ownerCount <= MaxItemAddressNum && _required <= ownerCount && _required > 0 && ownerCount > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(itemAddressExists(OWNERHASH, msg.sender), \"BridgeAdmin:only use owner to call\");\r\n        _;\r\n    }\r\n\r\n    function initAdmin(address[] memory _owners, uint _ownerRequired) internal validRequirement(_owners.length, _ownerRequired) {\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            addItemAddress(OWNERHASH, _owners[i]);\r\n        }\r\n        addItemAddress(PAUSERHASH, _owners[0]);\r\n        // we need an init pauser\r\n        addItemAddress(LOGICHASH, address(0x0));\r\n        addItemAddress(STOREHASH, address(0x1));\r\n\r\n        classHashArray.push(OWNERHASH);\r\n        classHashArray.push(OPERATORHASH);\r\n        classHashArray.push(PAUSERHASH);\r\n        classHashArray.push(STOREHASH);\r\n        classHashArray.push(LOGICHASH);\r\n        ownerRequireNum = _ownerRequired;\r\n        operatorRequireNum = 2;\r\n    }\r\n\r\n    function classHashExist(bytes32 aHash) private view returns (bool) {\r\n        for (uint256 i = 0; i < classHashArray.length; i++)\r\n            if (classHashArray[i] == aHash) return true;\r\n        return false;\r\n    }\r\n\r\n    function getAdminAddresses(string memory class) public view returns (address[] memory) {\r\n        bytes32 classHash = getClassHash(class);\r\n        return getItemAddresses(classHash);\r\n    }\r\n\r\n    function getOwnerRequireNum() public view returns (uint256) {\r\n        return ownerRequireNum;\r\n    }\r\n\r\n    function getOperatorRequireNum() public view returns (uint256) {\r\n        return operatorRequireNum;\r\n    }\r\n\r\n    function resetRequiredNum(string memory class, uint256 requiredNum) public onlyOwner returns (bool) {\r\n        bytes32 classHash = getClassHash(class);\r\n        require((classHash == OPERATORHASH) || (classHash == OWNERHASH), \"BridgeAdmin:wrong class\");\r\n\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"resetRequiredNum\", class, requiredNum));\r\n        addItemAddress(taskHash, msg.sender);\r\n\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            removeItem(taskHash);\r\n            uint256 previousNum = 0;\r\n            if (classHash == OWNERHASH) {\r\n                require(getItemAddressCount(classHash) >= requiredNum, \"BridgeAdmin:insufficiency addresses\");\r\n                previousNum = ownerRequireNum;\r\n                ownerRequireNum = requiredNum;\r\n            }\r\n            else if (classHash == OPERATORHASH) {\r\n                previousNum = operatorRequireNum;\r\n                operatorRequireNum = requiredNum;\r\n            } else {\r\n                revert(\"BridgeAdmin:wrong class\");\r\n            }\r\n            emit AdminRequiredNumChanged(\"resetRequiredNum\", class, previousNum, requiredNum);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function modifyAddress(string memory class, address oldAddress, address newAddress) internal onlyOwner returns (bool) {\r\n        bytes32 classHash = getClassHash(class);\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"modifyAddress\", class, oldAddress, newAddress));\r\n        addItemAddress(taskHash, msg.sender);\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            replaceItemAddress(classHash, oldAddress, newAddress);\r\n            emit AdminChanged(\"modifyAddress\", class, oldAddress, newAddress);\r\n            removeItem(taskHash);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getClassHash(string memory class) private view returns (bytes32) {\r\n        bytes32 classHash = keccak256(abi.encodePacked(class));\r\n        require(classHashExist(classHash), \"BridgeAdmin:invalid class\");\r\n        return classHash;\r\n    }\r\n\r\n    function dropAddress(string memory class, address oneAddress) public onlyOwner returns (bool) {\r\n        bytes32 classHash = getClassHash(class);\r\n        require(classHash != STOREHASH && classHash != LOGICHASH, \"BridgeAdmin:wrong class\");\r\n        require(itemAddressExists(classHash, oneAddress), \"BridgeAdmin:no such address exists\");\r\n\r\n        if (classHash == OWNERHASH)\r\n            require(getItemAddressCount(classHash) > ownerRequireNum, \"BridgeAdmin:insufficiency addresses\");\r\n\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"dropAddress\", class, oneAddress));\r\n        addItemAddress(taskHash, msg.sender);\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            removeOneItemAddress(classHash, oneAddress);\r\n            emit AdminChanged(\"dropAddress\", class, oneAddress, oneAddress);\r\n            removeItem(taskHash);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addAddress(string memory class, address oneAddress) public onlyOwner returns (bool) {\r\n        bytes32 classHash = getClassHash(class);\r\n        require(classHash != STOREHASH && classHash != LOGICHASH, \"BridgeAdmin:wrong class\");\r\n\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"addAddress\", class, oneAddress));\r\n        addItemAddress(taskHash, msg.sender);\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            addItemAddress(classHash, oneAddress);\r\n            emit AdminChanged(\"addAddress\", class, oneAddress, oneAddress);\r\n            removeItem(taskHash);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function dropTask(bytes32 taskHash) public onlyOwner returns (bool) {\r\n        removeItem(taskHash);\r\n        emit AdminTaskDropped(taskHash);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/BridgeStorage.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\ncontract BridgeStorage is Container {\r\n    string public constant name = \"BridgeStorage\";\r\n\r\n    address private caller;\r\n\r\n    constructor(address aCaller) {\r\n        caller = aCaller;\r\n    }\r\n\r\n    modifier onlyCaller() {\r\n        require(msg.sender == caller, \"BridgeStorage:only use main contract to call\");\r\n        _;\r\n    }\r\n\r\n    function supporterExists(bytes32 taskHash, address user) public view returns (bool) {\r\n        return itemAddressExists(taskHash, user);\r\n    }\r\n\r\n    function setTaskInfo(bytes32 taskHash, uint256 taskType, uint256 status) external onlyCaller {\r\n        setItemInfo(taskHash, taskType, status);\r\n    }\r\n\r\n    function getTaskInfo(bytes32 taskHash) public view returns (uint256, uint256, uint256) {\r\n        return getItemInfo(taskHash);\r\n    }\r\n\r\n    function addSupporter(bytes32 taskHash, address oneAddress) external onlyCaller {\r\n        addItemAddress(taskHash, oneAddress);\r\n    }\r\n\r\n    function removeAllSupporter(bytes32 taskHash) external onlyCaller {\r\n        removeItemAddresses(taskHash);\r\n    }\r\n\r\n    function removeTask(bytes32 taskHash) external onlyCaller {\r\n        removeItem(taskHash);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/BridgeLogic.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\ncontract BridgeLogic {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"BridgeLogic\";\r\n\r\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\r\n    uint256 public constant TASKINIT = 0;\r\n    uint256 public constant TASKPROCESSING = 1;\r\n    uint256 public constant TASKCANCELLED = 2;\r\n    uint256 public constant TASKDONE = 3;\r\n    uint256 public constant WITHDRAWTASK = 1;\r\n\r\n    address private caller;\r\n    BridgeStorage private store;\r\n\r\n    constructor(address aCaller) {\r\n        caller = aCaller;\r\n    }\r\n\r\n    modifier onlyCaller() {\r\n        require(msg.sender == caller, \"BridgeLogic:only use main contract to call\");\r\n        _;\r\n    }\r\n\r\n    modifier operatorExists(address operator) {\r\n        require(store.supporterExists(OPERATORHASH, operator), \"BridgeLogic:wrong operator\");\r\n        _;\r\n    }\r\n\r\n    function resetStoreLogic(address storeAddress) external onlyCaller {\r\n        store = BridgeStorage(storeAddress);\r\n    }\r\n\r\n    function getStoreAddress() public view returns (address) {\r\n        return address(store);\r\n    }\r\n\r\n    function supportTask(uint256 taskType, bytes32 taskHash, address oneAddress, uint256 requireNum) external onlyCaller returns (uint256) {\r\n        require(!store.supporterExists(taskHash, oneAddress), \"BridgeLogic:supporter already exists\");\r\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\r\n        require(theTaskStatus < TASKDONE, \"BridgeLogic:wrong status\");\r\n\r\n        if (theTaskStatus != TASKINIT)\r\n            require(theTaskType == taskType, \"BridgeLogic:task type not match\");\r\n        store.addSupporter(taskHash, oneAddress);\r\n        theSupporterNum++;\r\n        if (theSupporterNum >= requireNum)\r\n            theTaskStatus = TASKDONE;\r\n        else\r\n            theTaskStatus = TASKPROCESSING;\r\n        store.setTaskInfo(taskHash, taskType, theTaskStatus);\r\n        return theTaskStatus;\r\n    }\r\n\r\n    function cancelTask(bytes32 taskHash) external onlyCaller returns (uint256) {\r\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\r\n        require(theTaskStatus == TASKPROCESSING, \"BridgeLogic:wrong status\");\r\n        if (theSupporterNum > 0) store.removeAllSupporter(taskHash);\r\n        theTaskStatus = TASKCANCELLED;\r\n        store.setTaskInfo(taskHash, theTaskType, theTaskStatus);\r\n        return theTaskStatus;\r\n    }\r\n\r\n    function removeTask(bytes32 taskHash) external onlyCaller {\r\n        store.removeTask(taskHash);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Bridge.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n\r\ncontract Bridge is BridgeAdmin, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Bridge\";\r\n\r\n    BridgeLogic private logic;\r\n    uint256 public swapFee;\r\n    address public feeTo;\r\n\r\n    struct assetSelector {\r\n        string selector;\r\n        bool isValueFirst;\r\n    }\r\n\r\n    mapping(address => assetSelector)  public depositSelector;\r\n    mapping(address => assetSelector) public withdrawSelector;\r\n    mapping(bytes32 => bool) public filledTx;\r\n\r\n    event FeeToTransferred(address indexed previousFeeTo, address indexed newFeeTo);\r\n    event SwapFeeChanged(uint256 indexed previousSwapFee, uint256 indexed newSwapFee);\r\n    event DepositNative(address indexed from, uint256 value, string targetAddress, string chain, uint256 feeValue);\r\n    event DepositToken(address indexed from, uint256 value, address indexed token, string targetAddress, string chain, uint256 feeValue);\r\n    event WithdrawingNative(address indexed to, uint256 value, string proof);\r\n    event WithdrawingToken(address indexed to, address indexed token, uint256 value, string proof);\r\n    event WithdrawDoneNative(address indexed to, uint256 value, string proof);\r\n    event WithdrawDoneToken(address indexed to, address indexed token, uint256 value, string proof);\r\n\r\n    modifier onlyOperator() {\r\n        require(itemAddressExists(OPERATORHASH, msg.sender), \"Bridge:wrong operator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(itemAddressExists(PAUSERHASH, msg.sender), \"Bridge:wrong pauser\");\r\n        _;\r\n    }\r\n\r\n    modifier positiveValue(uint _value) {\r\n        require(_value > 0, \"Bridge:value need > 0\");\r\n        _;\r\n    }\r\n\r\n    constructor(address[] memory _owners, uint _ownerRequired) {\r\n        initAdmin(_owners, _ownerRequired);\r\n    }\r\n\r\n    function depositNative(string memory _targetAddress, string memory chain) public payable {\r\n        require(msg.value >= swapFee, \"Bridge:insufficient swap fee\");\r\n        if (swapFee != 0) {\r\n            payable(feeTo).transfer(swapFee);\r\n        }\r\n        emit DepositNative(msg.sender, msg.value - swapFee, _targetAddress, chain, swapFee);\r\n    }\r\n\r\n    function depositToken(address _token, uint value, string memory _targetAddress, string memory chain) public payable returns (bool) {\r\n        require(msg.value == swapFee, \"Bridge:swap fee not equal\");\r\n        if (swapFee != 0) {\r\n            payable(feeTo).transfer(swapFee);\r\n        }\r\n\r\n        bool res = depositTokenLogic(_token, msg.sender, value);\r\n        emit DepositToken(msg.sender, value, _token, _targetAddress, chain, swapFee);\r\n        return res;\r\n    }\r\n\r\n    function withdrawNative(address payable to, uint value, string memory proof, bytes32 taskHash) public\r\n    onlyOperator\r\n    whenNotPaused\r\n    positiveValue(value)\r\n    returns (bool)\r\n    {\r\n        require(address(this).balance >= value, \"Bridge:not enough native token\");\r\n        require(taskHash == keccak256((abi.encodePacked(to, value, proof))), \"Bridge:taskHash is wrong\");\r\n        require(!filledTx[taskHash], \"Bridge:tx filled already\");\r\n        uint256 status = logic.supportTask(logic.WITHDRAWTASK(), taskHash, msg.sender, operatorRequireNum);\r\n\r\n        if (status == logic.TASKPROCESSING()) {\r\n            emit WithdrawingNative(to, value, proof);\r\n        } else if (status == logic.TASKDONE()) {\r\n            emit WithdrawingNative(to, value, proof);\r\n            emit WithdrawDoneNative(to, value, proof);\r\n            to.transfer(value);\r\n            filledTx[taskHash] = true;\r\n            logic.removeTask(taskHash);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdrawToken(address _token, address to, uint value, string memory proof, bytes32 taskHash) public\r\n    onlyOperator\r\n    whenNotPaused\r\n    positiveValue(value)\r\n    returns (bool)\r\n    {\r\n        require(taskHash == keccak256((abi.encodePacked(to, value, proof))), \"Bridge:taskHash is wrong\");\r\n        require(!filledTx[taskHash], \"Bridge:tx filled already\");\r\n        uint256 status = logic.supportTask(logic.WITHDRAWTASK(), taskHash, msg.sender, operatorRequireNum);\r\n\r\n        if (status == logic.TASKPROCESSING()) {\r\n            emit WithdrawingToken(to, _token, value, proof);\r\n        } else if (status == logic.TASKDONE()) {\r\n            bool res = withdrawTokenLogic(_token, to, value);\r\n\r\n            emit WithdrawingToken(to, _token, value, proof);\r\n            emit WithdrawDoneToken(to, _token, value, proof);\r\n            filledTx[taskHash] = true;\r\n            logic.removeTask(taskHash);\r\n            return res;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function modifyAdminAddress(string memory class, address oldAddress, address newAddress) public whenPaused {\r\n        require(newAddress != address(0x0), \"Bridge:wrong address\");\r\n        bool flag = modifyAddress(class, oldAddress, newAddress);\r\n        if (flag) {\r\n            bytes32 classHash = keccak256(abi.encodePacked(class));\r\n            if (classHash == LOGICHASH) {\r\n                logic = BridgeLogic(newAddress);\r\n            } else if (classHash == STOREHASH) {\r\n                logic.resetStoreLogic(newAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getLogicAddress() public view returns (address) {\r\n        return address(logic);\r\n    }\r\n\r\n    function getStoreAddress() public view returns (address) {\r\n        return logic.getStoreAddress();\r\n    }\r\n\r\n    function pause() public onlyPauser {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyPauser {\r\n        _unpause();\r\n    }\r\n\r\n    function setDepositSelector(address token, string memory method, bool _isValueFirst) onlyOperator external {\r\n        depositSelector[token] = assetSelector(method, _isValueFirst);\r\n    }\r\n\r\n    function setWithdrawSelector(address token, string memory method, bool _isValueFirst) onlyOperator external {\r\n        withdrawSelector[token] = assetSelector(method, _isValueFirst);\r\n    }\r\n\r\n    function setSwapFee(uint256 _swapFee) onlyOwner external {\r\n        emit SwapFeeChanged(swapFee, _swapFee);\r\n        swapFee = _swapFee;\r\n    }\r\n\r\n    function setFeeTo(address _feeTo) onlyOwner external {\r\n        emit FeeToTransferred(feeTo, _feeTo);\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    function depositTokenLogic(address token, address _from, uint256 _value) internal returns (bool) {\r\n        bool status = false;\r\n        bytes memory returnedData;\r\n        if (bytes(depositSelector[token].selector).length == 0) {\r\n            (status, returnedData) = token.call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", _from, this, _value));\r\n        }\r\n        else {\r\n            assetSelector memory aselector = depositSelector[token];\r\n            if (aselector.isValueFirst) {\r\n                (status, returnedData) = token.call(abi.encodeWithSignature(aselector.selector, _value, _from));\r\n            }\r\n            else {\r\n                (status, returnedData) = token.call(abi.encodeWithSignature(aselector.selector, _from, _value));\r\n            }\r\n        }\r\n        require(status && (returnedData.length == 0 || abi.decode(returnedData, (bool))), 'Bridge:deposit failed');\r\n        return true;\r\n    }\r\n\r\n    function withdrawTokenLogic(address token, address _to, uint256 _value) internal returns (bool) {\r\n        bool status = false;\r\n        bytes memory returnedData;\r\n        if (bytes(withdrawSelector[token].selector).length == 0) {\r\n            (status, returnedData) = token.call(abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _value));\r\n        }\r\n        else {\r\n            assetSelector memory aselector = withdrawSelector[token];\r\n            if (aselector.isValueFirst) {\r\n                (status, returnedData) = token.call(abi.encodeWithSignature(aselector.selector, _value, _to));\r\n            }\r\n            else {\r\n                (status, returnedData) = token.call(abi.encodeWithSignature(aselector.selector, _to, _value));\r\n            }\r\n        }\r\n\r\n        require(status && (returnedData.length == 0 || abi.decode(returnedData, (bool))), 'Bridge:withdraw failed');\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_ownerRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"TaskType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"TaskType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredNum\",\"type\":\"uint256\"}],\"name\":\"AdminRequiredNumChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"AdminTaskDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeValue\",\"type\":\"uint256\"}],\"name\":\"DepositNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeValue\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"FeeToTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"previousSwapFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"SwapFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawDoneNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawDoneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawingNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawingToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oneAddress\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_targetAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositSelector\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"selector\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isValueFirst\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_targetAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oneAddress\",\"type\":\"address\"}],\"name\":\"dropAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"dropTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filledTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"}],\"name\":\"getAdminAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLogicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorRequireNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerRequireNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"modifyAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requiredNum\",\"type\":\"uint256\"}],\"name\":\"resetRequiredNum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isValueFirst\",\"type\":\"bool\"}],\"name\":\"setDepositSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isValueFirst\",\"type\":\"bool\"}],\"name\":\"setWithdrawSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"withdrawNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawSelector\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"selector\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isValueFirst\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bridge", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000948c528116427ff4dc4a099ef73ad6ca7142bd90000000000000000000000003ae6f839abb088ac41a951f8e10269bd61f30de3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4cc2b3fe807b742ed23bfa25d80efe6c88d9e53210798af5defd60e46614d1cd"}, {"Rank": 3353, "Address": "0xd4686214d58225f162ddec90d9fbf4e045f8e3f3", "NameTag": "", "Balance": 2220.09, "Percentage": 0.00188508, "TxCount": 9, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 3456, "Address": "0x9a016ce184a22dbf6c17daa59eb7d3140dbd1c54", "NameTag": "", "Balance": 2110.16882703, "Percentage": 0.00179175, "TxCount": 5446, "SourceCode": "// File: contracts/libs/common/ZeroCopySource.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over decoding and deserialization operation from bytes into bassic types in Solidity for PolyNetwork cross chain utility.\r\n *\r\n * Decode into basic types in Solidity from bytes easily. It's designed to be used\r\n * for PolyNetwork cross chain application, and the decoding rules on Ethereum chain\r\n * and the encoding rule on other chains should be consistent, and . Here we\r\n * follow the underlying deserialization rule with implementation found here:\r\n * https://github.com/polynetwork/poly/blob/master/common/zero_copy_source.go\r\n *\r\n * Using this library instead of the unchecked serialization method can help reduce\r\n * the risk of serious bugs and handfule, so it's recommended to use it.\r\n *\r\n * Please note that risk can be minimized, yet not eliminated.\r\n */\r\nlibrary ZeroCopySource {\r\n    /* @notice              Read next byte as boolean type starting at offset from buff\r\n    *  @param buff          Source bytes array\r\n    *  @param offset        The position from where we read the boolean value\r\n    *  @return              The the read boolean value and new offset\r\n    */\r\n    function NextBool(bytes memory buff, uint256 offset) internal pure returns(bool, uint256) {\r\n        require(offset + 1 <= buff.length && offset < offset + 1, \"Offset exceeds limit\");\r\n        // byte === bytes1\r\n        byte v;\r\n        assembly{\r\n            v := mload(add(add(buff, 0x20), offset))\r\n        }\r\n        bool value;\r\n        if (v == 0x01) {\r\n\t\t    value = true;\r\n    \t} else if (v == 0x00) {\r\n            value = false;\r\n        } else {\r\n            revert(\"NextBool value error\");\r\n        }\r\n        return (value, offset + 1);\r\n    }\r\n\r\n    /* @notice              Read next byte starting at offset from buff\r\n    *  @param buff          Source bytes array\r\n    *  @param offset        The position from where we read the byte value\r\n    *  @return              The read byte value and new offset\r\n    */\r\n    function NextByte(bytes memory buff, uint256 offset) internal pure returns (byte, uint256) {\r\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextByte, Offset exceeds maximum\");\r\n        byte v;\r\n        assembly{\r\n            v := mload(add(add(buff, 0x20), offset))\r\n        }\r\n        return (v, offset + 1);\r\n    }\r\n\r\n    /* @notice              Read next byte as uint8 starting at offset from buff\r\n    *  @param buff          Source bytes array\r\n    *  @param offset        The position from where we read the byte value\r\n    *  @return              The read uint8 value and new offset\r\n    */\r\n    function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256) {\r\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\");\r\n        uint8 v;\r\n        assembly{\r\n            let tmpbytes := mload(0x40)\r\n            let bvalue := mload(add(add(buff, 0x20), offset))\r\n            mstore8(tmpbytes, byte(0, bvalue))\r\n            mstore(0x40, add(tmpbytes, 0x01))\r\n            v := mload(sub(tmpbytes, 0x1f))\r\n        }\r\n        return (v, offset + 1);\r\n    }\r\n\r\n    /* @notice              Read next two bytes as uint16 type starting from offset\r\n    *  @param buff          Source bytes array\r\n    *  @param offset        The position from where we read the uint16 value\r\n    *  @return              The read uint16 value and updated offset\r\n    */\r\n    function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256) {\r\n        require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\");\r\n\r\n        uint16 v;\r\n        assembly {\r\n            let tmpbytes := mload(0x40)\r\n            let bvalue := mload(add(add(buff, 0x20), offset))\r\n            mstore8(tmpbytes, byte(0x01, bvalue))\r\n            mstore8(add(tmpbytes, 0x01), byte(0, bvalue))\r\n            mstore(0x40, add(tmpbytes, 0x02))\r\n            v := mload(sub(tmpbytes, 0x1e))\r\n        }\r\n        return (v, offset + 2);\r\n    }\r\n\r\n\r\n    /* @notice              Read next four bytes as uint32 type starting from offset\r\n    *  @param buff          Source bytes array\r\n    *  @param offset        The position from where we read the uint32 value\r\n    *  @return              The read uint32 value and updated offset\r\n    */\r\n    function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256) {\r\n        require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\");\r\n        uint32 v;\r\n        assembly {\r\n            let tmpbytes := mload(0x40)\r\n            let byteLen := 0x04\r\n            for {\r\n                let tindex := 0x00\r\n                let bindex := sub(byteLen, 0x01)\r\n                let bvalue := mload(add(add(buff, 0x20), offset))\r\n            } lt(tindex, byteLen) {\r\n                tindex := add(tindex, 0x01)\r\n                bindex := sub(bindex, 0x01)\r\n            }{\r\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\r\n            }\r\n            mstore(0x40, add(tmpbytes, byteLen))\r\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\r\n        }\r\n        return (v, offset + 4);\r\n    }\r\n\r\n    /* @notice              Read next eight bytes as uint64 type starting from offset\r\n    *  @param buff          Source bytes array\r\n    *  @param offset        The position from where we read the uint64 value\r\n    *  @return              The read uint64 value and updated offset\r\n    */\r\n    function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256) {\r\n        require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\");\r\n        uint64 v;\r\n        assembly {\r\n            let tmpbytes := mload(0x40)\r\n            let byteLen := 0x08\r\n            for {\r\n                let tindex := 0x00\r\n                let bindex := sub(byteLen, 0x01)\r\n                let bvalue := mload(add(add(buff, 0x20), offset))\r\n            } lt(tindex, byteLen) {\r\n                tindex := add(tindex, 0x01)\r\n                bindex := sub(bindex, 0x01)\r\n            }{\r\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\r\n            }\r\n            mstore(0x40, add(tmpbytes, byteLen))\r\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\r\n        }\r\n        return (v, offset + 8);\r\n    }\r\n\r\n    /* @notice              Read next 32 bytes as uint256 type starting from offset,\r\n                            there are limits considering the numerical limits in multi-chain\r\n    *  @param buff          Source bytes array\r\n    *  @param offset        The position from where we read the uint256 value\r\n    *  @return              The read uint256 value and updated offset\r\n    */\r\n    function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\r\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\");\r\n        uint256 v;\r\n        assembly {\r\n            let tmpbytes := mload(0x40)\r\n            let byteLen := 0x20\r\n            for {\r\n                let tindex := 0x00\r\n                let bindex := sub(byteLen, 0x01)\r\n                let bvalue := mload(add(add(buff, 0x20), offset))\r\n            } lt(tindex, byteLen) {\r\n                tindex := add(tindex, 0x01)\r\n                bindex := sub(bindex, 0x01)\r\n            }{\r\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\r\n            }\r\n            mstore(0x40, add(tmpbytes, byteLen))\r\n            v := mload(tmpbytes)\r\n        }\r\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\r\n        return (v, offset + 32);\r\n    }\r\n    /* @notice              Read next variable bytes starting from offset,\r\n                            the decoding rule coming from multi-chain\r\n    *  @param buff          Source bytes array\r\n    *  @param offset        The position from where we read the bytes value\r\n    *  @return              The read variable bytes array value and updated offset\r\n    */\r\n    function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns(bytes memory, uint256) {\r\n        uint len;\r\n        (len, offset) = NextVarUint(buff, offset);\r\n        require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\");\r\n        bytes memory tempBytes;\r\n        assembly{\r\n            switch iszero(len)\r\n            case 0 {\r\n                // Get a location of some free memory and store it in tempBytes as\r\n                // Solidity does for memory variables.\r\n                tempBytes := mload(0x40)\r\n\r\n                // The first word of the slice result is potentially a partial\r\n                // word read from the original array. To read it, we calculate\r\n                // the length of that partial word and start copying that many\r\n                // bytes into the array. The first word we copy will start with\r\n                // data we don't care about, but the last `lengthmod` bytes will\r\n                // land at the beginning of the contents of the new array. When\r\n                // we're done copying, we overwrite the full first word with\r\n                // the actual length of the slice.\r\n                let lengthmod := and(len, 31)\r\n\r\n                // The multiplication in the next line is necessary\r\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n                // the following copy loop was copying the origin's length\r\n                // and then ending prematurely not copying everything it should.\r\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n                let end := add(mc, len)\r\n\r\n                for {\r\n                    // The multiplication in the next line has the same exact purpose\r\n                    // as the one above.\r\n                    let cc := add(add(add(buff, lengthmod), mul(0x20, iszero(lengthmod))), offset)\r\n                } lt(mc, end) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    mstore(mc, mload(cc))\r\n                }\r\n\r\n                mstore(tempBytes, len)\r\n\r\n                //update free-memory pointer\r\n                //allocating the array padded to 32 bytes like the compiler does now\r\n                mstore(0x40, and(add(mc, 31), not(31)))\r\n            }\r\n            //if we want a zero-length slice let's just return a zero-length array\r\n            default {\r\n                tempBytes := mload(0x40)\r\n\r\n                mstore(0x40, add(tempBytes, 0x20))\r\n            }\r\n        }\r\n\r\n        return (tempBytes, offset + len);\r\n    }\r\n    /* @notice              Read next 32 bytes starting from offset,\r\n    *  @param buff          Source bytes array\r\n    *  @param offset        The position from where we read the bytes value\r\n    *  @return              The read bytes32 value and updated offset\r\n    */\r\n    function NextHash(bytes memory buff, uint256 offset) internal pure returns (bytes32 , uint256) {\r\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextHash, offset exceeds maximum\");\r\n        bytes32 v;\r\n        assembly {\r\n            v := mload(add(buff, add(offset, 0x20)))\r\n        }\r\n        return (v, offset + 32);\r\n    }\r\n\r\n    /* @notice              Read next 20 bytes starting from offset,\r\n    *  @param buff          Source bytes array\r\n    *  @param offset        The position from where we read the bytes value\r\n    *  @return              The read bytes20 value and updated offset\r\n    */\r\n    function NextBytes20(bytes memory buff, uint256 offset) internal pure returns (bytes20 , uint256) {\r\n        require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\");\r\n        bytes20 v;\r\n        assembly {\r\n            v := mload(add(buff, add(offset, 0x20)))\r\n        }\r\n        return (v, offset + 20);\r\n    }\r\n\r\n    function NextVarUint(bytes memory buff, uint256 offset) internal pure returns(uint, uint256) {\r\n        byte v;\r\n        (v, offset) = NextByte(buff, offset);\r\n\r\n        uint value;\r\n        if (v == 0xFD) {\r\n            // return NextUint16(buff, offset);\r\n            (value, offset) = NextUint16(buff, offset);\r\n            require(value >= 0xFD && value <= 0xFFFF, \"NextUint16, value outside range\");\r\n            return (value, offset);\r\n        } else if (v == 0xFE) {\r\n            // return NextUint32(buff, offset);\r\n            (value, offset) = NextUint32(buff, offset);\r\n            require(value > 0xFFFF && value <= 0xFFFFFFFF, \"NextVarUint, value outside range\");\r\n            return (value, offset);\r\n        } else if (v == 0xFF) {\r\n            // return NextUint64(buff, offset);\r\n            (value, offset) = NextUint64(buff, offset);\r\n            require(value > 0xFFFFFFFF, \"NextVarUint, value outside range\");\r\n            return (value, offset);\r\n        } else{\r\n            // return (uint8(v), offset);\r\n            value = uint8(v);\r\n            require(value < 0xFD, \"NextVarUint, value outside range\");\r\n            return (value, offset);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libs/common/ZeroCopySink.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over encoding and serialization operation into bytes from bassic types in Solidity for PolyNetwork cross chain utility.\r\n *\r\n * Encode basic types in Solidity into bytes easily. It's designed to be used\r\n * for PolyNetwork cross chain application, and the encoding rules on Ethereum chain\r\n * and the decoding rules on other chains should be consistent. Here we\r\n * follow the underlying serialization rule with implementation found here:\r\n * https://github.com/polynetwork/poly/blob/master/common/zero_copy_sink.go\r\n *\r\n * Using this library instead of the unchecked serialization method can help reduce\r\n * the risk of serious bugs and handfule, so it's recommended to use it.\r\n *\r\n * Please note that risk can be minimized, yet not eliminated.\r\n */\r\nlibrary ZeroCopySink {\r\n    /* @notice          Convert boolean value into bytes\r\n    *  @param b         The boolean value\r\n    *  @return          Converted bytes array\r\n    */\r\n    function WriteBool(bool b) internal pure returns (bytes memory) {\r\n        bytes memory buff;\r\n        assembly{\r\n            buff := mload(0x40)\r\n            mstore(buff, 1)\r\n            switch iszero(b)\r\n            case 1 {\r\n                mstore(add(buff, 0x20), shl(248, 0x00))\r\n                // mstore8(add(buff, 0x20), 0x00)\r\n            }\r\n            default {\r\n                mstore(add(buff, 0x20), shl(248, 0x01))\r\n                // mstore8(add(buff, 0x20), 0x01)\r\n            }\r\n            mstore(0x40, add(buff, 0x21))\r\n        }\r\n        return buff;\r\n    }\r\n\r\n    /* @notice          Convert byte value into bytes\r\n    *  @param b         The byte value\r\n    *  @return          Converted bytes array\r\n    */\r\n    function WriteByte(byte b) internal pure returns (bytes memory) {\r\n        return WriteUint8(uint8(b));\r\n    }\r\n\r\n    /* @notice          Convert uint8 value into bytes\r\n    *  @param v         The uint8 value\r\n    *  @return          Converted bytes array\r\n    */\r\n    function WriteUint8(uint8 v) internal pure returns (bytes memory) {\r\n        bytes memory buff;\r\n        assembly{\r\n            buff := mload(0x40)\r\n            mstore(buff, 1)\r\n            mstore(add(buff, 0x20), shl(248, v))\r\n            // mstore(add(buff, 0x20), byte(0x1f, v))\r\n            mstore(0x40, add(buff, 0x21))\r\n        }\r\n        return buff;\r\n    }\r\n\r\n    /* @notice          Convert uint16 value into bytes\r\n    *  @param v         The uint16 value\r\n    *  @return          Converted bytes array\r\n    */\r\n    function WriteUint16(uint16 v) internal pure returns (bytes memory) {\r\n        bytes memory buff;\r\n\r\n        assembly{\r\n            buff := mload(0x40)\r\n            let byteLen := 0x02\r\n            mstore(buff, byteLen)\r\n            for {\r\n                let mindex := 0x00\r\n                let vindex := 0x1f\r\n            } lt(mindex, byteLen) {\r\n                mindex := add(mindex, 0x01)\r\n                vindex := sub(vindex, 0x01)\r\n            }{\r\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\r\n            }\r\n            mstore(0x40, add(buff, 0x22))\r\n        }\r\n        return buff;\r\n    }\r\n\r\n    /* @notice          Convert uint32 value into bytes\r\n    *  @param v         The uint32 value\r\n    *  @return          Converted bytes array\r\n    */\r\n    function WriteUint32(uint32 v) internal pure returns(bytes memory) {\r\n        bytes memory buff;\r\n        assembly{\r\n            buff := mload(0x40)\r\n            let byteLen := 0x04\r\n            mstore(buff, byteLen)\r\n            for {\r\n                let mindex := 0x00\r\n                let vindex := 0x1f\r\n            } lt(mindex, byteLen) {\r\n                mindex := add(mindex, 0x01)\r\n                vindex := sub(vindex, 0x01)\r\n            }{\r\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\r\n            }\r\n            mstore(0x40, add(buff, 0x24))\r\n        }\r\n        return buff;\r\n    }\r\n\r\n    /* @notice          Convert uint64 value into bytes\r\n    *  @param v         The uint64 value\r\n    *  @return          Converted bytes array\r\n    */\r\n    function WriteUint64(uint64 v) internal pure returns(bytes memory) {\r\n        bytes memory buff;\r\n\r\n        assembly{\r\n            buff := mload(0x40)\r\n            let byteLen := 0x08\r\n            mstore(buff, byteLen)\r\n            for {\r\n                let mindex := 0x00\r\n                let vindex := 0x1f\r\n            } lt(mindex, byteLen) {\r\n                mindex := add(mindex, 0x01)\r\n                vindex := sub(vindex, 0x01)\r\n            }{\r\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\r\n            }\r\n            mstore(0x40, add(buff, 0x28))\r\n        }\r\n        return buff;\r\n    }\r\n\r\n    /* @notice          Convert limited uint256 value into bytes\r\n    *  @param v         The uint256 value\r\n    *  @return          Converted bytes array\r\n    */\r\n    function WriteUint255(uint256 v) internal pure returns (bytes memory) {\r\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds uint255 range\");\r\n        bytes memory buff;\r\n\r\n        assembly{\r\n            buff := mload(0x40)\r\n            let byteLen := 0x20\r\n            mstore(buff, byteLen)\r\n            for {\r\n                let mindex := 0x00\r\n                let vindex := 0x1f\r\n            } lt(mindex, byteLen) {\r\n                mindex := add(mindex, 0x01)\r\n                vindex := sub(vindex, 0x01)\r\n            }{\r\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\r\n            }\r\n            mstore(0x40, add(buff, 0x40))\r\n        }\r\n        return buff;\r\n    }\r\n\r\n    /* @notice          Encode bytes format data into bytes\r\n    *  @param data      The bytes array data\r\n    *  @return          Encoded bytes array\r\n    */\r\n    function WriteVarBytes(bytes memory data) internal pure returns (bytes memory) {\r\n        uint64 l = uint64(data.length);\r\n        return abi.encodePacked(WriteVarUint(l), data);\r\n    }\r\n\r\n    function WriteVarUint(uint64 v) internal pure returns (bytes memory) {\r\n        if (v < 0xFD){\r\n    \t\treturn WriteUint8(uint8(v));\r\n    \t} else if (v <= 0xFFFF) {\r\n    \t\treturn abi.encodePacked(WriteByte(0xFD), WriteUint16(uint16(v)));\r\n    \t} else if (v <= 0xFFFFFFFF) {\r\n            return abi.encodePacked(WriteByte(0xFE), WriteUint32(uint32(v)));\r\n    \t} else {\r\n    \t\treturn abi.encodePacked(WriteByte(0xFF), WriteUint64(uint64(v)));\r\n    \t}\r\n    }\r\n}\r\n\r\n// File: contracts/libs/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/utils/Utils.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary Utils {\r\n\r\n    /* @notice      Convert the bytes array to bytes32 type, the bytes array length must be 32\r\n    *  @param _bs   Source bytes array\r\n    *  @return      bytes32\r\n    */\r\n    function bytesToBytes32(bytes memory _bs) internal pure returns (bytes32 value) {\r\n        require(_bs.length == 32, \"bytes length is not 32.\");\r\n        assembly {\r\n            // load 32 bytes from memory starting from position _bs + 0x20 since the first 0x20 bytes stores _bs length\r\n            value := mload(add(_bs, 0x20))\r\n        }\r\n    }\r\n\r\n    /* @notice      Convert bytes to uint256\r\n    *  @param _b    Source bytes should have length of 32\r\n    *  @return      uint256\r\n    */\r\n    function bytesToUint256(bytes memory _bs) internal pure returns (uint256 value) {\r\n        require(_bs.length == 32, \"bytes length is not 32.\");\r\n        assembly {\r\n            // load 32 bytes from memory starting from position _bs + 32\r\n            value := mload(add(_bs, 0x20))\r\n        }\r\n        require(value <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\r\n    }\r\n\r\n    /* @notice      Convert uint256 to bytes\r\n    *  @param _b    uint256 that needs to be converted\r\n    *  @return      bytes\r\n    */\r\n    function uint256ToBytes(uint256 _value) internal pure returns (bytes memory bs) {\r\n        require(_value <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\r\n        assembly {\r\n            // Get a location of some free memory and store it in result as\r\n            // Solidity does for memory variables.\r\n            bs := mload(0x40)\r\n            // Put 0x20 at the first word, the length of bytes for uint256 value\r\n            mstore(bs, 0x20)\r\n            //In the next word, put value in bytes format to the next 32 bytes\r\n            mstore(add(bs, 0x20), _value)\r\n            // Update the free-memory pointer by padding our last write location to 32 bytes\r\n            mstore(0x40, add(bs, 0x40))\r\n        }\r\n    }\r\n\r\n    /* @notice      Convert bytes to address\r\n    *  @param _bs   Source bytes: bytes length must be 20\r\n    *  @return      Converted address from source bytes\r\n    */\r\n    function bytesToAddress(bytes memory _bs) internal pure returns (address addr)\r\n    {\r\n        require(_bs.length == 20, \"bytes length does not match address\");\r\n        assembly {\r\n            // for _bs, first word store _bs.length, second word store _bs.value\r\n            // load 32 bytes from mem[_bs+20], convert it into Uint160, meaning we take last 20 bytes as addr (address).\r\n            addr := mload(add(_bs, 0x14))\r\n        }\r\n\r\n    }\r\n\r\n    /* @notice      Convert address to bytes\r\n    *  @param _addr Address need to be converted\r\n    *  @return      Converted bytes from address\r\n    */\r\n    function addressToBytes(address _addr) internal pure returns (bytes memory bs){\r\n        assembly {\r\n            // Get a location of some free memory and store it in result as\r\n            // Solidity does for memory variables.\r\n            bs := mload(0x40)\r\n            // Put 20 (address byte length) at the first word, the length of bytes for uint256 value\r\n            mstore(bs, 0x14)\r\n            // logical shift left _a by 12 bytes, change _a from right-aligned to left-aligned\r\n            mstore(add(bs, 0x20), shl(96, _addr))\r\n            // Update the free-memory pointer by padding our last write location to 32 bytes\r\n            mstore(0x40, add(bs, 0x40))\r\n       }\r\n    }\r\n\r\n    /* @notice          Do hash leaf as the multi-chain does\r\n    *  @param _data     Data in bytes format\r\n    *  @return          Hashed value in bytes32 format\r\n    */\r\n    function hashLeaf(bytes memory _data) internal pure returns (bytes32 result)  {\r\n        result = sha256(abi.encodePacked(byte(0x0), _data));\r\n    }\r\n\r\n    /* @notice          Do hash children as the multi-chain does\r\n    *  @param _l        Left node\r\n    *  @param _r        Right node\r\n    *  @return          Hashed value in bytes32 format\r\n    */\r\n    function hashChildren(bytes32 _l, bytes32  _r) internal pure returns (bytes32 result)  {\r\n        result = sha256(abi.encodePacked(bytes1(0x01), _l, _r));\r\n    }\r\n\r\n    /* @notice              Compare if two bytes are equal, which are in storage and memory, seperately\r\n                            Refer from https://github.com/summa-tx/bitcoin-spv/blob/master/solidity/contracts/BytesLib.sol#L368\r\n    *  @param _preBytes     The bytes stored in storage\r\n    *  @param _postBytes    The bytes stored in memory\r\n    *  @return              Bool type indicating if they are equal\r\n    */\r\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\r\n        bool success = true;\r\n\r\n        assembly {\r\n            // we know _preBytes_offset is 0\r\n            let fslot := sload(_preBytes_slot)\r\n            // Arrays of 31 bytes or less have an even value in their slot,\r\n            // while longer arrays have an odd value. The actual length is\r\n            // the slot divided by two for odd values, and the lowest order\r\n            // byte divided by two for even values.\r\n            // If the slot is even, bitwise and the slot with 255 and divide by\r\n            // two to get the length. If the slot is odd, bitwise and the slot\r\n            // with -1 and divide by two.\r\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\r\n            let mlength := mload(_postBytes)\r\n\r\n            // if lengths don't match the arrays are not equal\r\n            switch eq(slength, mlength)\r\n            case 1 {\r\n                // fslot can contain both the length and contents of the array\r\n                // if slength < 32 bytes so let's prepare for that\r\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\r\n                // slength != 0\r\n                if iszero(iszero(slength)) {\r\n                    switch lt(slength, 32)\r\n                    case 1 {\r\n                        // blank the last byte which is the length\r\n                        fslot := mul(div(fslot, 0x100), 0x100)\r\n\r\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\r\n                            // unsuccess:\r\n                            success := 0\r\n                        }\r\n                    }\r\n                    default {\r\n                        // cb is a circuit breaker in the for loop since there's\r\n                        //  no said feature for inline assembly loops\r\n                        // cb = 1 - don't breaker\r\n                        // cb = 0 - break\r\n                        let cb := 1\r\n\r\n                        // get the keccak hash to get the contents of the array\r\n                        mstore(0x0, _preBytes_slot)\r\n                        let sc := keccak256(0x0, 0x20)\r\n\r\n                        let mc := add(_postBytes, 0x20)\r\n                        let end := add(mc, mlength)\r\n\r\n                        // the next line is the loop condition:\r\n                        // while(uint(mc < end) + cb == 2)\r\n                        for {} eq(add(lt(mc, end), cb), 2) {\r\n                            sc := add(sc, 1)\r\n                            mc := add(mc, 0x20)\r\n                        } {\r\n                            if iszero(eq(sload(sc), mload(mc))) {\r\n                                // unsuccess:\r\n                                success := 0\r\n                                cb := 0\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            default {\r\n                // unsuccess:\r\n                success := 0\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    /* @notice              Slice the _bytes from _start index till the result has length of _length\r\n                            Refer from https://github.com/summa-tx/bitcoin-spv/blob/master/solidity/contracts/BytesLib.sol#L246\r\n    *  @param _bytes        The original bytes needs to be sliced\r\n    *  @param _start        The index of _bytes for the start of sliced bytes\r\n    *  @param _length       The index of _bytes for the end of sliced bytes\r\n    *  @return              The sliced bytes\r\n    */\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint _start,\r\n        uint _length\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        require(_bytes.length >= (_start + _length));\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n            case 0 {\r\n                // Get a location of some free memory and store it in tempBytes as\r\n                // Solidity does for memory variables.\r\n                tempBytes := mload(0x40)\r\n\r\n                // The first word of the slice result is potentially a partial\r\n                // word read from the original array. To read it, we calculate\r\n                // the length of that partial word and start copying that many\r\n                // bytes into the array. The first word we copy will start with\r\n                // data we don't care about, but the last `lengthmod` bytes will\r\n                // land at the beginning of the contents of the new array. When\r\n                // we're done copying, we overwrite the full first word with\r\n                // the actual length of the slice.\r\n                // lengthmod <= _length % 32\r\n                let lengthmod := and(_length, 31)\r\n\r\n                // The multiplication in the next line is necessary\r\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n                // the following copy loop was copying the origin's length\r\n                // and then ending prematurely not copying everything it should.\r\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n                let end := add(mc, _length)\r\n\r\n                for {\r\n                    // The multiplication in the next line has the same exact purpose\r\n                    // as the one above.\r\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\r\n                } lt(mc, end) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    mstore(mc, mload(cc))\r\n                }\r\n\r\n                mstore(tempBytes, _length)\r\n\r\n                //update free-memory pointer\r\n                //allocating the array padded to 32 bytes like the compiler does now\r\n                mstore(0x40, and(add(mc, 31), not(31)))\r\n            }\r\n            //if we want a zero-length slice let's just return a zero-length array\r\n            default {\r\n                tempBytes := mload(0x40)\r\n\r\n                mstore(0x40, add(tempBytes, 0x20))\r\n            }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n    /* @notice              Check if the elements number of _signers within _keepers array is no less than _m\r\n    *  @param _keepers      The array consists of serveral address\r\n    *  @param _signers      Some specific addresses to be looked into\r\n    *  @param _m            The number requirement paramter\r\n    *  @return              True means containment, false meansdo do not contain.\r\n    */\r\n    function containMAddresses(address[] memory _keepers, address[] memory _signers, uint _m) internal pure returns (bool){\r\n        uint m = 0;\r\n        for(uint i = 0; i < _signers.length; i++){\r\n            for (uint j = 0; j < _keepers.length; j++) {\r\n                if (_signers[i] == _keepers[j]) {\r\n                    m++;\r\n                    delete _keepers[j];\r\n                }\r\n            }\r\n        }\r\n        return m >= _m;\r\n    }\r\n\r\n    /* @notice              TODO\r\n    *  @param key\r\n    *  @return\r\n    */\r\n    function compressMCPubKey(bytes memory key) internal pure returns (bytes memory newkey) {\r\n         require(key.length >= 67, \"key lenggh is too short\");\r\n         newkey = slice(key, 0, 35);\r\n         if (uint8(key[66]) % 2 == 0){\r\n             newkey[2] = byte(0x02);\r\n         } else {\r\n             newkey[2] = byte(0x03);\r\n         }\r\n         return newkey;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *      Refer from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L18\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\n// File: contracts/libs/math/SafeMath.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Wallet.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n/// @title The Wallet contract for Switcheo TradeHub\r\n/// @author Switcheo Network\r\n/// @notice This contract faciliates deposits for Switcheo TradeHub.\r\n/// @dev This contract is used together with the LockProxy contract to allow users\r\n/// to deposit funds without requiring them to have ETH\r\ncontract Wallet {\r\n    bool public isInitialized;\r\n    address public creator;\r\n    address public owner;\r\n    bytes public swthAddress;\r\n\r\n    function initialize(address _owner, bytes calldata _swthAddress) external {\r\n        require(isInitialized == false, \"Contract already initialized\");\r\n        isInitialized = true;\r\n        creator = msg.sender;\r\n        owner = _owner;\r\n        swthAddress = _swthAddress;\r\n    }\r\n\r\n    /// @dev Allow this contract to receive Ethereum\r\n    receive() external payable {}\r\n\r\n    /// @dev Allow this contract to receive ERC223 tokens\r\n    // An empty implementation is required so that the ERC223 token will not\r\n    // throw an error on transfer\r\n    function tokenFallback(address, uint, bytes calldata) external {}\r\n\r\n    /// @dev send ETH from this contract to its creator\r\n    function sendETHToCreator(uint256 _amount) external {\r\n        require(msg.sender == creator, \"Sender must be creator\");\r\n        // we use `call` here following the recommendation from\r\n        // https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\r\n        (bool success,  ) = creator.call{value: _amount}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    /// @dev send tokens from this contract to its creator\r\n    function sendERC20ToCreator(address _assetId, uint256 _amount) external {\r\n        require(msg.sender == creator, \"Sender must be creator\");\r\n\r\n        ERC20 token = ERC20(_assetId);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.transfer.selector,\r\n                creator,\r\n                _amount\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(_isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `_isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function _isContract(address account) private view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n}\r\n\r\n// File: contracts/LockProxy.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface CCM {\r\n    function crossChain(uint64 _toChainId, bytes calldata _toContract, bytes calldata _method, bytes calldata _txData) external returns (bool);\r\n}\r\n\r\ninterface CCMProxy {\r\n    function getEthCrossChainManager() external view returns (address);\r\n}\r\n\r\n/// @title The LockProxy contract for Switcheo TradeHub\r\n/// @author Switcheo Network\r\n/// @notice This contract faciliates deposits and withdrawals to Switcheo TradeHub.\r\n/// @dev The contract also allows for additional features in the future through \"extension\" contracts.\r\ncontract LockProxy is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    // used for cross-chain addExtension and removeExtension methods\r\n    struct ExtensionTxArgs {\r\n        bytes extensionAddress;\r\n    }\r\n\r\n    // used for cross-chain registerAsset method\r\n    struct RegisterAssetTxArgs {\r\n        bytes assetHash;\r\n        bytes nativeAssetHash;\r\n    }\r\n\r\n    // used for cross-chain lock and unlock methods\r\n    struct TransferTxArgs {\r\n        bytes fromAssetHash;\r\n        bytes toAssetHash;\r\n        bytes toAddress;\r\n        uint256 amount;\r\n        uint256 feeAmount;\r\n        bytes feeAddress;\r\n        bytes fromAddress;\r\n        uint256 nonce;\r\n    }\r\n\r\n    // used to create a unique salt for wallet creation\r\n    bytes public constant SALT_PREFIX = \"switcheo-eth-wallet-factory-v1\";\r\n    address public constant ETH_ASSET_HASH = address(0);\r\n\r\n    CCMProxy public ccmProxy;\r\n    uint64 public counterpartChainId;\r\n    uint256 public currentNonce = 0;\r\n\r\n    // a mapping of assetHashes to the hash of\r\n    // (associated proxy address on Switcheo TradeHub, associated asset hash on Switcheo TradeHub)\r\n    mapping(address => bytes32) public registry;\r\n\r\n    // a record of signed messages to prevent replay attacks\r\n    mapping(bytes32 => bool) public seenMessages;\r\n\r\n    // a mapping of extension contracts\r\n    mapping(address => bool) public extensions;\r\n\r\n    // a record of created wallets\r\n    mapping(address => bool) public wallets;\r\n\r\n    event LockEvent(\r\n        address fromAssetHash,\r\n        address fromAddress,\r\n        uint64 toChainId,\r\n        bytes toAssetHash,\r\n        bytes toAddress,\r\n        bytes txArgs\r\n    );\r\n\r\n    event UnlockEvent(\r\n        address toAssetHash,\r\n        address toAddress,\r\n        uint256 amount,\r\n        bytes txArgs\r\n    );\r\n\r\n    constructor(address _ccmProxyAddress, uint64 _counterpartChainId) public {\r\n        require(_counterpartChainId > 0, \"counterpartChainId cannot be zero\");\r\n        require(_ccmProxyAddress != address(0), \"ccmProxyAddress cannot be empty\");\r\n        counterpartChainId = _counterpartChainId;\r\n        ccmProxy = CCMProxy(_ccmProxyAddress);\r\n    }\r\n\r\n    modifier onlyManagerContract() {\r\n        require(\r\n            msg.sender == ccmProxy.getEthCrossChainManager(),\r\n            \"msg.sender is not CCM\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Allow this contract to receive Ethereum\r\n    receive() external payable {}\r\n\r\n    /// @dev Allow this contract to receive ERC223 tokens\r\n    /// An empty implementation is required so that the ERC223 token will not\r\n    /// throw an error on transfer, this is specific to ERC223 tokens which\r\n    /// require this implementation, e.g. DGTX\r\n    function tokenFallback(address, uint, bytes calldata) external {}\r\n\r\n    /// @dev Calculate the wallet address for the given owner and Switcheo TradeHub address\r\n    /// @param _ownerAddress the Ethereum address which the user has control over, i.e. can sign msgs with\r\n    /// @param _swthAddress the hex value of the user's Switcheo TradeHub address\r\n    /// @param _bytecodeHash the hash of the wallet contract's bytecode\r\n    /// @return the wallet address\r\n    function getWalletAddress(\r\n        address _ownerAddress,\r\n        bytes calldata _swthAddress,\r\n        bytes32 _bytecodeHash\r\n    )\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        bytes32 salt = _getSalt(\r\n            _ownerAddress,\r\n            _swthAddress\r\n        );\r\n\r\n        bytes32 data = keccak256(\r\n            abi.encodePacked(bytes1(0xff), address(this), salt, _bytecodeHash)\r\n        );\r\n\r\n        return address(bytes20(data << 96));\r\n    }\r\n\r\n    /// @dev Create the wallet for the given owner and Switcheo TradeHub address\r\n    /// @param _ownerAddress the Ethereum address which the user has control over, i.e. can sign msgs with\r\n    /// @param _swthAddress the hex value of the user's Switcheo TradeHub address\r\n    /// @return true if success\r\n    function createWallet(\r\n        address _ownerAddress,\r\n        bytes calldata _swthAddress\r\n    )\r\n        external\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(_ownerAddress != address(0), \"Empty ownerAddress\");\r\n        require(_swthAddress.length != 0, \"Empty swthAddress\");\r\n\r\n        bytes32 salt = _getSalt(\r\n            _ownerAddress,\r\n            _swthAddress\r\n        );\r\n\r\n        Wallet wallet = new Wallet{salt: salt}();\r\n        wallet.initialize(_ownerAddress, _swthAddress);\r\n        wallets[address(wallet)] = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Add a contract as an extension\r\n    /// @param _argsBz the serialized ExtensionTxArgs\r\n    /// @param _fromChainId the originating chainId\r\n    /// @return true if success\r\n    function addExtension(\r\n        bytes calldata _argsBz,\r\n        bytes calldata /* _fromContractAddr */,\r\n        uint64 _fromChainId\r\n    )\r\n        external\r\n        onlyManagerContract\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(_fromChainId == counterpartChainId, \"Invalid chain ID\");\r\n\r\n        ExtensionTxArgs memory args = _deserializeExtensionTxArgs(_argsBz);\r\n        address extensionAddress = Utils.bytesToAddress(args.extensionAddress);\r\n        extensions[extensionAddress] = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Remove a contract from the extensions mapping\r\n    /// @param _argsBz the serialized ExtensionTxArgs\r\n    /// @param _fromChainId the originating chainId\r\n    /// @return true if success\r\n    function removeExtension(\r\n        bytes calldata _argsBz,\r\n        bytes calldata /* _fromContractAddr */,\r\n        uint64 _fromChainId\r\n    )\r\n        external\r\n        onlyManagerContract\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(_fromChainId == counterpartChainId, \"Invalid chain ID\");\r\n\r\n        ExtensionTxArgs memory args = _deserializeExtensionTxArgs(_argsBz);\r\n        address extensionAddress = Utils.bytesToAddress(args.extensionAddress);\r\n        extensions[extensionAddress] = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Marks an asset as registered by mapping the asset's address to\r\n    /// the specified _fromContractAddr and assetHash on Switcheo TradeHub\r\n    /// @param _argsBz the serialized RegisterAssetTxArgs\r\n    /// @param _fromContractAddr the associated contract address on Switcheo TradeHub\r\n    /// @param _fromChainId the originating chainId\r\n    /// @return true if success\r\n    function registerAsset(\r\n        bytes calldata _argsBz,\r\n        bytes calldata _fromContractAddr,\r\n        uint64 _fromChainId\r\n    )\r\n        external\r\n        onlyManagerContract\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(_fromChainId == counterpartChainId, \"Invalid chain ID\");\r\n\r\n        RegisterAssetTxArgs memory args = _deserializeRegisterAssetTxArgs(_argsBz);\r\n        _markAssetAsRegistered(\r\n            Utils.bytesToAddress(args.nativeAssetHash),\r\n            _fromContractAddr,\r\n            args.assetHash\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Performs a deposit from a Wallet contract\r\n    /// @param _walletAddress address of the wallet contract, the wallet contract\r\n    /// does not receive ETH in this call, but _walletAddress still needs to be payable\r\n    /// since the wallet contract can receive ETH, there would be compile errors otherwise\r\n    /// @param _assetHash the asset to deposit\r\n    /// @param _targetProxyHash the associated proxy hash on Switcheo TradeHub\r\n    /// @param _toAssetHash the associated asset hash on Switcheo TradeHub\r\n    /// @param _feeAddress the hex version of the Switcheo TradeHub address to send the fee to\r\n    /// @param _values[0]: amount, the number of tokens to deposit\r\n    /// @param _values[1]: feeAmount, the number of tokens to be used as fees\r\n    /// @param _values[2]: nonce, to prevent replay attacks\r\n    /// @param _values[3]: callAmount, some tokens may burn an amount before transfer\r\n    /// so we allow a callAmount to support these tokens\r\n    /// @param _v: the v value of the wallet owner's signature\r\n    /// @param _rs: the r, s values of the wallet owner's signature\r\n    function lockFromWallet(\r\n        address payable _walletAddress,\r\n        address _assetHash,\r\n        bytes calldata _targetProxyHash,\r\n        bytes calldata _toAssetHash,\r\n        bytes calldata _feeAddress,\r\n        uint256[] calldata _values,\r\n        uint8 _v,\r\n        bytes32[] calldata _rs\r\n    )\r\n        external\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(wallets[_walletAddress], \"Invalid wallet address\");\r\n\r\n        Wallet wallet = Wallet(_walletAddress);\r\n        _validateLockFromWallet(\r\n            wallet.owner(),\r\n            _assetHash,\r\n            _targetProxyHash,\r\n            _toAssetHash,\r\n            _feeAddress,\r\n            _values,\r\n            _v,\r\n            _rs\r\n        );\r\n\r\n        // it is very important that this function validates the success of a transfer correctly\r\n        // since, once this line is passed, the deposit is assumed to be successful\r\n        // which will eventually result in the specified amount of tokens being minted for the\r\n        // wallet.swthAddress on Switcheo TradeHub\r\n        _transferInFromWallet(_walletAddress, _assetHash, _values[0], _values[3]);\r\n\r\n        _lock(\r\n            _assetHash,\r\n            _targetProxyHash,\r\n            _toAssetHash,\r\n            wallet.swthAddress(),\r\n            _values[0],\r\n            _values[1],\r\n            _feeAddress\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Performs a deposit\r\n    /// @param _assetHash the asset to deposit\r\n    /// @param _targetProxyHash the associated proxy hash on Switcheo TradeHub\r\n    /// @param _toAddress the hex version of the Switcheo TradeHub address to deposit to\r\n    /// @param _toAssetHash the associated asset hash on Switcheo TradeHub\r\n    /// @param _feeAddress the hex version of the Switcheo TradeHub address to send the fee to\r\n    /// @param _values[0]: amount, the number of tokens to deposit\r\n    /// @param _values[1]: feeAmount, the number of tokens to be used as fees\r\n    /// @param _values[2]: callAmount, some tokens may burn an amount before transfer\r\n    /// so we allow a callAmount to support these tokens\r\n    function lock(\r\n        address _assetHash,\r\n        bytes calldata _targetProxyHash,\r\n        bytes calldata _toAddress,\r\n        bytes calldata _toAssetHash,\r\n        bytes calldata _feeAddress,\r\n        uint256[] calldata _values\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n\r\n        // it is very important that this function validates the success of a transfer correctly\r\n        // since, once this line is passed, the deposit is assumed to be successful\r\n        // which will eventually result in the specified amount of tokens being minted for the\r\n        // _toAddress on Switcheo TradeHub\r\n        _transferIn(_assetHash, _values[0], _values[2]);\r\n\r\n        _lock(\r\n            _assetHash,\r\n            _targetProxyHash,\r\n            _toAssetHash,\r\n            _toAddress,\r\n            _values[0],\r\n            _values[1],\r\n            _feeAddress\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Performs a withdrawal that was initiated on Switcheo TradeHub\r\n    /// @param _argsBz the serialized TransferTxArgs\r\n    /// @param _fromContractAddr the associated contract address on Switcheo TradeHub\r\n    /// @param _fromChainId the originating chainId\r\n    /// @return true if success\r\n    function unlock(\r\n        bytes calldata _argsBz,\r\n        bytes calldata _fromContractAddr,\r\n        uint64 _fromChainId\r\n    )\r\n        external\r\n        onlyManagerContract\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(_fromChainId == counterpartChainId, \"Invalid chain ID\");\r\n\r\n        TransferTxArgs memory args = _deserializeTransferTxArgs(_argsBz);\r\n        require(args.fromAssetHash.length > 0, \"Invalid fromAssetHash\");\r\n        require(args.toAssetHash.length == 20, \"Invalid toAssetHash\");\r\n\r\n        address toAssetHash = Utils.bytesToAddress(args.toAssetHash);\r\n        address toAddress = Utils.bytesToAddress(args.toAddress);\r\n\r\n        _validateAssetRegistration(toAssetHash, _fromContractAddr, args.fromAssetHash);\r\n        _transferOut(toAddress, toAssetHash, args.amount);\r\n\r\n        emit UnlockEvent(toAssetHash, toAddress, args.amount, _argsBz);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Performs a transfer of funds, this is only callable by approved extension contracts\r\n    /// the `nonReentrant` guard is intentionally not added to this function, to allow for more flexibility.\r\n    /// The calling contract should be secure and have its own `nonReentrant` guard as needed.\r\n    /// @param _receivingAddress the address to transfer to\r\n    /// @param _assetHash the asset to transfer\r\n    /// @param _amount the amount to transfer\r\n    /// @return true if success\r\n    function extensionTransfer(\r\n        address _receivingAddress,\r\n        address _assetHash,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(\r\n            extensions[msg.sender] == true,\r\n            \"Invalid extension\"\r\n        );\r\n\r\n        if (_assetHash == ETH_ASSET_HASH) {\r\n            // we use `call` here since the _receivingAddress could be a contract\r\n            // see https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\r\n            // for more info\r\n            (bool success,  ) = _receivingAddress.call{value: _amount}(\"\");\r\n            require(success, \"Transfer failed\");\r\n            return true;\r\n        }\r\n\r\n        ERC20 token = ERC20(_assetHash);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                _receivingAddress,\r\n                _amount\r\n            )\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Marks an asset as registered by associating it to a specified Switcheo TradeHub proxy and asset hash\r\n    /// @param _assetHash the address of the asset to mark\r\n    /// @param _proxyAddress the associated proxy address on Switcheo TradeHub\r\n    /// @param _toAssetHash the associated asset hash on Switcheo TradeHub\r\n    function _markAssetAsRegistered(\r\n        address _assetHash,\r\n        bytes memory _proxyAddress,\r\n        bytes memory _toAssetHash\r\n    )\r\n        private\r\n    {\r\n        require(_proxyAddress.length == 20, \"Invalid proxyAddress\");\r\n        require(\r\n            registry[_assetHash] == bytes32(0),\r\n            \"Asset already registered\"\r\n        );\r\n\r\n        bytes32 value = keccak256(abi.encodePacked(\r\n            _proxyAddress,\r\n            _toAssetHash\r\n        ));\r\n\r\n        registry[_assetHash] = value;\r\n    }\r\n\r\n    /// @dev Validates that an asset's registration matches the given params\r\n    /// @param _assetHash the address of the asset to check\r\n    /// @param _proxyAddress the expected proxy address on Switcheo TradeHub\r\n    /// @param _toAssetHash the expected asset hash on Switcheo TradeHub\r\n    function _validateAssetRegistration(\r\n        address _assetHash,\r\n        bytes memory _proxyAddress,\r\n        bytes memory _toAssetHash\r\n    )\r\n        private\r\n        view\r\n    {\r\n        require(_proxyAddress.length == 20, \"Invalid proxyAddress\");\r\n        bytes32 value = keccak256(abi.encodePacked(\r\n            _proxyAddress,\r\n            _toAssetHash\r\n        ));\r\n        require(registry[_assetHash] == value, \"Asset not registered\");\r\n    }\r\n\r\n    /// @dev validates the asset registration and calls the CCM contract\r\n    function _lock(\r\n        address _fromAssetHash,\r\n        bytes memory _targetProxyHash,\r\n        bytes memory _toAssetHash,\r\n        bytes memory _toAddress,\r\n        uint256 _amount,\r\n        uint256 _feeAmount,\r\n        bytes memory _feeAddress\r\n    )\r\n        private\r\n    {\r\n        require(_targetProxyHash.length == 20, \"Invalid targetProxyHash\");\r\n        require(_toAssetHash.length > 0, \"Empty toAssetHash\");\r\n        require(_toAddress.length > 0, \"Empty toAddress\");\r\n        require(_amount > 0, \"Amount must be more than zero\");\r\n        require(_feeAmount < _amount, \"Fee amount cannot be greater than amount\");\r\n\r\n        _validateAssetRegistration(_fromAssetHash, _targetProxyHash, _toAssetHash);\r\n\r\n        TransferTxArgs memory txArgs = TransferTxArgs({\r\n            fromAssetHash: Utils.addressToBytes(_fromAssetHash),\r\n            toAssetHash: _toAssetHash,\r\n            toAddress: _toAddress,\r\n            amount: _amount,\r\n            feeAmount: _feeAmount,\r\n            feeAddress: _feeAddress,\r\n            fromAddress: abi.encodePacked(msg.sender),\r\n            nonce: _getNextNonce()\r\n        });\r\n\r\n        bytes memory txData = _serializeTransferTxArgs(txArgs);\r\n        CCM ccm = _getCcm();\r\n        require(\r\n            ccm.crossChain(counterpartChainId, _targetProxyHash, \"unlock\", txData),\r\n            \"EthCrossChainManager crossChain executed error!\"\r\n        );\r\n\r\n        emit LockEvent(_fromAssetHash, msg.sender, counterpartChainId, _toAssetHash, _toAddress, txData);\r\n    }\r\n\r\n    /// @dev validate the signature for lockFromWallet\r\n    function _validateLockFromWallet(\r\n        address _walletOwner,\r\n        address _assetHash,\r\n        bytes memory _targetProxyHash,\r\n        bytes memory _toAssetHash,\r\n        bytes memory _feeAddress,\r\n        uint256[] memory _values,\r\n        uint8 _v,\r\n        bytes32[] memory _rs\r\n    )\r\n        private\r\n    {\r\n        bytes32 message = keccak256(abi.encodePacked(\r\n            \"sendTokens\",\r\n            _assetHash,\r\n            _targetProxyHash,\r\n            _toAssetHash,\r\n            _feeAddress,\r\n            _values[0],\r\n            _values[1],\r\n            _values[2]\r\n        ));\r\n\r\n        require(seenMessages[message] == false, \"Message already seen\");\r\n        seenMessages[message] = true;\r\n        _validateSignature(message, _walletOwner, _v, _rs[0], _rs[1]);\r\n    }\r\n\r\n    /// @dev transfers funds from a Wallet contract into this contract\r\n    /// the difference between this contract's before and after balance must equal _amount\r\n    /// this is assumed to be sufficient in ensuring that the expected amount\r\n    /// of funds were transferred in\r\n    function _transferInFromWallet(\r\n        address payable _walletAddress,\r\n        address _assetHash,\r\n        uint256 _amount,\r\n        uint256 _callAmount\r\n    )\r\n        private\r\n    {\r\n        Wallet wallet = Wallet(_walletAddress);\r\n        if (_assetHash == ETH_ASSET_HASH) {\r\n            uint256 before = address(this).balance;\r\n\r\n            wallet.sendETHToCreator(_callAmount);\r\n\r\n            uint256 transferred = address(this).balance.sub(before);\r\n            require(transferred == _amount, \"ETH transferred does not match the expected amount\");\r\n            return;\r\n        }\r\n\r\n        ERC20 token = ERC20(_assetHash);\r\n        uint256 before = token.balanceOf(address(this));\r\n\r\n        wallet.sendERC20ToCreator(_assetHash, _callAmount);\r\n\r\n        uint256 transferred = token.balanceOf(address(this)).sub(before);\r\n        require(transferred == _amount, \"Tokens transferred does not match the expected amount\");\r\n    }\r\n\r\n    /// @dev transfers funds from an address into this contract\r\n    /// for ETH transfers, we only check that msg.value == _amount, and _callAmount is ignored\r\n    /// for token transfers, the difference between this contract's before and after balance must equal _amount\r\n    /// these checks are assumed to be sufficient in ensuring that the expected amount\r\n    /// of funds were transferred in\r\n    function _transferIn(\r\n        address _assetHash,\r\n        uint256 _amount,\r\n        uint256 _callAmount\r\n    )\r\n        private\r\n    {\r\n        if (_assetHash == ETH_ASSET_HASH) {\r\n            require(msg.value == _amount, \"ETH transferred does not match the expected amount\");\r\n            return;\r\n        }\r\n\r\n        ERC20 token = ERC20(_assetHash);\r\n        uint256 before = token.balanceOf(address(this));\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.transferFrom.selector,\r\n                msg.sender,\r\n                address(this),\r\n                _callAmount\r\n            )\r\n        );\r\n        uint256 transferred = token.balanceOf(address(this)).sub(before);\r\n        require(transferred == _amount, \"Tokens transferred does not match the expected amount\");\r\n    }\r\n\r\n    /// @dev transfers funds from this contract to the _toAddress\r\n    function _transferOut(\r\n        address _toAddress,\r\n        address _assetHash,\r\n        uint256 _amount\r\n    )\r\n        private\r\n    {\r\n        if (_assetHash == ETH_ASSET_HASH) {\r\n            // we use `call` here since the _receivingAddress could be a contract\r\n            // see https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\r\n            // for more info\r\n            (bool success,  ) = _toAddress.call{value: _amount}(\"\");\r\n            require(success, \"Transfer failed\");\r\n            return;\r\n        }\r\n\r\n        ERC20 token = ERC20(_assetHash);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.transfer.selector,\r\n                _toAddress,\r\n                _amount\r\n            )\r\n        );\r\n    }\r\n\r\n    /// @dev validates a signature against the specified user address\r\n    function _validateSignature(\r\n        bytes32 _message,\r\n        address _user,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        private\r\n        pure\r\n    {\r\n        bytes32 prefixedMessage = keccak256(abi.encodePacked(\r\n            \"\\x19Ethereum Signed Message:\\n32\",\r\n            _message\r\n        ));\r\n\r\n        require(\r\n            _user == ecrecover(prefixedMessage, _v, _r, _s),\r\n            \"Invalid signature\"\r\n        );\r\n    }\r\n\r\n    function _serializeTransferTxArgs(TransferTxArgs memory args) private pure returns (bytes memory) {\r\n        bytes memory buff;\r\n        buff = abi.encodePacked(\r\n            ZeroCopySink.WriteVarBytes(args.fromAssetHash),\r\n            ZeroCopySink.WriteVarBytes(args.toAssetHash),\r\n            ZeroCopySink.WriteVarBytes(args.toAddress),\r\n            ZeroCopySink.WriteUint255(args.amount),\r\n            ZeroCopySink.WriteUint255(args.feeAmount),\r\n            ZeroCopySink.WriteVarBytes(args.feeAddress),\r\n            ZeroCopySink.WriteVarBytes(args.fromAddress),\r\n            ZeroCopySink.WriteUint255(args.nonce)\r\n        );\r\n        return buff;\r\n    }\r\n\r\n    function _deserializeTransferTxArgs(bytes memory valueBz) private pure returns (TransferTxArgs memory) {\r\n        TransferTxArgs memory args;\r\n        uint256 off = 0;\r\n        (args.fromAssetHash, off) = ZeroCopySource.NextVarBytes(valueBz, off);\r\n        (args.toAssetHash, off) = ZeroCopySource.NextVarBytes(valueBz, off);\r\n        (args.toAddress, off) = ZeroCopySource.NextVarBytes(valueBz, off);\r\n        (args.amount, off) = ZeroCopySource.NextUint255(valueBz, off);\r\n        return args;\r\n    }\r\n\r\n    function _deserializeRegisterAssetTxArgs(bytes memory valueBz) private pure returns (RegisterAssetTxArgs memory) {\r\n        RegisterAssetTxArgs memory args;\r\n        uint256 off = 0;\r\n        (args.assetHash, off) = ZeroCopySource.NextVarBytes(valueBz, off);\r\n        (args.nativeAssetHash, off) = ZeroCopySource.NextVarBytes(valueBz, off);\r\n        return args;\r\n    }\r\n\r\n    function _deserializeExtensionTxArgs(bytes memory valueBz) private pure returns (ExtensionTxArgs memory) {\r\n        ExtensionTxArgs memory args;\r\n        uint256 off = 0;\r\n        (args.extensionAddress, off) = ZeroCopySource.NextVarBytes(valueBz, off);\r\n        return args;\r\n    }\r\n\r\n    function _getCcm() private view returns (CCM) {\r\n      CCM ccm = CCM(ccmProxy.getEthCrossChainManager());\r\n      return ccm;\r\n    }\r\n\r\n    function _getNextNonce() private returns (uint256) {\r\n      currentNonce = currentNonce.add(1);\r\n      return currentNonce;\r\n    }\r\n\r\n    function _getSalt(\r\n        address _ownerAddress,\r\n        bytes memory _swthAddress\r\n    )\r\n        private\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(\r\n            SALT_PREFIX,\r\n            _ownerAddress,\r\n            _swthAddress\r\n        ));\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(_isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `_isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function _isContract(address account) private view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ccmProxyAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_counterpartChainId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAssetHash\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"toChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"toAssetHash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"toAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"txArgs\",\"type\":\"bytes\"}],\"name\":\"LockEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAssetHash\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"txArgs\",\"type\":\"bytes\"}],\"name\":\"UnlockEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ASSET_HASH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALT_PREFIX\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_argsBz\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_fromChainId\",\"type\":\"uint64\"}],\"name\":\"addExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ccmProxy\",\"outputs\":[{\"internalType\":\"contract CCMProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpartChainId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swthAddress\",\"type\":\"bytes\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetHash\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"extensionTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"extensions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swthAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_bytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"getWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetHash\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_targetProxyHash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_toAssetHash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_feeAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_walletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetHash\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_targetProxyHash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_toAssetHash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_feeAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32[]\",\"name\":\"_rs\",\"type\":\"bytes32[]\"}],\"name\":\"lockFromWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_argsBz\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_fromContractAddr\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_fromChainId\",\"type\":\"uint64\"}],\"name\":\"registerAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_argsBz\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_fromChainId\",\"type\":\"uint64\"}],\"name\":\"removeExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"seenMessages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_argsBz\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_fromContractAddr\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_fromChainId\",\"type\":\"uint64\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LockProxy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005a51e2ebf8d136926b9ca7b59b60464e7c44d2eb0000000000000000000000000000000000000000000000000000000000000005", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cf7112f021f9e2524cc4412d735952b2778a93a00ac3ae2b1657c7f004965357"}, {"Rank": 3457, "Address": "0x418a0b7c33b0424965ffa0f920945cd4cf7b5670", "NameTag": "", "Balance": 2110.08, "Percentage": 0.00179167, "TxCount": 10, "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ninterface IProxy {\r\n    function masterCopy() external view returns (address);\r\n}\r\n\r\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract GnosisSafeProxy {\r\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal singleton;\r\n\r\n    /// @dev Constructor function sets address of singleton contract.\r\n    /// @param _singleton Singleton address.\r\n    constructor(address _singleton) {\r\n        require(_singleton != address(0), \"Invalid singleton address provided\");\r\n        singleton = _singleton;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    fallback() external payable {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, _singleton)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) {\r\n                revert(0, returndatasize())\r\n            }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract GnosisSafeProxyFactory {\r\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param singleton Address of singleton contract.\r\n    /// @param data Payload for message call sent to new proxy contract.\r\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\r\n        proxy = new GnosisSafeProxy(singleton);\r\n        if (data.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, singleton);\r\n    }\r\n\r\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\r\n    function proxyRuntimeCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).runtimeCode;\r\n    }\r\n\r\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\r\n    function proxyCreationCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).creationCode;\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\r\n    ///      This method is only meant as an utility to be called from other methods\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function deployProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) internal returns (GnosisSafeProxy proxy) {\r\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\r\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\r\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\r\n        }\r\n        require(address(proxy) != address(0), \"Create2 call failed\");\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function createProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        if (initializer.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, _singleton);\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\r\n    function createProxyWithCallback(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce,\r\n        IProxyCreationCallback callback\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\r\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\r\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\r\n    }\r\n\r\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\r\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\r\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function calculateCreateProxyWithNonceAddress(\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        revert(string(abi.encodePacked(proxy)));\r\n    }\r\n}\r\n\r\ninterface IProxyCreationCallback {\r\n    function proxyCreated(\r\n        GnosisSafeProxy proxy,\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "GnosisSafeProxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9Db270c1B5E3Bd161E8c8503c55cEABeE709552", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1429297349653a4918076d650332de1a1068c5f3e07c5c82360c277770b9552"}, {"Rank": 3514, "Address": "0x8180d59b7175d4064bdfa8138a58e9babffda44a", "NameTag": "", "Balance": 2057.053517, "Percentage": 0.00174665, "TxCount": 122, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 3538, "Address": "0x728ee922e3393fce0fb0fbfcd3185cf9fec51de2", "NameTag": "", "Balance": 2036.425577, "Percentage": 0.00172913, "TxCount": 51, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 3678, "Address": "0x5bdaf111601f62e2788127e55b23946bb49a936c", "NameTag": "", "Balance": 2000.0, "Percentage": 0.0016982, "TxCount": 7, "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ninterface IProxy {\r\n    function masterCopy() external view returns (address);\r\n}\r\n\r\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract GnosisSafeProxy {\r\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal singleton;\r\n\r\n    /// @dev Constructor function sets address of singleton contract.\r\n    /// @param _singleton Singleton address.\r\n    constructor(address _singleton) {\r\n        require(_singleton != address(0), \"Invalid singleton address provided\");\r\n        singleton = _singleton;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    fallback() external payable {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, _singleton)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) {\r\n                revert(0, returndatasize())\r\n            }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract GnosisSafeProxyFactory {\r\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param singleton Address of singleton contract.\r\n    /// @param data Payload for message call sent to new proxy contract.\r\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\r\n        proxy = new GnosisSafeProxy(singleton);\r\n        if (data.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, singleton);\r\n    }\r\n\r\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\r\n    function proxyRuntimeCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).runtimeCode;\r\n    }\r\n\r\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\r\n    function proxyCreationCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).creationCode;\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\r\n    ///      This method is only meant as an utility to be called from other methods\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function deployProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) internal returns (GnosisSafeProxy proxy) {\r\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\r\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\r\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\r\n        }\r\n        require(address(proxy) != address(0), \"Create2 call failed\");\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function createProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        if (initializer.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, _singleton);\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\r\n    function createProxyWithCallback(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce,\r\n        IProxyCreationCallback callback\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\r\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\r\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\r\n    }\r\n\r\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\r\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\r\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function calculateCreateProxyWithNonceAddress(\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        revert(string(abi.encodePacked(proxy)));\r\n    }\r\n}\r\n\r\ninterface IProxyCreationCallback {\r\n    function proxyCreated(\r\n        GnosisSafeProxy proxy,\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "GnosisSafeProxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9Db270c1B5E3Bd161E8c8503c55cEABeE709552", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1429297349653a4918076d650332de1a1068c5f3e07c5c82360c277770b9552"}, {"Rank": 3885, "Address": "0xd52306eabc2be4e2dc8fbd1f929ac73008430f3f", "NameTag": "LUKSO: MultiSig", "Balance": 1970.84927124, "Percentage": 0.00167345, "TxCount": 42, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 3902, "Address": "0xdd2a08a1c1a28c1a571e098914ca10f2877d9c97", "NameTag": "", "Balance": 1968.76781056, "Percentage": 0.00167169, "TxCount": 98, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 3905, "Address": "0xf0f266f7a481a15607b11d171760d96dcc16e4ed", "NameTag": "", "Balance": 1966.0286, "Percentage": 0.00166936, "TxCount": 12, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 3981, "Address": "0x64258a72f6970e0a227f61a0ad337eba881d0b6e", "NameTag": "", "Balance": 1909.0, "Percentage": 0.00162094, "TxCount": 0, "SourceCode": "pragma solidity 0.5.15;\r\n\r\ncontract Lock {\r\n    // address owner; slot #0\r\n    // address unlockTime; slot #1\r\n    constructor (address owner, uint256 unlockTime) public payable {\r\n        assembly {\r\n            sstore(0x00, owner)\r\n            sstore(0x01, unlockTime)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev        Withdraw function once timestamp has passed unlock time\r\n    */\r\n    function () external payable {\r\n        assembly {\r\n            switch gt(timestamp, sload(0x01))\r\n            case 0 { revert(0, 0) }\r\n            case 1 {\r\n                switch call(gas, sload(0x00), balance(address), 0, 0, 0, 0)\r\n                case 0 { revert(0, 0) }\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Lock", "CompilerVersion": "v0.5.15+commit.6a57276f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007f0d238412e75e45cb69b3cacd4b59f220da2442000000000000000000000000000000000000000000000000000000005ef2fda6", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://13876a131fb612745be13765f49451cc6f0f1d0f7b13e21ac2cf9c7d3aeca189"}, {"Rank": 4095, "Address": "0x67b66c99d3eb37fa76aa3ed1ff33e8e39f0b9c7a", "NameTag": "Alpha Finance Lab: ibETH Token", "Balance": 1822.04394202, "Percentage": 0.0015471, "TxCount": 29427, "SourceCode": "// File: openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity-2.3.0/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity-2.3.0/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity-2.3.0/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity-2.3.0/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity-2.3.0/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: contracts/BankConfig.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface BankConfig {\r\n    /// @dev Return minimum ETH debt size per position.\r\n    function minDebtSize() external view returns (uint256);\r\n\r\n    /// @dev Return the interest rate per second, using 1e18 as denom.\r\n    function getInterestRate(uint256 debt, uint256 floating) external view returns (uint256);\r\n\r\n    /// @dev Return the bps rate for reserve pool.\r\n    function getReservePoolBps() external view returns (uint256);\r\n\r\n    /// @dev Return the bps rate for Avada Kill caster.\r\n    function getKillBps() external view returns (uint256);\r\n\r\n    /// @dev Return whether the given address is a goblin.\r\n    function isGoblin(address goblin) external view returns (bool);\r\n\r\n    /// @dev Return whether the given goblin accepts more debt. Revert on non-goblin.\r\n    function acceptDebt(address goblin) external view returns (bool);\r\n\r\n    /// @dev Return the work factor for the goblin + ETH debt, using 1e4 as denom. Revert on non-goblin.\r\n    function workFactor(address goblin, uint256 debt) external view returns (uint256);\r\n\r\n    /// @dev Return the kill factor for the goblin + ETH debt, using 1e4 as denom. Revert on non-goblin.\r\n    function killFactor(address goblin, uint256 debt) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/Goblin.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface Goblin {\r\n    /// @dev Work on a (potentially new) position. Optionally send ETH back to Bank.\r\n    function work(uint256 id, address user, uint256 debt, bytes calldata data) external payable;\r\n\r\n    /// @dev Re-invest whatever the goblin is working on.\r\n    function reinvest() external;\r\n\r\n    /// @dev Return the amount of ETH wei to get back if we are to liquidate the position.\r\n    function health(uint256 id) external view returns (uint256);\r\n\r\n    /// @dev Liquidate the given position to ETH. Send all ETH back to Bank.\r\n    function liquidate(uint256 id) external;\r\n}\r\n\r\n// File: contracts/SafeToken.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface ERC20Interface {\r\n    function balanceOf(address user) external view returns (uint256);\r\n}\r\n\r\nlibrary SafeToken {\r\n    function myBalance(address token) internal view returns (uint256) {\r\n        return ERC20Interface(token).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOf(address token, address user) internal view returns (uint256) {\r\n        return ERC20Interface(token).balanceOf(user);\r\n    }\r\n\r\n    function safeApprove(address token, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeApprove\");\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeTransfer\");\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeTransferFrom\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call.value(value)(new bytes(0));\r\n        require(success, \"!safeTransferETH\");\r\n    }\r\n}\r\n\r\n// File: contracts/Bank.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Bank is ERC20, ReentrancyGuard, Ownable {\r\n    /// @notice Libraries\r\n    using SafeToken for address;\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Events\r\n    event AddDebt(uint256 indexed id, uint256 debtShare);\r\n    event RemoveDebt(uint256 indexed id, uint256 debtShare);\r\n    event Work(uint256 indexed id, uint256 loan);\r\n    event Kill(uint256 indexed id, address indexed killer, uint256 prize, uint256 left);\r\n\r\n    string public name = \"Interest Bearing ETH\";\r\n    string public symbol = \"ibETH\";\r\n    uint8 public decimals = 18;\r\n\r\n    struct Position {\r\n        address goblin;\r\n        address owner;\r\n        uint256 debtShare;\r\n    }\r\n\r\n    BankConfig public config;\r\n    mapping (uint256 => Position) public positions;\r\n    uint256 public nextPositionID = 1;\r\n\r\n    uint256 public glbDebtShare;\r\n    uint256 public glbDebtVal;\r\n    uint256 public lastAccrueTime;\r\n    uint256 public reservePool;\r\n\r\n    /// @dev Require that the caller must be an EOA account to avoid flash loans.\r\n    modifier onlyEOA() {\r\n        require(msg.sender == tx.origin, \"not eoa\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Add more debt to the global debt pool.\r\n    modifier accrue(uint256 msgValue) {\r\n        if (now > lastAccrueTime) {\r\n            uint256 interest = pendingInterest(msgValue);\r\n            uint256 toReserve = interest.mul(config.getReservePoolBps()).div(10000);\r\n            reservePool = reservePool.add(toReserve);\r\n            glbDebtVal = glbDebtVal.add(interest);\r\n            lastAccrueTime = now;\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(BankConfig _config) public {\r\n        config = _config;\r\n        lastAccrueTime = now;\r\n    }\r\n\r\n    /// @dev Return the pending interest that will be accrued in the next call.\r\n    /// @param msgValue Balance value to subtract off address(this).balance when called from payable functions.\r\n    function pendingInterest(uint256 msgValue) public view returns (uint256) {\r\n        if (now > lastAccrueTime) {\r\n            uint256 timePast = now.sub(lastAccrueTime);\r\n            uint256 balance = address(this).balance.sub(msgValue);\r\n            uint256 ratePerSec = config.getInterestRate(glbDebtVal, balance);\r\n            return ratePerSec.mul(glbDebtVal).mul(timePast).div(1e18);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /// @dev Return the ETH debt value given the debt share. Be careful of unaccrued interests.\r\n    /// @param debtShare The debt share to be converted.\r\n    function debtShareToVal(uint256 debtShare) public view returns (uint256) {\r\n        if (glbDebtShare == 0) return debtShare; // When there's no share, 1 share = 1 val.\r\n        return debtShare.mul(glbDebtVal).div(glbDebtShare);\r\n    }\r\n\r\n    /// @dev Return the debt share for the given debt value. Be careful of unaccrued interests.\r\n    /// @param debtVal The debt value to be converted.\r\n    function debtValToShare(uint256 debtVal) public view returns (uint256) {\r\n        if (glbDebtShare == 0) return debtVal; // When there's no share, 1 share = 1 val.\r\n        return debtVal.mul(glbDebtShare).div(glbDebtVal);\r\n    }\r\n\r\n    /// @dev Return ETH value and debt of the given position. Be careful of unaccrued interests.\r\n    /// @param id The position ID to query.\r\n    function positionInfo(uint256 id) public view returns (uint256, uint256) {\r\n        Position storage pos = positions[id];\r\n        return (Goblin(pos.goblin).health(id), debtShareToVal(pos.debtShare));\r\n    }\r\n\r\n    /// @dev Return the total ETH entitled to the token holders. Be careful of unaccrued interests.\r\n    function totalETH() public view returns (uint256) {\r\n        return address(this).balance.add(glbDebtVal).sub(reservePool);\r\n    }\r\n\r\n    /// @dev Add more ETH to the bank. Hope to get some good returns.\r\n    function deposit() external payable accrue(msg.value) nonReentrant {\r\n        uint256 total = totalETH().sub(msg.value);\r\n        uint256 share = total == 0 ? msg.value : msg.value.mul(totalSupply()).div(total);\r\n        _mint(msg.sender, share);\r\n    }\r\n\r\n    /// @dev Withdraw ETH from the bank by burning the share tokens.\r\n    function withdraw(uint256 share) external accrue(0) nonReentrant {\r\n        uint256 amount = share.mul(totalETH()).div(totalSupply());\r\n        _burn(msg.sender, share);\r\n        SafeToken.safeTransferETH(msg.sender, amount);\r\n    }\r\n\r\n    /// @dev Create a new farming position to unlock your yield farming potential.\r\n    /// @param id The ID of the position to unlock the earning. Use ZERO for new position.\r\n    /// @param goblin The address of the authorized goblin to work for this position.\r\n    /// @param loan The amount of ETH to borrow from the pool.\r\n    /// @param maxReturn The max amount of ETH to return to the pool.\r\n    /// @param data The calldata to pass along to the goblin for more working context.\r\n    function work(uint256 id, address goblin, uint256 loan, uint256 maxReturn, bytes calldata data)\r\n        external payable\r\n        onlyEOA accrue(msg.value) nonReentrant\r\n    {\r\n        // 1. Sanity check the input position, or add a new position of ID is 0.\r\n        if (id == 0) {\r\n            id = nextPositionID++;\r\n            positions[id].goblin = goblin;\r\n            positions[id].owner = msg.sender;\r\n        } else {\r\n            require(id < nextPositionID, \"bad position id\");\r\n            require(positions[id].goblin == goblin, \"bad position goblin\");\r\n            require(positions[id].owner == msg.sender, \"not position owner\");\r\n        }\r\n        emit Work(id, loan);\r\n        // 2. Make sure the goblin can accept more debt and remove the existing debt.\r\n        require(config.isGoblin(goblin), \"not a goblin\");\r\n        require(loan == 0 || config.acceptDebt(goblin), \"goblin not accept more debt\");\r\n        uint256 debt = _removeDebt(id).add(loan);\r\n        // 3. Perform the actual work, using a new scope to avoid stack-too-deep errors.\r\n        uint256 back;\r\n        {\r\n            uint256 sendETH = msg.value.add(loan);\r\n            require(sendETH <= address(this).balance, \"insufficient ETH in the bank\");\r\n            uint256 beforeETH = address(this).balance.sub(sendETH);\r\n            Goblin(goblin).work.value(sendETH)(id, msg.sender, debt, data);\r\n            back = address(this).balance.sub(beforeETH);\r\n        }\r\n        // 4. Check and update position debt.\r\n        uint256 lessDebt = Math.min(debt, Math.min(back, maxReturn));\r\n        debt = debt.sub(lessDebt);\r\n        if (debt > 0) {\r\n            require(debt >= config.minDebtSize(), \"too small debt size\");\r\n            uint256 health = Goblin(goblin).health(id);\r\n            uint256 workFactor = config.workFactor(goblin, debt);\r\n            require(health.mul(workFactor) >= debt.mul(10000), \"bad work factor\");\r\n            _addDebt(id, debt);\r\n        }\r\n        // 5. Return excess ETH back.\r\n        if (back > lessDebt) SafeToken.safeTransferETH(msg.sender, back - lessDebt);\r\n    }\r\n\r\n    /// @dev Kill the given to the position. Liquidate it immediately if killFactor condition is met.\r\n    /// @param id The position ID to be killed.\r\n    function kill(uint256 id) external onlyEOA accrue(0) nonReentrant {\r\n        // 1. Verify that the position is eligible for liquidation.\r\n        Position storage pos = positions[id];\r\n        require(pos.debtShare > 0, \"no debt\");\r\n        uint256 debt = _removeDebt(id);\r\n        uint256 health = Goblin(pos.goblin).health(id);\r\n        uint256 killFactor = config.killFactor(pos.goblin, debt);\r\n        require(health.mul(killFactor) < debt.mul(10000), \"can't liquidate\");\r\n        // 2. Perform liquidation and compute the amount of ETH received.\r\n        uint256 beforeETH = address(this).balance;\r\n        Goblin(pos.goblin).liquidate(id);\r\n        uint256 back = address(this).balance.sub(beforeETH);\r\n        uint256 prize = back.mul(config.getKillBps()).div(10000);\r\n        uint256 rest = back.sub(prize);\r\n        // 3. Clear position debt and return funds to liquidator and position owner.\r\n        if (prize > 0) SafeToken.safeTransferETH(msg.sender, prize);\r\n        uint256 left = rest > debt ? rest - debt : 0;\r\n        if (left > 0) SafeToken.safeTransferETH(pos.owner, left);\r\n        emit Kill(id, msg.sender, prize, left);\r\n    }\r\n\r\n    /// @dev Internal function to add the given debt value to the given position.\r\n    function _addDebt(uint256 id, uint256 debtVal) internal {\r\n        Position storage pos = positions[id];\r\n        uint256 debtShare = debtValToShare(debtVal);\r\n        pos.debtShare = pos.debtShare.add(debtShare);\r\n        glbDebtShare = glbDebtShare.add(debtShare);\r\n        glbDebtVal = glbDebtVal.add(debtVal);\r\n        emit AddDebt(id, debtShare);\r\n    }\r\n\r\n    /// @dev Internal function to clear the debt of the given position. Return the debt value.\r\n    function _removeDebt(uint256 id) internal returns (uint256) {\r\n        Position storage pos = positions[id];\r\n        uint256 debtShare = pos.debtShare;\r\n        if (debtShare > 0) {\r\n            uint256 debtVal = debtShareToVal(debtShare);\r\n            pos.debtShare = 0;\r\n            glbDebtShare = glbDebtShare.sub(debtShare);\r\n            glbDebtVal = glbDebtVal.sub(debtVal);\r\n            emit RemoveDebt(id, debtShare);\r\n            return debtVal;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /// @dev Update bank configuration to a new address. Must only be called by owner.\r\n    /// @param _config The new configurator address.\r\n    function updateConfig(BankConfig _config) external onlyOwner {\r\n        config = _config;\r\n    }\r\n\r\n    /// @dev Withdraw ETH reserve for underwater positions to the given address.\r\n    /// @param to The address to transfer ETH to.\r\n    /// @param value The number of ETH tokens to withdraw. Must not exceed `reservePool`.\r\n    function withdrawReserve(address to, uint256 value) external onlyOwner nonReentrant {\r\n        reservePool = reservePool.sub(value);\r\n        SafeToken.safeTransferETH(to, value);\r\n    }\r\n\r\n    /// @dev Reduce ETH reserve, effectively giving them to the depositors.\r\n    /// @param value The number of ETH reserve to reduce.\r\n    function reduceReserve(uint256 value) external onlyOwner {\r\n        reservePool = reservePool.sub(value);\r\n    }\r\n\r\n    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.\r\n    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.\r\n    /// @param to The address to send the tokens to.\r\n    /// @param value The number of tokens to transfer to `to`.\r\n    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {\r\n        token.safeTransfer(to, value);\r\n    }\r\n\r\n    /// @dev Fallback function to accept ETH. Goblins will send ETH back the pool.\r\n    function() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract BankConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"name\":\"AddDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"killer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"}],\"name\":\"Kill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"name\":\"RemoveDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"}],\"name\":\"Work\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract BankConfig\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"name\":\"debtShareToVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtVal\",\"type\":\"uint256\"}],\"name\":\"debtValToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"glbDebtShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"glbDebtVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastAccrueTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPositionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"pendingInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"positionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"goblin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"reduceReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BankConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"updateConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"goblin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"work\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Bank", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000061b7379fe7d3367969d7c37f644a7ce0643a7f68", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a00a3dc779d6fcd2e364453fd19c2202a0def8ef9bd027b1ed979ded1688e324"}, {"Rank": 4099, "Address": "0xf786c34106762ab4eeb45a51b42a62470e9d5332", "NameTag": "", "Balance": 1818.10151562, "Percentage": 0.00154375, "TxCount": 18418, "SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-02-28\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.8.1;\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\utils\\Address.sol\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract fETH is IERC20 {\r\n    using Address for address;\r\n    enum TxType { FromExcluded, ToExcluded, BothExcluded, Standard }\r\n\r\n    mapping (address => uint256) private rBnbBalance;\r\n    mapping (address => uint256) private tBnbBalance;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    EnumerableSet.AddressSet excluded;\r\n\r\n    uint256 private tBnbSupply;\r\n    uint256 private rBnbSupply;\r\n    uint256 private feesAccrued;\r\n \r\n    string private _name = 'FEG Wrapped ETH'; \r\n    string private _symbol = 'fETH';\r\n    uint8  private _decimals = 18;\r\n    \r\n    address private op;\r\n    address private op2;\r\n    \r\n    event  Deposit(address indexed dst, uint amount);\r\n    event  Withdrawal(address indexed src, uint amount);\r\n\r\n    receive() external payable {\r\n        deposit();\r\n    }\r\n\r\n    constructor () {\r\n        op = address(0x4c9BC793716e8dC05d1F48D8cA8f84318Ec3043C);\r\n        op2 = op;\r\n        EnumerableSet.add(excluded, address(0)); // stablity - zen.\r\n        emit Transfer(address(0), msg.sender, 0);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return tBnbSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (EnumerableSet.contains(excluded, account)) return tBnbBalance[account];\r\n        (uint256 r, uint256 t) = currentSupply();\r\n        return (rBnbBalance[account] * t)  / r;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function isExcluded(address account) public view returns (bool) {\r\n        return EnumerableSet.contains(excluded, account);\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return feesAccrued;\r\n    }\r\n    \r\n    function deposit() public payable {\r\n        require(msg.value > 0, \"can't deposit nothing\");\r\n        (uint256 r, uint256 t) = currentSupply();\r\n        tBnbSupply += msg.value;\r\n        uint256 fee = msg.value / 100; \r\n        uint256 df = fee / 10;\r\n        uint256 net = fee != 0 ? (msg.value - (fee)) : msg.value;\r\n        if(isExcluded(msg.sender)){\r\n            tBnbBalance[msg.sender] += (msg.value - fee);\r\n        } \r\n        feesAccrued += fee;\r\n        rBnbBalance[op] += ((df * r) / t);\r\n        rBnbSupply += (((net + df) * r) / t);\r\n        rBnbBalance[msg.sender] += ((net * r) / t);\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint amt) public {\r\n        require(balanceOf(msg.sender) >= amt && amt <= totalSupply(), \"invalid amt\");\r\n        (uint256 r, uint256 t) = currentSupply();\r\n        uint256 fee = amt / 100;\r\n        uint256 wf = fee / 8;\r\n        uint256 net = amt - fee;\r\n        if(isExcluded(msg.sender)) {\r\n            tBnbBalance[msg.sender] -= amt;\r\n            rBnbBalance[msg.sender] -= ((amt * r) / t);\r\n        } else {\r\n            rBnbBalance[msg.sender] -= ((amt * r) / t);\r\n        }\r\n        tBnbSupply -= (net + wf);\r\n        rBnbSupply -= (((net + wf) * r ) / t);\r\n        rBnbBalance[op] += ((wf * r) / t);\r\n        feesAccrued += wf;\r\n        payable(msg.sender).transfer(net); \r\n        emit Withdrawal(msg.sender, net);\r\n    }\r\n    \r\n    function rBnbToEveryone(uint256 amt) public {\r\n        require(!isExcluded(msg.sender), \"not allowed\");\r\n        (uint256 r, uint256 t) = currentSupply();\r\n        rBnbBalance[msg.sender] -= ((amt * r) / t);\r\n        rBnbSupply -= ((amt * r) / t);\r\n        feesAccrued += amt;\r\n    }\r\n\r\n    function excludeFromFees(address account) external {\r\n        require(msg.sender == op2, \"op only\");\r\n        require(!EnumerableSet.contains(excluded, account), \"address excluded\");\r\n        if(rBnbBalance[account] > 0) {\r\n            (uint256 r, uint256 t) = currentSupply();\r\n            tBnbBalance[account] = (rBnbBalance[account] * (t)) / (r);\r\n        }\r\n        EnumerableSet.add(excluded, account);\r\n    }\r\n\r\n    function includeInFees(address account) external {\r\n        require(msg.sender == op2, \"op only\");\r\n        require(EnumerableSet.contains(excluded, account), \"address excluded\");\r\n        tBnbBalance[account] = 0;\r\n        EnumerableSet.remove(excluded, account);\r\n    }\r\n    \r\n    function tBnbFromrBnb(uint256 rBnbAmount) external view returns (uint256) {\r\n        (uint256 r, uint256 t) = currentSupply();\r\n        return (rBnbAmount * t) / r;\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function getTtype(address sender, address recipient) internal view returns (TxType t) {\r\n        bool isSenderExcluded = EnumerableSet.contains(excluded, sender);\r\n        bool isRecipientExcluded = EnumerableSet.contains(excluded, recipient);\r\n        if (isSenderExcluded && !isRecipientExcluded) {\r\n            t = TxType.FromExcluded;\r\n        } else if (!isSenderExcluded && isRecipientExcluded) {\r\n            t = TxType.ToExcluded;\r\n        } else if (!isSenderExcluded && !isRecipientExcluded) {\r\n            t = TxType.Standard;\r\n        } else if (isSenderExcluded && isRecipientExcluded) {\r\n            t = TxType.BothExcluded;\r\n        } else {\r\n            t = TxType.Standard;\r\n        }\r\n        return t;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amt) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amt > 0, \"Transfer amt must be greater than zero\");\r\n        (uint256 r, uint256 t) = currentSupply();\r\n        uint256 fee = amt / 100;\r\n        TxType tt = getTtype(sender, recipient);\r\n        if (tt == TxType.ToExcluded) {\r\n            rBnbBalance[sender] -= ((amt * r) / t);\r\n            tBnbBalance[recipient] += (amt - fee);\r\n            rBnbBalance[recipient] += (((amt - fee) * r) / t);\r\n        } else if (tt == TxType.FromExcluded) {\r\n            tBnbBalance[sender] -= (amt);\r\n            rBnbBalance[sender] -= ((amt * r) / t);\r\n            rBnbBalance[recipient] += (((amt - fee) * r) / t);\r\n        } else if (tt == TxType.BothExcluded) {\r\n            tBnbBalance[sender] -= (amt);\r\n            rBnbBalance[sender] -= ((amt * r) / t);\r\n            tBnbBalance[recipient] += (amt - fee);\r\n            rBnbBalance[recipient] += (((amt - fee) * r) / t);\r\n        } else {\r\n            rBnbBalance[sender] -= ((amt * r) / t);\r\n            rBnbBalance[recipient] += (((amt - fee) * r) / t);\r\n        }\r\n        rBnbSupply  -= ((fee * r) / t);\r\n        feesAccrued += fee;\r\n        emit Transfer(sender, recipient, amt - fee);\r\n    }\r\n\r\n    function currentSupply() public view returns(uint256, uint256) {\r\n        if(rBnbSupply == 0 || tBnbSupply == 0) return (1000000000, 1);\r\n        uint256 rSupply = rBnbSupply;\r\n        uint256 tSupply = tBnbSupply;\r\n        for (uint256 i = 0; i < EnumerableSet.length(excluded); i++) {\r\n            if (rBnbBalance[EnumerableSet.at(excluded, i)] > rSupply || tBnbBalance[EnumerableSet.at(excluded, i)] > tSupply) return (rBnbSupply, tBnbSupply);\r\n            rSupply -= (rBnbBalance[EnumerableSet.at(excluded, i)]);\r\n            tSupply -= (tBnbBalance[EnumerableSet.at(excluded, i)]);\r\n        }\r\n        if (rSupply < rBnbSupply / tBnbSupply) return (rBnbSupply, tBnbSupply);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function setOp(address opper, address opper2) external {\r\n        require(msg.sender == op, \"only op can call\");\r\n        op = opper;\r\n        op2 = opper2;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"rBnbToEveryone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opper2\",\"type\":\"address\"}],\"name\":\"setOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rBnbAmount\",\"type\":\"uint256\"}],\"name\":\"tBnbFromrBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "fETH", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d521697d6e725482bdd76a2df9bf88279f042a93e0783dcdde9430263647bca"}, {"Rank": 4183, "Address": "0x57608aafd4b21c608427ac89794fbdc33037c1cd", "NameTag": "", "Balance": 1769.4, "Percentage": 0.0015024, "TxCount": 5, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 4186, "Address": "0xe05268f9030a81871e2b91b29a296855076894eb", "NameTag": "", "Balance": 1767.814, "Percentage": 0.00150106, "TxCount": 11, "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ninterface IProxy {\r\n    function masterCopy() external view returns (address);\r\n}\r\n\r\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract GnosisSafeProxy {\r\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal singleton;\r\n\r\n    /// @dev Constructor function sets address of singleton contract.\r\n    /// @param _singleton Singleton address.\r\n    constructor(address _singleton) {\r\n        require(_singleton != address(0), \"Invalid singleton address provided\");\r\n        singleton = _singleton;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    fallback() external payable {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, _singleton)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) {\r\n                revert(0, returndatasize())\r\n            }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract GnosisSafeProxyFactory {\r\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param singleton Address of singleton contract.\r\n    /// @param data Payload for message call sent to new proxy contract.\r\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\r\n        proxy = new GnosisSafeProxy(singleton);\r\n        if (data.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, singleton);\r\n    }\r\n\r\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\r\n    function proxyRuntimeCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).runtimeCode;\r\n    }\r\n\r\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\r\n    function proxyCreationCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).creationCode;\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\r\n    ///      This method is only meant as an utility to be called from other methods\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function deployProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) internal returns (GnosisSafeProxy proxy) {\r\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\r\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\r\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\r\n        }\r\n        require(address(proxy) != address(0), \"Create2 call failed\");\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function createProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        if (initializer.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, _singleton);\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\r\n    function createProxyWithCallback(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce,\r\n        IProxyCreationCallback callback\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\r\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\r\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\r\n    }\r\n\r\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\r\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\r\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function calculateCreateProxyWithNonceAddress(\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        revert(string(abi.encodePacked(proxy)));\r\n    }\r\n}\r\n\r\ninterface IProxyCreationCallback {\r\n    function proxyCreated(\r\n        GnosisSafeProxy proxy,\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "GnosisSafeProxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9Db270c1B5E3Bd161E8c8503c55cEABeE709552", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1429297349653a4918076d650332de1a1068c5f3e07c5c82360c277770b9552"}, {"Rank": 4275, "Address": "0x3fd8462e467708e5d1dd4ad6becf4058d4ccbd8d", "NameTag": "", "Balance": 1707.8780634, "Percentage": 0.00145016, "TxCount": 129, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 4302, "Address": "0x0184670b561ce2a85c97b11b06116c2b0a044663", "NameTag": "", "Balance": 1695.40204354, "Percentage": 0.00143957, "TxCount": 11, "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ninterface IProxy {\r\n    function masterCopy() external view returns (address);\r\n}\r\n\r\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract GnosisSafeProxy {\r\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal singleton;\r\n\r\n    /// @dev Constructor function sets address of singleton contract.\r\n    /// @param _singleton Singleton address.\r\n    constructor(address _singleton) {\r\n        require(_singleton != address(0), \"Invalid singleton address provided\");\r\n        singleton = _singleton;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    fallback() external payable {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, _singleton)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) {\r\n                revert(0, returndatasize())\r\n            }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract GnosisSafeProxyFactory {\r\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param singleton Address of singleton contract.\r\n    /// @param data Payload for message call sent to new proxy contract.\r\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\r\n        proxy = new GnosisSafeProxy(singleton);\r\n        if (data.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, singleton);\r\n    }\r\n\r\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\r\n    function proxyRuntimeCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).runtimeCode;\r\n    }\r\n\r\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\r\n    function proxyCreationCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).creationCode;\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\r\n    ///      This method is only meant as an utility to be called from other methods\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function deployProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) internal returns (GnosisSafeProxy proxy) {\r\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\r\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\r\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\r\n        }\r\n        require(address(proxy) != address(0), \"Create2 call failed\");\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function createProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        if (initializer.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, _singleton);\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\r\n    function createProxyWithCallback(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce,\r\n        IProxyCreationCallback callback\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\r\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\r\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\r\n    }\r\n\r\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\r\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\r\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function calculateCreateProxyWithNonceAddress(\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        revert(string(abi.encodePacked(proxy)));\r\n    }\r\n}\r\n\r\ninterface IProxyCreationCallback {\r\n    function proxyCreated(\r\n        GnosisSafeProxy proxy,\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "GnosisSafeProxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9Db270c1B5E3Bd161E8c8503c55cEABeE709552", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1429297349653a4918076d650332de1a1068c5f3e07c5c82360c277770b9552"}, {"Rank": 4383, "Address": "0x4039e1c58b27298d92e69d5bf215378e4f8544a5", "NameTag": "", "Balance": 1635.69594636, "Percentage": 0.00138887, "TxCount": 9, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 4404, "Address": "0xee7ad892fdf8d95223d7e94e4ff42e9d0cfecafa", "NameTag": "", "Balance": 1628.9746594, "Percentage": 0.00138317, "TxCount": 9, "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ninterface IProxy {\r\n    function masterCopy() external view returns (address);\r\n}\r\n\r\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract GnosisSafeProxy {\r\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal singleton;\r\n\r\n    /// @dev Constructor function sets address of singleton contract.\r\n    /// @param _singleton Singleton address.\r\n    constructor(address _singleton) {\r\n        require(_singleton != address(0), \"Invalid singleton address provided\");\r\n        singleton = _singleton;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    fallback() external payable {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, _singleton)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) {\r\n                revert(0, returndatasize())\r\n            }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract GnosisSafeProxyFactory {\r\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param singleton Address of singleton contract.\r\n    /// @param data Payload for message call sent to new proxy contract.\r\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\r\n        proxy = new GnosisSafeProxy(singleton);\r\n        if (data.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, singleton);\r\n    }\r\n\r\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\r\n    function proxyRuntimeCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).runtimeCode;\r\n    }\r\n\r\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\r\n    function proxyCreationCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).creationCode;\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\r\n    ///      This method is only meant as an utility to be called from other methods\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function deployProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) internal returns (GnosisSafeProxy proxy) {\r\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\r\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\r\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\r\n        }\r\n        require(address(proxy) != address(0), \"Create2 call failed\");\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function createProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        if (initializer.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, _singleton);\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\r\n    function createProxyWithCallback(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce,\r\n        IProxyCreationCallback callback\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\r\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\r\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\r\n    }\r\n\r\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\r\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\r\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function calculateCreateProxyWithNonceAddress(\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        revert(string(abi.encodePacked(proxy)));\r\n    }\r\n}\r\n\r\ninterface IProxyCreationCallback {\r\n    function proxyCreated(\r\n        GnosisSafeProxy proxy,\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "GnosisSafeProxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9Db270c1B5E3Bd161E8c8503c55cEABeE709552", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1429297349653a4918076d650332de1a1068c5f3e07c5c82360c277770b9552"}, {"Rank": 4409, "Address": "0xc6d4ab7043f59dd9bfac40ebe10eecdc2b95ab08", "NameTag": "", "Balance": 1625.69752267, "Percentage": 0.00138038, "TxCount": 4, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 4448, "Address": "0x91d65caf4b9562779e39a30ea492bd4b02a9acbb", "NameTag": "", "Balance": 1607.93130294, "Percentage": 0.0013653, "TxCount": 22, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 4459, "Address": "0x3e3c08a8c022b0fd7b90765a712885e3d5cca842", "NameTag": "", "Balance": 1603.009, "Percentage": 0.00136112, "TxCount": 12, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 4508, "Address": "0xaae014af95d811ad7dbff60209e74551a338f64c", "NameTag": "", "Balance": 1579.88741682, "Percentage": 0.00134149, "TxCount": 24, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 4546, "Address": "0x8b4334d4812c530574bd4f2763fcd22de94a969b", "NameTag": "", "Balance": 1554.15046363, "Percentage": 0.00131963, "TxCount": 86, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x34cfac646f301356faa8b21e94227e3583fe3f5f", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 4585, "Address": "0x022609207888652fafc17a5e1304c1beecd35530", "NameTag": "", "Balance": 1534.53596496, "Percentage": 0.00130298, "TxCount": 33, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 4611, "Address": "0x0feccb11c5b61b3922c511d0f002c0b72d770dce", "NameTag": "", "Balance": 1523.40589893, "Percentage": 0.00129353, "TxCount": 2652, "SourceCode": "// File: interfaces/DelegatorInterface.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract DelegationStorage {\r\n    /**\r\n     * @notice Implementation address for this contract\r\n     */\r\n    address public implementation;\r\n}\r\n\r\nabstract contract DelegatorInterface is DelegationStorage {\r\n    /**\r\n     * @notice Emitted when implementation is changed\r\n     */\r\n    event NewImplementation(\r\n        address oldImplementation,\r\n        address newImplementation\r\n    );\r\n\r\n    /**\r\n     * @notice Called by the admin to update the implementation of the delegator\r\n     * @param implementation_ The address of the new implementation for delegation\r\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\r\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\r\n     */\r\n    function _setImplementation(\r\n        address implementation_,\r\n        bool allowResign,\r\n        bytes memory becomeImplementationData\r\n    ) public virtual;\r\n}\r\n\r\nabstract contract DelegateInterface is DelegationStorage {\r\n    /**\r\n     * @notice Called by the delegator on a delegate to initialize it for duty\r\n     * @dev Should revert if any issues arise which make it unfit for delegation\r\n     * @param data The encoded bytes data for any initialization\r\n     */\r\n    function _becomeImplementation(bytes memory data) public virtual;\r\n\r\n    /**\r\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\r\n     */\r\n    function _resignImplementation() public virtual;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/ActivityBase.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract ActivityBase is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    address public admin;\r\n    \r\n    address public marketingFund;\r\n    // token as the unit of measurement\r\n    address public WETHToken;\r\n    // invitee's supply 5% deposit weight to its invitor\r\n    uint256 public constant INVITEE_WEIGHT = 20; \r\n    // invitee's supply 10% deposit weight to its invitor\r\n    uint256 public constant INVITOR_WEIGHT = 10;\r\n\r\n    // The block number when SHARD mining starts.\r\n    uint256 public startBlock;\r\n\r\n    // dev fund\r\n    uint256 public userDividendWeight;\r\n    uint256 public devDividendWeight;\r\n    address public developerDAOFund;\r\n\r\n    // deposit limit\r\n    uint256 public amountFeeRateNumerator;\r\n    uint256 public amountfeeRateDenominator;\r\n\r\n    // contract sender fee rate\r\n    uint256 public contractFeeRateNumerator;\r\n    uint256 public contractFeeRateDenominator;\r\n\r\n    // Info of each user is Contract sender\r\n    mapping (uint256 => mapping (address => bool)) public isUserContractSender;\r\n    mapping (uint256 => uint256) public poolTokenAmountLimit;\r\n\r\n    function setDividendWeight(uint256 _userDividendWeight, uint256 _devDividendWeight) public virtual{\r\n        checkAdmin();\r\n        require(\r\n            _userDividendWeight != 0 && _devDividendWeight != 0,\r\n            \"invalid input\"\r\n        );\r\n        userDividendWeight = _userDividendWeight;\r\n        devDividendWeight = _devDividendWeight;\r\n    }\r\n\r\n    function setDeveloperDAOFund(address _developerDAOFund) public virtual onlyOwner {\r\n        developerDAOFund = _developerDAOFund;\r\n    }\r\n\r\n    function setTokenAmountLimit(uint256 _pid, uint256 _tokenAmountLimit) public virtual {\r\n        checkAdmin();\r\n        poolTokenAmountLimit[_pid] = _tokenAmountLimit;\r\n    }\r\n\r\n    function setTokenAmountLimitFeeRate(uint256 _feeRateNumerator, uint256 _feeRateDenominator) public virtual {\r\n        checkAdmin();\r\n        require(\r\n            _feeRateDenominator >= _feeRateNumerator, \"invalid input\"\r\n        );\r\n        amountFeeRateNumerator = _feeRateNumerator;\r\n        amountfeeRateDenominator = _feeRateDenominator;\r\n    }\r\n\r\n    function setContracSenderFeeRate(uint256 _feeRateNumerator, uint256 _feeRateDenominator) public virtual {\r\n        checkAdmin();\r\n        require(\r\n            _feeRateDenominator >= _feeRateNumerator, \"invalid input\"\r\n        );\r\n        contractFeeRateNumerator = _feeRateNumerator;\r\n        contractFeeRateDenominator = _feeRateDenominator;\r\n    }\r\n\r\n    function setStartBlock(uint256 _startBlock) public virtual onlyOwner { \r\n        require(startBlock > block.number, \"invalid start block\");\r\n        startBlock = _startBlock;\r\n        updateAfterModifyStartBlock(_startBlock);\r\n    }\r\n\r\n    function transferAdmin(address _admin) public virtual {\r\n        checkAdmin();\r\n        admin = _admin;\r\n    }\r\n\r\n    function setMarketingFund(address _marketingFund) public virtual onlyOwner {\r\n        marketingFund = _marketingFund;\r\n    }\r\n\r\n    function updateAfterModifyStartBlock(uint256 _newStartBlock) internal virtual{\r\n    }\r\n\r\n    function calculateDividend(uint256 _pending, uint256 _pid, uint256 _userAmount, bool _isContractSender) internal view returns (uint256 _marketingFundDividend, uint256 _devDividend, uint256 _userDividend){\r\n        uint256 fee = 0;\r\n        if(_isContractSender && contractFeeRateDenominator > 0){\r\n            fee = _pending.mul(contractFeeRateNumerator).div(contractFeeRateDenominator);\r\n            _marketingFundDividend = _marketingFundDividend.add(fee);\r\n            _pending = _pending.sub(fee);\r\n        }\r\n        if(poolTokenAmountLimit[_pid] > 0 && amountfeeRateDenominator > 0 && _userAmount >= poolTokenAmountLimit[_pid]){\r\n            fee = _pending.mul(amountFeeRateNumerator).div(amountfeeRateDenominator);\r\n            _marketingFundDividend =_marketingFundDividend.add(fee);\r\n            _pending = _pending.sub(fee);\r\n        }\r\n        if(devDividendWeight > 0){\r\n            fee = _pending.mul(devDividendWeight).div(devDividendWeight.add(userDividendWeight));\r\n            _devDividend = _devDividend.add(fee);\r\n            _pending = _pending.sub(fee);\r\n        }\r\n        _userDividend = _pending;\r\n    }\r\n\r\n    function judgeContractSender(uint256 _pid) internal {\r\n        if(msg.sender != tx.origin){\r\n            isUserContractSender[_pid][msg.sender] = true;\r\n        }\r\n    }\r\n\r\n    function checkAdmin() internal view {\r\n        require(admin == msg.sender, \"invalid authorized\");\r\n    }\r\n}\r\n\r\n// File: interfaces/IInvitation.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IInvitation{\r\n\r\n    function acceptInvitation(address _invitor) external;\r\n\r\n    function getInvitation(address _sender) external view returns(address _invitor, address[] memory _invitees, bool _isWithdrawn);\r\n    \r\n}\r\n\r\n// File: contracts/MarketingMining.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MarketingMining is ActivityBase{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How much token the user has provided.\r\n        uint256 originWeight; //initial weight\r\n        uint256 modifiedWeight; //take the invitation relationship into consideration.\r\n        uint256 revenue;\r\n        uint256 userDividend;\r\n        uint256 devDividend;\r\n        uint256 marketingFundDividend;\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        bool withdrawnState;\r\n        bool isUsed;\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        uint256 tokenAmount;  // lock amount\r\n        IERC20 token;   // uniswapPair contract\r\n        uint256 allocPoint;\r\n        uint256 accumulativeDividend;\r\n        uint256 lastDividendHeight;  // last dividend block height\r\n        uint256 accShardPerWeight;\r\n        uint256 totalWeight;\r\n    }\r\n\r\n    uint256 public constant BONUS_MULTIPLIER = 10;\r\n    // The SHARD TOKEN!\r\n    IERC20 public SHARD;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => uint256)) public userInviteeTotalAmount; // total invitee weight\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Total allocation poitns. Must be the sum of all allocation poishard in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // SHARD tokens created per block.\r\n    uint256 public SHDPerBlock = 1045 * (1e16);\r\n\r\n    //get invitation relationship\r\n    IInvitation public invitation;\r\n\r\n    uint256 public bonusEndBlock;\r\n    uint256 public totalAvailableDividend;\r\n    \r\n    bool public isInitialized;\r\n    bool public isDepositAvailable;\r\n    bool public isRevenueWithdrawable;\r\n\r\n    event AddPool(uint256 indexed pid, address tokenAddress);\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 weight);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    function initialize(\r\n        IERC20 _SHARD,\r\n        IInvitation _invitation,\r\n        uint256 _bonusEndBlock,\r\n        uint256 _startBlock, \r\n        uint256 _SHDPerBlock,\r\n        address _developerDAOFund,\r\n        address _marketingFund,\r\n        address _weth\r\n    ) public virtual onlyOwner{\r\n        require(!isInitialized, \"contract has been initialized\");\r\n        invitation = _invitation;\r\n        bonusEndBlock = _bonusEndBlock;\r\n        if (_startBlock < block.number) {\r\n            startBlock = block.number;\r\n        } else {\r\n            startBlock = _startBlock;\r\n        }\r\n        SHARD = _SHARD;\r\n        developerDAOFund = _developerDAOFund;\r\n        marketingFund = _marketingFund;\r\n        WETHToken = _weth;\r\n        if(_SHDPerBlock > 0){\r\n            SHDPerBlock = _SHDPerBlock;\r\n        }\r\n        userDividendWeight = 4;\r\n        devDividendWeight = 1;\r\n\r\n        amountFeeRateNumerator = 1;\r\n        amountfeeRateDenominator = 5;\r\n\r\n        contractFeeRateNumerator = 1;\r\n        contractFeeRateDenominator = 5;\r\n        isDepositAvailable = true;\r\n        isRevenueWithdrawable = false;\r\n        isInitialized = true;\r\n    }\r\n\r\n    // Add a new pool. Can only be called by the owner.\r\n    function add(uint256 _allocPoint, IERC20 _tokenAddress, bool _withUpdate) public virtual {\r\n        checkAdmin();\r\n        if(_withUpdate){\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        PoolInfo memory newpool = PoolInfo({\r\n            token: _tokenAddress, \r\n            tokenAmount: 0,\r\n            allocPoint: _allocPoint,\r\n            lastDividendHeight: lastRewardBlock,\r\n            accumulativeDividend: 0,\r\n            accShardPerWeight: 0,\r\n            totalWeight: 0\r\n        });\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(newpool);\r\n        emit AddPool(poolInfo.length.sub(1), address(_tokenAddress));\r\n    }\r\n\r\n    // Update the given pool's allocation point. Can only be called by the owner.\r\n    function setAllocationPoint(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public virtual {\r\n        checkAdmin();\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    function setSHDPerBlock(uint256 _SHDPerBlock, bool _withUpdate) public virtual {\r\n        checkAdmin();\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        SHDPerBlock = _SHDPerBlock;\r\n    }\r\n\r\n    function setIsDepositAvailable(bool _isDepositAvailable) public virtual onlyOwner {\r\n        isDepositAvailable = _isDepositAvailable;\r\n    }\r\n\r\n    function setIsRevenueWithdrawable(bool _isRevenueWithdrawable) public virtual onlyOwner {\r\n        isRevenueWithdrawable = _isRevenueWithdrawable;\r\n    }\r\n\r\n    // update reward vairables for pools. Be careful of gas spending!\r\n    function massUpdatePools() public virtual {\r\n        uint256 poolCount = poolInfo.length;\r\n        for(uint256 i = 0; i < poolCount; i ++){\r\n            updatePoolDividend(i);\r\n        }\r\n    }\r\n\r\n    function addAvailableDividend(uint256 _amount, bool _withUpdate) public virtual {\r\n        if(_withUpdate){\r\n            massUpdatePools();\r\n        }\r\n        SHARD.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        totalAvailableDividend = totalAvailableDividend.add(_amount);\r\n    }\r\n\r\n    // update reward vairables for a pool\r\n    function updatePoolDividend(uint256 _pid) public virtual {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastDividendHeight) {\r\n            return;\r\n        }\r\n        if (pool.tokenAmount == 0) {\r\n            pool.lastDividendHeight = block.number;\r\n            return;\r\n        }\r\n        uint256 availableDividend = totalAvailableDividend;\r\n        uint256 multiplier = getMultiplier(pool.lastDividendHeight, block.number);\r\n        uint256 producedToken = multiplier.mul(SHDPerBlock);\r\n        producedToken = availableDividend > producedToken? producedToken: availableDividend;\r\n        if(totalAllocPoint > 0){\r\n            uint256 poolDevidend = producedToken.mul(pool.allocPoint).div(totalAllocPoint);\r\n            if(poolDevidend > 0){\r\n                totalAvailableDividend = totalAvailableDividend.sub(poolDevidend);\r\n                pool.accumulativeDividend = pool.accumulativeDividend.add(poolDevidend);\r\n                pool.accShardPerWeight = pool.accShardPerWeight.add(poolDevidend.mul(1e12).div(pool.totalWeight));\r\n            } \r\n        }\r\n        pool.lastDividendHeight = block.number;\r\n    }\r\n\r\n    function depositETH(uint256 _pid) external payable virtual {\r\n        require(address(poolInfo[_pid].token) == WETHToken, \"invalid token\");\r\n        updateAfterDeposit(_pid, msg.value);\r\n    }\r\n\r\n    function withdrawETH(uint256 _pid, uint256 _amount) external virtual {\r\n        require(address(poolInfo[_pid].token) == WETHToken, \"invalid token\");\r\n        updateAfterwithdraw(_pid, _amount);\r\n        if(_amount > 0){\r\n            (bool success, ) = msg.sender.call{value: _amount}(new bytes(0));\r\n            require(success, \"Transfer: ETH_TRANSFER_FAILED\");\r\n        }\r\n    }\r\n\r\n    function updateAfterDeposit(uint256 _pid, uint256 _amount) internal{\r\n        require(isDepositAvailable, \"new invest is forbidden\");\r\n        require(_amount > 0, \"invalid amount\");\r\n        (address invitor, , bool isWithdrawn) = invitation.getInvitation(msg.sender);\r\n        require(invitor != address(0), \"should be accept invitation firstly\");\r\n        updatePoolDividend(_pid);\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        UserInfo storage userInvitor = userInfo[_pid][invitor];\r\n        uint256 existedAmount = user.amount;\r\n        bool withdrawnState = user.withdrawnState;\r\n        if(!user.isUsed){\r\n            user.isUsed = true;\r\n            judgeContractSender(_pid);\r\n            withdrawnState = isWithdrawn;\r\n        }\r\n        if(!withdrawnState && userInvitor.amount > 0){\r\n            updateUserRevenue(userInvitor, pool);\r\n        }\r\n        if(!withdrawnState){\r\n            updateInvitorWeight(msg.sender, invitor, _pid, true, _amount, isWithdrawn, withdrawnState);\r\n        }\r\n\r\n        if(existedAmount > 0){ \r\n            updateUserRevenue(user, pool);\r\n        }\r\n\r\n        updateUserWeight(msg.sender, _pid, true, _amount, isWithdrawn);\r\n        if(!withdrawnState && userInvitor.amount > 0){\r\n            userInvitor.rewardDebt = userInvitor.modifiedWeight.mul(pool.accShardPerWeight).div(1e12);\r\n        }  \r\n        if(!withdrawnState){\r\n            user.withdrawnState = isWithdrawn;\r\n        }\r\n        user.amount = existedAmount.add(_amount);\r\n        user.rewardDebt = user.modifiedWeight.mul(pool.accShardPerWeight).div(1e12);\r\n        pool.tokenAmount = pool.tokenAmount.add(_amount);\r\n        emit Deposit(msg.sender, _pid, _amount, user.modifiedWeight);\r\n    }\r\n\r\n    // Deposit tokens to marketing mining for SHD allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public virtual {\r\n        require(address(poolInfo[_pid].token) != WETHToken, \"invalid pid\");\r\n        IERC20(poolInfo[_pid].token).safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        updateAfterDeposit(_pid, _amount);\r\n    }\r\n\r\n    // Withdraw tokens from marketMining.\r\n    function withdraw(uint256 _pid, uint256 _amount) public virtual {\r\n        require(address(poolInfo[_pid].token) != WETHToken, \"invalid pid\");\r\n        IERC20(poolInfo[_pid].token).safeTransfer(address(msg.sender), _amount);\r\n        updateAfterwithdraw(_pid, _amount);\r\n    }\r\n\r\n    function updateAfterwithdraw(uint256 _pid, uint256 _amount) internal {\r\n        (address invitor, , bool isWithdrawn) = invitation.getInvitation(msg.sender);\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        bool withdrawnState = user.withdrawnState;\r\n        uint256 existedAmount = user.amount;\r\n        require(existedAmount >= _amount, \"withdraw: not good\");\r\n        updatePoolDividend(_pid);\r\n        uint256 pending = updateUserRevenue(user, pool);\r\n        UserInfo storage userInvitor = userInfo[_pid][invitor];\r\n        if(!withdrawnState && userInvitor.amount > 0){\r\n            updateUserRevenue(userInvitor, pool);\r\n        }\r\n        if(!withdrawnState){\r\n            updateInvitorWeight(msg.sender, invitor, _pid, false, _amount, isWithdrawn, withdrawnState);\r\n        }\r\n        updateUserWeight(msg.sender, _pid, false, _amount, isWithdrawn);\r\n        user.amount = existedAmount.sub(_amount);\r\n        user.rewardDebt = user.modifiedWeight.mul(pool.accShardPerWeight).div(1e12);\r\n        user.withdrawnState = isWithdrawn;\r\n        if(!withdrawnState && userInvitor.amount > 0){\r\n            userInvitor.rewardDebt = userInvitor.modifiedWeight.mul(pool.accShardPerWeight).div(1e12);\r\n        }\r\n        pool.tokenAmount = pool.tokenAmount.sub(_amount);\r\n        user.revenue = 0;\r\n        bool isContractSender = isUserContractSender[_pid][msg.sender];\r\n        (uint256 marketingFundDividend, uint256 devDividend, uint256 userDividend) = calculateDividend(pending, _pid, existedAmount, isContractSender);\r\n        user.userDividend = user.userDividend.add(userDividend);\r\n        user.devDividend = user.devDividend.add(devDividend);\r\n        if(marketingFundDividend > 0){\r\n            user.marketingFundDividend = user.marketingFundDividend.add(marketingFundDividend);\r\n        }\r\n        if(isRevenueWithdrawable){\r\n            devDividend = user.devDividend;\r\n            userDividend = user.userDividend;\r\n            marketingFundDividend = user.marketingFundDividend;\r\n            if(devDividend > 0){\r\n                safeSHARDTransfer(developerDAOFund, devDividend);\r\n            }\r\n            if(userDividend > 0){\r\n                safeSHARDTransfer(msg.sender, userDividend);\r\n            }\r\n            if(marketingFundDividend > 0){\r\n                safeSHARDTransfer(marketingFund, marketingFundDividend);\r\n            }\r\n            user.devDividend = 0;\r\n            user.userDividend = 0;\r\n            user.marketingFundDividend = 0;\r\n        }\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Safe SHD transfer function, just in case if rounding error causes pool to not have enough SHDs.\r\n    function safeSHARDTransfer(address _to, uint256 _amount) internal {\r\n        uint256 SHARDBal = SHARD.balanceOf(address(this));\r\n        if (_amount > SHARDBal) {\r\n            SHARD.transfer(_to, SHARDBal);\r\n        } else {\r\n            SHARD.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view virtual returns (uint256) {\r\n        if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n        } else if (_from >= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else {\r\n            return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\r\n                _to.sub(bonusEndBlock)\r\n            );\r\n        }\r\n    }\r\n\r\n    // View function to see pending SHDs on frontend.\r\n    function pendingSHARD(uint256 _pid, address _user) external view virtual \r\n    returns (uint256 _pending, uint256 _potential, uint256 _blockNumber) {\r\n        _blockNumber = block.number;\r\n        (_pending, _potential) = calculatePendingSHARD(_pid, _user);\r\n    }\r\n\r\n    function pendingSHARDByPids(uint256[] memory _pids, address _user) external view virtual\r\n    returns (uint256[] memory _pending, uint256[] memory _potential, uint256 _blockNumber){\r\n        uint256 poolCount = _pids.length;\r\n        _pending = new uint256[](poolCount);\r\n        _potential = new uint256[](poolCount);\r\n        _blockNumber = block.number;\r\n        for(uint i = 0; i < poolCount; i ++){\r\n            (_pending[i], _potential[i]) = calculatePendingSHARD(_pids[i], _user);\r\n        }\r\n    } \r\n\r\n    function calculatePendingSHARD(uint256 _pid, address _user) private view returns (uint256 _pending, uint256 _potential) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accShardPerWeight = pool.accShardPerWeight;\r\n        _pending = user.modifiedWeight.mul(accShardPerWeight).div(1e12).sub(user.rewardDebt).add(user.revenue);\r\n        bool isContractSender = isUserContractSender[_pid][_user];\r\n        _potential = _pending;\r\n        (,,_pending) = calculateDividend(_pending, _pid, user.amount, isContractSender);\r\n        _pending = _pending.add(user.userDividend);\r\n        uint256 lpSupply = pool.tokenAmount;\r\n        if (block.number > pool.lastDividendHeight && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastDividendHeight, block.number);\r\n            uint256 totalUnupdateToken = multiplier.mul(SHDPerBlock);\r\n            totalUnupdateToken = totalAvailableDividend > totalUnupdateToken? totalUnupdateToken: totalAvailableDividend;\r\n            uint256 shardReward = totalUnupdateToken.mul(pool.allocPoint).div(totalAllocPoint);\r\n            accShardPerWeight = accShardPerWeight.add(shardReward.mul(1e12).div(pool.totalWeight));\r\n        }\r\n        _potential = user.modifiedWeight.mul(accShardPerWeight).div(1e12).sub(user.rewardDebt).add(user.revenue).sub(_potential);\r\n        (,,_potential) = calculateDividend(_potential, _pid, user.amount, isContractSender);\r\n    }\r\n\r\n    function getDepositWeight(uint256 _amount) public pure returns(uint256 weight){\r\n        return _amount;\r\n    }\r\n\r\n    function getPoolLength() public view virtual returns(uint256){\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function getPoolInfo(uint256 _pid) public view virtual returns(uint256 _allocPoint, uint256 _accumulativeDividend, uint256 _usersTotalWeight, uint256 _tokenAmount, address _tokenAddress, uint256 _accs){\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        _allocPoint = pool.allocPoint;\r\n        _accumulativeDividend = pool.accumulativeDividend;\r\n        _usersTotalWeight = pool.totalWeight;\r\n        _tokenAmount = pool.tokenAmount;\r\n        _tokenAddress = address(pool.token);\r\n        _accs = pool.accShardPerWeight;\r\n    }\r\n\r\n    function getPagePoolInfo(uint256 _fromIndex, uint256 _toIndex) public view virtual\r\n    returns(uint256[] memory _allocPoint, uint256[] memory _accumulativeDividend, uint256[] memory _usersTotalWeight, uint256[] memory _tokenAmount, \r\n    address[] memory _tokenAddress, uint256[] memory _accs){\r\n        uint256 poolCount = _toIndex.sub(_fromIndex).add(1);\r\n        _allocPoint = new uint256[](poolCount);\r\n        _accumulativeDividend = new uint256[](poolCount);\r\n        _usersTotalWeight = new uint256[](poolCount);\r\n        _tokenAmount = new uint256[](poolCount);\r\n        _tokenAddress = new address[](poolCount);\r\n        _accs = new uint256[](poolCount);\r\n        uint256 startIndex = 0;\r\n        for(uint i = _fromIndex; i <= _toIndex; i ++){\r\n            PoolInfo storage pool = poolInfo[i];\r\n            _allocPoint[startIndex] = pool.allocPoint;\r\n            _accumulativeDividend[startIndex] = pool.accumulativeDividend;\r\n            _usersTotalWeight[startIndex] = pool.totalWeight;\r\n            _tokenAmount[startIndex] = pool.tokenAmount;\r\n            _tokenAddress[startIndex] = address(pool.token);\r\n            _accs[startIndex] = pool.accShardPerWeight;\r\n            startIndex ++;\r\n        }\r\n    }\r\n\r\n    function getUserInfoByPids(uint256[] memory _pids, address _user) public virtual view \r\n    returns(uint256[] memory _amount, uint256[] memory _modifiedWeight, uint256[] memory _revenue, uint256[] memory _userDividend, uint256[] memory _rewardDebt) {\r\n        uint256 poolCount = _pids.length;\r\n        _amount = new uint256[](poolCount);\r\n        _modifiedWeight = new uint256[](poolCount);\r\n        _revenue = new uint256[](poolCount);\r\n        _userDividend = new uint256[](poolCount);\r\n        _rewardDebt = new uint256[](poolCount);\r\n        for(uint i = 0; i < poolCount; i ++){\r\n            UserInfo storage user = userInfo[_pids[i]][_user];\r\n            _amount[i] = user.amount;\r\n            _modifiedWeight[i] = user.modifiedWeight;\r\n            _revenue[i] = user.revenue;\r\n            _userDividend[i] = user.userDividend;\r\n            _rewardDebt[i] = user.rewardDebt;\r\n        }\r\n    }\r\n\r\n    function updateUserRevenue(UserInfo storage _user, PoolInfo storage _pool) private returns (uint256){\r\n        uint256 pending = _user.modifiedWeight.mul(_pool.accShardPerWeight).div(1e12).sub(_user.rewardDebt);\r\n        _user.revenue = _user.revenue.add(pending);\r\n        _pool.accumulativeDividend = _pool.accumulativeDividend.sub(pending);\r\n        return _user.revenue;\r\n    }\r\n\r\n    function updateInvitorWeight(address _sender, address _invitor, uint256 _pid, bool _isAddAmount, uint256 _amount, bool _isWithdrawn, bool _withdrawnState) private {\r\n        UserInfo storage user = userInfo[_pid][_sender];\r\n        uint256 subInviteeAmount = 0;\r\n        uint256 addInviteeAmount = 0;\r\n        if(user.amount > 0  && !_withdrawnState){\r\n            subInviteeAmount = user.originWeight;\r\n        }\r\n        if(!_isWithdrawn){\r\n            if(_isAddAmount){\r\n                addInviteeAmount = getDepositWeight(user.amount.add(_amount));\r\n            }\r\n            else{ \r\n                addInviteeAmount = getDepositWeight(user.amount.sub(_amount));\r\n            }\r\n        }\r\n\r\n        UserInfo storage invitor = userInfo[_pid][_invitor];\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 inviteeAmountOfUserInvitor = userInviteeTotalAmount[_pid][_invitor];\r\n        uint256 newInviteeAmountOfUserInvitor = inviteeAmountOfUserInvitor.add(addInviteeAmount).sub(subInviteeAmount);\r\n        userInviteeTotalAmount[_pid][_invitor] = newInviteeAmountOfUserInvitor;\r\n        if(invitor.amount > 0){\r\n            invitor.modifiedWeight = invitor.modifiedWeight.add(newInviteeAmountOfUserInvitor.div(INVITEE_WEIGHT))\r\n                                                                   .sub(inviteeAmountOfUserInvitor.div(INVITEE_WEIGHT));\r\n            pool.totalWeight = pool.totalWeight.add(newInviteeAmountOfUserInvitor.div(INVITEE_WEIGHT))\r\n                                               .sub(inviteeAmountOfUserInvitor.div(INVITEE_WEIGHT));                              \r\n        }\r\n    }\r\n\r\n    function updateUserWeight(address _user, uint256 _pid, bool _isAddAmount, uint256 _amount, bool _isWithdrawn) private {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 userOriginModifiedWeight = user.modifiedWeight;\r\n        uint256 userNewModifiedWeight;\r\n        if(_isAddAmount){\r\n            userNewModifiedWeight = getDepositWeight(_amount.add(user.amount));\r\n        }\r\n        else{\r\n            userNewModifiedWeight = getDepositWeight(user.amount.sub(_amount));\r\n        }\r\n        user.originWeight = userNewModifiedWeight;\r\n        if(!_isWithdrawn){\r\n            userNewModifiedWeight = userNewModifiedWeight.add(userNewModifiedWeight.div(INVITOR_WEIGHT));\r\n        }\r\n        uint256 inviteeAmountOfUser = userInviteeTotalAmount[_pid][msg.sender];\r\n        userNewModifiedWeight = userNewModifiedWeight.add(inviteeAmountOfUser.div(INVITEE_WEIGHT));\r\n        user.modifiedWeight = userNewModifiedWeight;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        pool.totalWeight = pool.totalWeight.add(userNewModifiedWeight).sub(userOriginModifiedWeight);\r\n    }\r\n\r\n    function updateAfterModifyStartBlock(uint256 _newStartBlock) internal override{\r\n        uint256 poolLenght = poolInfo.length;\r\n        for(uint256 i = 0; i < poolLenght; i++){\r\n            PoolInfo storage info = poolInfo[i];\r\n            info.lastDividendHeight = _newStartBlock;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/MarketingMiningDelegator.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\ncontract MarketingMiningDelegator is DelegatorInterface, MarketingMining {\r\n    constructor(\r\n        address _SHARD,\r\n        address _invitation,\r\n        uint256 _bonusEndBlock,\r\n        uint256 _startBlock,\r\n        uint256 _shardPerBlock,\r\n        address _developerDAOFund,\r\n        address _marketingFund,\r\n        address _weth,\r\n        address implementation_,\r\n        bytes memory becomeImplementationData\r\n    ) public {\r\n        delegateTo(\r\n            implementation_,\r\n            abi.encodeWithSignature(\r\n                \"initialize(address,address,uint256,uint256,uint256,address,address,address)\",\r\n                _SHARD,\r\n                _invitation,\r\n                _bonusEndBlock,\r\n                _startBlock,\r\n                _shardPerBlock,\r\n                _developerDAOFund,\r\n                _marketingFund,\r\n                _weth\r\n            )\r\n        );\r\n        admin = msg.sender;\r\n        _setImplementation(implementation_, false, becomeImplementationData);\r\n    }\r\n\r\n    function _setImplementation(\r\n        address implementation_,\r\n        bool allowResign,\r\n        bytes memory becomeImplementationData\r\n    ) public override {\r\n        checkAdmin();\r\n        if (allowResign) {\r\n            delegateToImplementation(\r\n                abi.encodeWithSignature(\"_resignImplementation()\")\r\n            );\r\n        }\r\n\r\n        address oldImplementation = implementation;\r\n        implementation = implementation_;\r\n\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"_becomeImplementation(bytes)\",\r\n                becomeImplementationData\r\n            )\r\n        );\r\n\r\n        emit NewImplementation(oldImplementation, implementation);\r\n    }\r\n\r\n    function delegateTo(address callee, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\r\n        assembly {\r\n            if eq(success, 0) {\r\n                revert(add(returnData, 0x20), returndatasize())\r\n            }\r\n        }\r\n        return returnData;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates execution to the implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n    function delegateToImplementation(bytes memory data)\r\n        public\r\n        returns (bytes memory)\r\n    {\r\n        return delegateTo(implementation, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates execution to an implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n    function delegateToViewImplementation(bytes memory data)\r\n        public\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        (bool success, bytes memory returnData) =\r\n            address(this).staticcall(\r\n                abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data)\r\n            );\r\n        assembly {\r\n            if eq(success, 0) {\r\n                revert(add(returnData, 0x20), returndatasize())\r\n            }\r\n        }\r\n        return abi.decode(returnData, (bytes));\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates execution to an implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n    //  */\r\n    fallback() external payable {\r\n        if (msg.value > 0) return;\r\n        // delegate all other functions to current implementation\r\n        (bool success, ) = implementation.delegatecall(msg.data);\r\n        assembly {\r\n            let free_mem_ptr := mload(0x40)\r\n            returndatacopy(free_mem_ptr, 0, returndatasize())\r\n            switch success\r\n                case 0 {\r\n                    revert(free_mem_ptr, returndatasize())\r\n                }\r\n                default {\r\n                    return(free_mem_ptr, returndatasize())\r\n                }\r\n        }\r\n    }\r\n\r\n    \r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _tokenAddress,\r\n        bool _isUpdate\r\n    ) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"add(uint256,address,bool)\",\r\n                _allocPoint,\r\n                _tokenAddress,\r\n                _isUpdate\r\n            )\r\n        );\r\n    }\r\n\r\n    function setAllocationPoint(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"setAllocationPoint(uint256,uint256,bool)\",\r\n                _pid,\r\n                _allocPoint,\r\n                _withUpdate\r\n            )\r\n        );\r\n    }\r\n\r\n    function setSHDPerBlock(uint256 _shardPerBlock, bool _withUpdate) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"setSHDPerBlock(uint256,bool)\",\r\n                _shardPerBlock,\r\n                _withUpdate\r\n            )\r\n        );\r\n    }\r\n\r\n    function setIsDepositAvailable(bool _isDepositAvailable) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"setIsDepositAvailable(bool)\",\r\n                _isDepositAvailable\r\n            )\r\n        );\r\n    }\r\n\r\n    function setIsRevenueWithdrawable(bool _isRevenueWithdrawable) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"setIsRevenueWithdrawable(bool)\",\r\n                _isRevenueWithdrawable\r\n            )\r\n        );\r\n    }\r\n\r\n    function setStartBlock(\r\n        uint256 _startBlock\r\n    ) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"setStartBlock(uint256)\",\r\n                _startBlock\r\n            )\r\n        );\r\n    }\r\n\r\n    function massUpdatePools() public override {\r\n        delegateToImplementation(abi.encodeWithSignature(\"massUpdatePools()\"));\r\n    }\r\n\r\n    function addAvailableDividend(uint256 _amount, bool _isUpdate) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\"addAvailableDividend(uint256,bool)\", _amount, _isUpdate)\r\n        );\r\n    }\r\n\r\n    function updatePoolDividend(uint256 _pid) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\"updatePoolDividend(uint256)\", _pid)\r\n        );\r\n    }\r\n\r\n    function depositETH(\r\n        uint256 _pid\r\n    ) external payable override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"depositETH(uint256)\",\r\n                _pid\r\n            )\r\n        );\r\n    }\r\n\r\n    function deposit(\r\n        uint256 _pid,\r\n        uint256 _amount\r\n    ) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"deposit(uint256,uint256)\",\r\n                _pid,\r\n                _amount\r\n            )\r\n        );\r\n    }\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\"withdraw(uint256,uint256)\", _pid, _amount)\r\n        );\r\n    }\r\n\r\n    function withdrawETH(uint256 _pid, uint256 _amount) external override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\"withdrawETH(uint256,uint256)\", _pid, _amount)\r\n        );\r\n    }\r\n\r\n    function setDeveloperDAOFund(\r\n    address _developer\r\n    ) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"setDeveloperDAOFund(address)\",\r\n                _developer\r\n            )\r\n        );\r\n    }\r\n\r\n    function setDividendWeight(\r\n        uint256 _userDividendWeight,\r\n        uint256 _devDividendWeight\r\n    ) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"setDividendWeight(uint256,uint256)\",\r\n                _userDividendWeight,\r\n                _devDividendWeight\r\n            )\r\n        );\r\n    }\r\n\r\n    function setTokenAmountLimit(\r\n        uint256 _pid, \r\n        uint256 _tokenAmountLimit\r\n    ) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"setTokenAmountLimit(uint256,uint256)\",\r\n                _pid,\r\n                _tokenAmountLimit\r\n            )\r\n        );\r\n    }\r\n\r\n\r\n    function setTokenAmountLimitFeeRate(\r\n        uint256 _feeRateNumerator,\r\n        uint256 _feeRateDenominator\r\n    ) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"setTokenAmountLimitFeeRate(uint256,uint256)\",\r\n                _feeRateNumerator,\r\n                _feeRateDenominator\r\n            )\r\n        );\r\n    }\r\n\r\n    function setContracSenderFeeRate(\r\n        uint256 _feeRateNumerator,\r\n        uint256 _feeRateDenominator\r\n    ) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"setContracSenderFeeRate(uint256,uint256)\",\r\n                _feeRateNumerator,\r\n                _feeRateDenominator\r\n            )\r\n        );\r\n    }\r\n\r\n    function transferAdmin(\r\n        address _admin\r\n    ) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"transferAdmin(address)\",\r\n                _admin\r\n            )\r\n        );\r\n    }\r\n\r\n    function setMarketingFund(\r\n        address _marketingFund\r\n    ) public override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"setMarketingFund(address)\",\r\n                _marketingFund\r\n            )\r\n        );\r\n    }\r\n\r\n    function pendingSHARD(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256, uint256, uint256)\r\n    {\r\n        bytes memory data =\r\n            delegateToViewImplementation(\r\n                abi.encodeWithSignature(\r\n                    \"pendingSHARD(uint256,address)\",\r\n                    _pid,\r\n                    _user\r\n                )\r\n            );\r\n        return abi.decode(data, (uint256, uint256, uint256));\r\n    }\r\n\r\n    function pendingSHARDByPids(uint256[] memory _pids, address _user)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256[] memory _pending, uint256[] memory _potential, uint256 _blockNumber)\r\n    {\r\n        bytes memory data =\r\n            delegateToViewImplementation(\r\n                abi.encodeWithSignature(\r\n                    \"pendingSHARDByPids(uint256[],address)\",\r\n                    _pids,\r\n                    _user\r\n                )\r\n            );\r\n        return abi.decode(data, (uint256[], uint256[], uint256));\r\n    }\r\n\r\n    function getPoolLength() public view override returns (uint256) {\r\n        bytes memory data =\r\n            delegateToViewImplementation(\r\n                abi.encodeWithSignature(\"getPoolLength()\")\r\n            );\r\n        return abi.decode(data, (uint256));\r\n    }\r\n\r\n    function getMultiplier(uint256 _from, uint256 _to) public view override returns (uint256) {\r\n        bytes memory data =\r\n            delegateToViewImplementation(\r\n                abi.encodeWithSignature(\"getMultiplier(uint256,uint256)\", _from, _to)\r\n            );\r\n        return abi.decode(data, (uint256));\r\n    }\r\n\r\n    function getPoolInfo(uint256 _pid) \r\n        public \r\n        view \r\n        override\r\n        returns(\r\n            uint256 _allocPoint,\r\n            uint256 _accumulativeDividend, \r\n            uint256 _usersTotalWeight, \r\n            uint256 _tokenAmount, \r\n            address _tokenAddress, \r\n            uint256 _accs)\r\n    {\r\n        bytes memory data =\r\n            delegateToViewImplementation(\r\n                abi.encodeWithSignature(\r\n                    \"getPoolInfo(uint256)\",\r\n                    _pid\r\n                )\r\n            );\r\n            return\r\n            abi.decode(\r\n                data,\r\n                (\r\n                    uint256,\r\n                    uint256,\r\n                    uint256,\r\n                    uint256,\r\n                    address,\r\n                    uint256\r\n                )\r\n            );\r\n    }\r\n\r\n    function getPagePoolInfo(uint256 _fromIndex, uint256 _toIndex)\r\n        public\r\n        view\r\n        override\r\n        returns (\r\n            uint256[] memory _allocPoint,\r\n            uint256[] memory _accumulativeDividend, \r\n            uint256[] memory _usersTotalWeight, \r\n            uint256[] memory _tokenAmount, \r\n            address[] memory _tokenAddress, \r\n            uint256[] memory _accs\r\n        )\r\n    {\r\n        bytes memory data =\r\n            delegateToViewImplementation(\r\n                abi.encodeWithSignature(\r\n                    \"getPagePoolInfo(uint256,uint256)\",\r\n                    _fromIndex,\r\n                    _toIndex\r\n                )\r\n            );\r\n        return\r\n            abi.decode(\r\n                data,\r\n                (\r\n                    uint256[],\r\n                    uint256[],\r\n                    uint256[],\r\n                    uint256[],\r\n                    address[],\r\n                    uint256[]\r\n                )\r\n            );\r\n    }\r\n\r\n    function getUserInfoByPids(uint256[] memory _pids,  address _user)\r\n        public\r\n        view\r\n        override\r\n        returns (\r\n            uint256[] memory _amount,\r\n            uint256[] memory _modifiedWeight, \r\n            uint256[] memory _revenue, \r\n            uint256[] memory _userDividend, \r\n            uint256[] memory _rewardDebt\r\n        )\r\n    {\r\n        bytes memory data =\r\n            delegateToViewImplementation(\r\n                abi.encodeWithSignature(\r\n                    \"getUserInfoByPids(uint256[],address)\",\r\n                    _pids,\r\n                    _user\r\n                )\r\n            );\r\n        return\r\n            abi.decode(\r\n                data,\r\n                (\r\n                    uint256[],\r\n                    uint256[],\r\n                    uint256[],\r\n                    uint256[],\r\n                    uint256[]\r\n                )\r\n            );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SHARD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_invitation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_developerDAOFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"becomeImplementationData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVITEE_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVITOR_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHDPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowResign\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"becomeImplementationData\",\"type\":\"bytes\"}],\"name\":\"_setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isUpdate\",\"type\":\"bool\"}],\"name\":\"addAvailableDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFeeRateNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountfeeRateDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractFeeRateDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractFeeRateNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"delegateToImplementation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"delegateToViewImplementation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devDividendWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerDAOFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getDepositWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toIndex\",\"type\":\"uint256\"}],\"name\":\"getPagePoolInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allocPoint\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_accumulativeDividend\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_usersTotalWeight\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokenAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_accs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_accumulativeDividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usersTotalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_accs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfoByPids\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_modifiedWeight\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_revenue\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_userDividend\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardDebt\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_SHARD\",\"type\":\"address\"},{\"internalType\":\"contract IInvitation\",\"name\":\"_invitation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SHDPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_developerDAOFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invitation\",\"outputs\":[{\"internalType\":\"contract IInvitation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDepositAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevenueWithdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUserContractSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSHARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSHARDByPids\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pending\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_potential\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulativeDividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accShardPerWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolTokenAmountLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setAllocationPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeRateDenominator\",\"type\":\"uint256\"}],\"name\":\"setContracSenderFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developer\",\"type\":\"address\"}],\"name\":\"setDeveloperDAOFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userDividendWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devDividendWeight\",\"type\":\"uint256\"}],\"name\":\"setDividendWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isDepositAvailable\",\"type\":\"bool\"}],\"name\":\"setIsDepositAvailable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRevenueWithdrawable\",\"type\":\"bool\"}],\"name\":\"setIsRevenueWithdrawable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFund\",\"type\":\"address\"}],\"name\":\"setMarketingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setSHDPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountLimit\",\"type\":\"uint256\"}],\"name\":\"setTokenAmountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRateNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeRateDenominator\",\"type\":\"uint256\"}],\"name\":\"setTokenAmountLimitFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAvailableDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePoolDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userDividendWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modifiedWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devDividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFundDividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawnState\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUsed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInviteeTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarketingMiningDelegator", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005845cd0205b5d43af695412a79cf7c1aeddb060f000000000000000000000000627af3b7bb61cb5e96a1f31277eb387defe737a10000000000000000000000000000000000000000000000000000000000b885070000000000000000000000000000000000000000000000000000000000b885080000000000000000000000000000000000000000000000009105dba22ed500000000000000000000000000009522368481c84250fd4b2a4ea03fb875024d9956000000000000000000000000aeb5bcdb55e6abc2450595df27f993b82f375756000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000ab2cc3ab140e7596c5de18d1269ac39c53bd0db0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0xab2cc3ab140e7596c5de18d1269ac39c53bd0db0", "SwarmSource": "ipfs://22b3ff836f39d5840bcb91f8117189c07c44e05807dccf156b4d7773eae2667c"}, {"Rank": 4636, "Address": "0xa4e9f9415c915597211d5db194e66712c891cb98", "NameTag": "", "Balance": 1507.70396725, "Percentage": 0.0012802, "TxCount": 22, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}, {"Rank": 4794, "Address": "0x905903850117d1599df38dcd7392114fdacc15ef", "NameTag": "", "Balance": 1470.98266158, "Percentage": 0.00124901, "TxCount": 8, "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ninterface IProxy {\r\n    function masterCopy() external view returns (address);\r\n}\r\n\r\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract GnosisSafeProxy {\r\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal singleton;\r\n\r\n    /// @dev Constructor function sets address of singleton contract.\r\n    /// @param _singleton Singleton address.\r\n    constructor(address _singleton) {\r\n        require(_singleton != address(0), \"Invalid singleton address provided\");\r\n        singleton = _singleton;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    fallback() external payable {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, _singleton)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) {\r\n                revert(0, returndatasize())\r\n            }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract GnosisSafeProxyFactory {\r\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param singleton Address of singleton contract.\r\n    /// @param data Payload for message call sent to new proxy contract.\r\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\r\n        proxy = new GnosisSafeProxy(singleton);\r\n        if (data.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, singleton);\r\n    }\r\n\r\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\r\n    function proxyRuntimeCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).runtimeCode;\r\n    }\r\n\r\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\r\n    function proxyCreationCode() public pure returns (bytes memory) {\r\n        return type(GnosisSafeProxy).creationCode;\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\r\n    ///      This method is only meant as an utility to be called from other methods\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function deployProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) internal returns (GnosisSafeProxy proxy) {\r\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\r\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\r\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\r\n        }\r\n        require(address(proxy) != address(0), \"Create2 call failed\");\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function createProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        if (initializer.length > 0)\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        emit ProxyCreation(proxy, _singleton);\r\n    }\r\n\r\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\r\n    function createProxyWithCallback(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce,\r\n        IProxyCreationCallback callback\r\n    ) public returns (GnosisSafeProxy proxy) {\r\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\r\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\r\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\r\n    }\r\n\r\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\r\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\r\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\r\n    /// @param _singleton Address of singleton contract.\r\n    /// @param initializer Payload for message call sent to new proxy contract.\r\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n    function calculateCreateProxyWithNonceAddress(\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external returns (GnosisSafeProxy proxy) {\r\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\r\n        revert(string(abi.encodePacked(proxy)));\r\n    }\r\n}\r\n\r\ninterface IProxyCreationCallback {\r\n    function proxyCreated(\r\n        GnosisSafeProxy proxy,\r\n        address _singleton,\r\n        bytes calldata initializer,\r\n        uint256 saltNonce\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "GnosisSafeProxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9Db270c1B5E3Bd161E8c8503c55cEABeE709552", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1429297349653a4918076d650332de1a1068c5f3e07c5c82360c277770b9552"}, {"Rank": 4867, "Address": "0x690f0581ececcf8389c223170778cd9d029606f2", "NameTag": "", "Balance": 1441.1656, "Percentage": 0.0012237, "TxCount": 22, "SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != address(0), \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, masterCopy)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d8a00dc4fe6bf675a9d7416fc2d00bb3433362aa8186b750f76c4027269667ff"}]