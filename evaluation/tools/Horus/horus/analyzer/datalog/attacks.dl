#include "lib/horus.dl"

/* Reentrancy */
.decl Reentrancy(hash:symbol, timestamp:number, pc1:number, pc2:number, attacker:Address, caller:Address, callee:Address, depth:number, amount:Value)
Reentrancy(hash, timestamp, pc1, pc2, attacker, caller, callee, depth2, amount) :-
  storage(step1, _, "SLOAD", hash, _, caller, index, _, depth1),
  call(step2, hash, pc1, opcode, caller, callee, input_data,      _, depth1, call_id, call_branch, 1),
  call(step3, hash, pc1, opcode, caller, callee, input_data, amount, depth2, call_id, call_branch, 1),
  storage(step4, pc2, "SSTORE", hash, _, caller, index, _, depth1),
  depth1 < depth2,
  step1 < step2,
  step3 < step4,
  !match("0", amount),
  transaction(hash, _, block, attacker, _, _, _, _, 1),
  block(block, _, _, timestamp).
.output Reentrancy

/* Reentrancy */
.decl ReentrancyToken(hash:symbol, timestamp:number, pc1:number, pc2:number, attacker:Address, contract:Address, from:Address, to:Address, amount:Value)
ReentrancyToken(hash, timestamp, pc1, pc2, attacker, contract, from, to, amount) :-
  storage(step1, _, "SLOAD", hash, _, caller, index, _, depth1),
  call(step2, hash, pc1, opcode, caller, callee, input_data, _, depth1, call_id, call_branch, 1),
  call(step3, hash, pc1, opcode, caller, callee, input_data, _, depth2, call_id, call_branch, 1),
  storage(step4, pc2, "SSTORE", hash, _, caller, index, _, depth1),
  transfer(step5, hash, contract, from,   to, amount),
  transfer(step6, hash, contract,   to, from,      _),
  !match("0x0000000000000000000000000000000000000000", from),
  depth1 < depth2,
  step1 < step2,
  step3 < step4,
  step5 < step6,
  !match("0", amount),
  transaction(hash, _, block, attacker, _, _, _, _, 1),
  block(block, _, _, timestamp).
.output ReentrancyToken

/* Integer Overflow */
.decl IntegerOverflow(hash:symbol, timestamp:number, pc:number, opcode:Opcode, first_operand:Value, second_operand:Value, arithmetic_result:Value, evm_result:Value, attacker:Address, contract: Address, from:Address, to:Address, amount:Value)
IntegerOverflow(hash, timestamp, pc, opcode, first_operand, second_operand, arithmetic_result, evm_result, attacker, contract, from, to, amount) :-
  (opcode(step1, "CALLDATALOAD", hash);
  opcode(step1, "CALLDATACOPY", hash)),
  arithmetic(step2, pc, opcode, first_operand, second_operand, arithmetic_result, evm_result),
  arithmetic_result != evm_result,
  transfer(_, hash, contract, from, to, amount),
  !match("0", amount),
  (amount = first_operand;
  amount = second_operand),
  data_flow(step1, step2, hash),
  transaction(hash, _, block, attacker, _, _, _, _, 1),
  block(block, _, _, timestamp).
.output IntegerOverflow

/* Parity Wallet Hack 1 */
.decl ParityWalletHack1(hash1:symbol, hash2:symbol, pc:number, timestamp1:number, timestamp2:number, caller:Address, contract:Address, callee:Address, amount:Value)
ParityWalletHack1(hash1, hash2, pc, timestamp1, timestamp2, caller, contract, callee, amount) :-
  transaction(hash1, index1, block1, from, to, input_data1, _, _, 1),
  substr(input_data1, 0, 8) = "e46dcfeb",
  transaction(hash2, index2, block2, from, to, input_data2, _, _, 1),
  substr(input_data2, 0, 8) = "b61d27f6",
  call(step1, hash2, pc, "DELEGATECALL", _, contract, _, _, _, _, _, 1),
  call(step2, hash2, _, "CALL", caller, callee, _, amount, _, _, _, 1),
  step1 < step2,
  (block1 < block2;
  block1 = block2, index1 < index2),
  block(block1, _, _, timestamp1),
  block(block2, _, _, timestamp2).
.output ParityWalletHack1

/* Parity Wallet Hack 2 */
.decl ParityWalletHack2(hash1:symbol, hash2:symbol, pc:number, timestamp1:number, timestamp2:number, caller:Address, contract:Address, destination:Address, amount:Value)
ParityWalletHack2(hash1, hash2, pc, timestamp1, timestamp2, caller, contract, destination, amount) :-
  transaction(hash1, index1, block1, from, to, input_data1, _, _, 1),
  substr(input_data1, 0, 8) = "e46dcfeb",
  transaction(hash2, index2, block2, from, to, input_data2, _, _, 1),
  substr(input_data2, 0, 8) = "cbf0b0c0",
  (
   call(step1, hash2, pc, "DELEGATECALL", _, contract, _, _, _, _, _, 1),
   selfdestruct(step2, hash2, _, _, caller, destination, amount),
   step1 < step2;
   !call(_, hash2, _, "DELEGATECALL", _, _, _, _, _, _, _, 1),
   selfdestruct(step2, hash2, pc, contract, caller, destination, amount)
  ),
  (block1 < block2;
  block1 = block2, index1 < index2),
  block(block1, _, _, timestamp1),
  block(block2, _, _, timestamp2).
.output ParityWalletHack2

/* Unhandled Exception */
.decl UnhandledException(hash:symbol, timestamp:number, pc:number, attacker:Address, caller:Address, callee:Address, amount:Value)
UnhandledException(hash, timestamp, pc, attacker, caller, callee, amount) :-
  call(step1, hash, pc, "CALL", caller, callee, _, amount, _, _, _, 0),
  !match("0", amount),
  !used_in_condition(step1, hash),
  transaction(hash, _, block, attacker, _, _, _, _, 1),
  block(block, _, _, timestamp).
.output UnhandledException

/* Short Address */
.decl ShortAddress(hash:symbol, timestamp:number, step:number, attacker:Address, contract:Address, from:Address, to:Address, amount:Value)
ShortAddress(hash, timestamp, step, attacker, contract, from, to, amount) :-
  transaction(hash, _, block, attacker, _, input_data, _, _, 1),
  (substr(input_data, 0, 8) = "a9059cbb", strlen(input_data) / 2 < 68;
  substr(input_data, 0, 8) = "23b872dd", strlen(input_data) / 2 < 100),
  transfer(step, hash, contract, from, to, amount),
  !match("0", amount),
  block(block, _, _, timestamp).
.output ShortAddress
